
STM32103CT8x_GST_STAND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08004d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000314  20000090  08004dfc  00020090  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003a4  08004dfc  000203a4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001720d  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000380a  00000000  00000000  000372c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b26c  00000000  00000000  0003aad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e88  00000000  00000000  00045d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000015b0  00000000  00000000  00046bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009182  00000000  00000000  00048178  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000052d5  00000000  00000000  000512fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000565cf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000319c  00000000  00000000  0005664c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c5c 	.word	0x08004c5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08004c5c 	.word	0x08004c5c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a2:	f1a4 0401 	sub.w	r4, r4, #1
 80002a6:	d1e9      	bne.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f092 0f00 	teq	r2, #0
 800044e:	bf14      	ite	ne
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e720      	b.n	80002a8 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aedc 	beq.w	8000256 <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6c1      	b.n	8000256 <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2iz>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000900:	d215      	bcs.n	800092e <__aeabi_d2iz+0x36>
 8000902:	d511      	bpl.n	8000928 <__aeabi_d2iz+0x30>
 8000904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d912      	bls.n	8000934 <__aeabi_d2iz+0x3c>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	bf18      	it	ne
 8000924:	4240      	negne	r0, r0
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d105      	bne.n	8000940 <__aeabi_d2iz+0x48>
 8000934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000938:	bf08      	it	eq
 800093a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <__aeabi_d2f>:
 8000948:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800094c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000950:	bf24      	itt	cs
 8000952:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000956:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095a:	d90d      	bls.n	8000978 <__aeabi_d2f+0x30>
 800095c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000960:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000964:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000968:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800096c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000970:	bf08      	it	eq
 8000972:	f020 0001 	biceq.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800097c:	d121      	bne.n	80009c2 <__aeabi_d2f+0x7a>
 800097e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000982:	bfbc      	itt	lt
 8000984:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000988:	4770      	bxlt	lr
 800098a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800098e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000992:	f1c2 0218 	rsb	r2, r2, #24
 8000996:	f1c2 0c20 	rsb	ip, r2, #32
 800099a:	fa10 f30c 	lsls.w	r3, r0, ip
 800099e:	fa20 f002 	lsr.w	r0, r0, r2
 80009a2:	bf18      	it	ne
 80009a4:	f040 0001 	orrne.w	r0, r0, #1
 80009a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b4:	ea40 000c 	orr.w	r0, r0, ip
 80009b8:	fa23 f302 	lsr.w	r3, r3, r2
 80009bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c0:	e7cc      	b.n	800095c <__aeabi_d2f+0x14>
 80009c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009c6:	d107      	bne.n	80009d8 <__aeabi_d2f+0x90>
 80009c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009cc:	bf1e      	ittt	ne
 80009ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009d6:	4770      	bxne	lr
 80009d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_frsub>:
 80009e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009ec:	e002      	b.n	80009f4 <__addsf3>
 80009ee:	bf00      	nop

080009f0 <__aeabi_fsub>:
 80009f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f4 <__addsf3>:
 80009f4:	0042      	lsls	r2, r0, #1
 80009f6:	bf1f      	itttt	ne
 80009f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009fc:	ea92 0f03 	teqne	r2, r3
 8000a00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a08:	d06a      	beq.n	8000ae0 <__addsf3+0xec>
 8000a0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a12:	bfc1      	itttt	gt
 8000a14:	18d2      	addgt	r2, r2, r3
 8000a16:	4041      	eorgt	r1, r0
 8000a18:	4048      	eorgt	r0, r1
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	bfb8      	it	lt
 8000a1e:	425b      	neglt	r3, r3
 8000a20:	2b19      	cmp	r3, #25
 8000a22:	bf88      	it	hi
 8000a24:	4770      	bxhi	lr
 8000a26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a32:	bf18      	it	ne
 8000a34:	4240      	negne	r0, r0
 8000a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a42:	bf18      	it	ne
 8000a44:	4249      	negne	r1, r1
 8000a46:	ea92 0f03 	teq	r2, r3
 8000a4a:	d03f      	beq.n	8000acc <__addsf3+0xd8>
 8000a4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a50:	fa41 fc03 	asr.w	ip, r1, r3
 8000a54:	eb10 000c 	adds.w	r0, r0, ip
 8000a58:	f1c3 0320 	rsb	r3, r3, #32
 8000a5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a64:	d502      	bpl.n	8000a6c <__addsf3+0x78>
 8000a66:	4249      	negs	r1, r1
 8000a68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a70:	d313      	bcc.n	8000a9a <__addsf3+0xa6>
 8000a72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a76:	d306      	bcc.n	8000a86 <__addsf3+0x92>
 8000a78:	0840      	lsrs	r0, r0, #1
 8000a7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a7e:	f102 0201 	add.w	r2, r2, #1
 8000a82:	2afe      	cmp	r2, #254	; 0xfe
 8000a84:	d251      	bcs.n	8000b2a <__addsf3+0x136>
 8000a86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a8e:	bf08      	it	eq
 8000a90:	f020 0001 	biceq.w	r0, r0, #1
 8000a94:	ea40 0003 	orr.w	r0, r0, r3
 8000a98:	4770      	bx	lr
 8000a9a:	0049      	lsls	r1, r1, #1
 8000a9c:	eb40 0000 	adc.w	r0, r0, r0
 8000aa0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000aa4:	f1a2 0201 	sub.w	r2, r2, #1
 8000aa8:	d1ed      	bne.n	8000a86 <__addsf3+0x92>
 8000aaa:	fab0 fc80 	clz	ip, r0
 8000aae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ab6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aba:	bfaa      	itet	ge
 8000abc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac0:	4252      	neglt	r2, r2
 8000ac2:	4318      	orrge	r0, r3
 8000ac4:	bfbc      	itt	lt
 8000ac6:	40d0      	lsrlt	r0, r2
 8000ac8:	4318      	orrlt	r0, r3
 8000aca:	4770      	bx	lr
 8000acc:	f092 0f00 	teq	r2, #0
 8000ad0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad4:	bf06      	itte	eq
 8000ad6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ada:	3201      	addeq	r2, #1
 8000adc:	3b01      	subne	r3, #1
 8000ade:	e7b5      	b.n	8000a4c <__addsf3+0x58>
 8000ae0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ae8:	bf18      	it	ne
 8000aea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aee:	d021      	beq.n	8000b34 <__addsf3+0x140>
 8000af0:	ea92 0f03 	teq	r2, r3
 8000af4:	d004      	beq.n	8000b00 <__addsf3+0x10c>
 8000af6:	f092 0f00 	teq	r2, #0
 8000afa:	bf08      	it	eq
 8000afc:	4608      	moveq	r0, r1
 8000afe:	4770      	bx	lr
 8000b00:	ea90 0f01 	teq	r0, r1
 8000b04:	bf1c      	itt	ne
 8000b06:	2000      	movne	r0, #0
 8000b08:	4770      	bxne	lr
 8000b0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b0e:	d104      	bne.n	8000b1a <__addsf3+0x126>
 8000b10:	0040      	lsls	r0, r0, #1
 8000b12:	bf28      	it	cs
 8000b14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	4770      	bx	lr
 8000b1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b1e:	bf3c      	itt	cc
 8000b20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bxcc	lr
 8000b26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	4770      	bx	lr
 8000b34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b38:	bf16      	itet	ne
 8000b3a:	4608      	movne	r0, r1
 8000b3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b40:	4601      	movne	r1, r0
 8000b42:	0242      	lsls	r2, r0, #9
 8000b44:	bf06      	itte	eq
 8000b46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4a:	ea90 0f01 	teqeq	r0, r1
 8000b4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_ui2f>:
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	e004      	b.n	8000b64 <__aeabi_i2f+0x8>
 8000b5a:	bf00      	nop

08000b5c <__aeabi_i2f>:
 8000b5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b60:	bf48      	it	mi
 8000b62:	4240      	negmi	r0, r0
 8000b64:	ea5f 0c00 	movs.w	ip, r0
 8000b68:	bf08      	it	eq
 8000b6a:	4770      	bxeq	lr
 8000b6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b70:	4601      	mov	r1, r0
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	e01c      	b.n	8000bb2 <__aeabi_l2f+0x2a>

08000b78 <__aeabi_ul2f>:
 8000b78:	ea50 0201 	orrs.w	r2, r0, r1
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e00a      	b.n	8000b9c <__aeabi_l2f+0x14>
 8000b86:	bf00      	nop

08000b88 <__aeabi_l2f>:
 8000b88:	ea50 0201 	orrs.w	r2, r0, r1
 8000b8c:	bf08      	it	eq
 8000b8e:	4770      	bxeq	lr
 8000b90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__aeabi_l2f+0x14>
 8000b96:	4240      	negs	r0, r0
 8000b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9c:	ea5f 0c01 	movs.w	ip, r1
 8000ba0:	bf02      	ittt	eq
 8000ba2:	4684      	moveq	ip, r0
 8000ba4:	4601      	moveq	r1, r0
 8000ba6:	2000      	moveq	r0, #0
 8000ba8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bac:	bf08      	it	eq
 8000bae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bb6:	fabc f28c 	clz	r2, ip
 8000bba:	3a08      	subs	r2, #8
 8000bbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc0:	db10      	blt.n	8000be4 <__aeabi_l2f+0x5c>
 8000bc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bc6:	4463      	add	r3, ip
 8000bc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bcc:	f1c2 0220 	rsb	r2, r2, #32
 8000bd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd8:	eb43 0002 	adc.w	r0, r3, r2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f102 0220 	add.w	r2, r2, #32
 8000be8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bec:	f1c2 0220 	rsb	r2, r2, #32
 8000bf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000bf8:	eb43 0002 	adc.w	r0, r3, r2
 8000bfc:	bf08      	it	eq
 8000bfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_fmul>:
 8000c04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c12:	ea92 0f0c 	teqne	r2, ip
 8000c16:	ea93 0f0c 	teqne	r3, ip
 8000c1a:	d06f      	beq.n	8000cfc <__aeabi_fmul+0xf8>
 8000c1c:	441a      	add	r2, r3
 8000c1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c22:	0240      	lsls	r0, r0, #9
 8000c24:	bf18      	it	ne
 8000c26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2a:	d01e      	beq.n	8000c6a <__aeabi_fmul+0x66>
 8000c2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c38:	fba0 3101 	umull	r3, r1, r0, r1
 8000c3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c44:	bf3e      	ittt	cc
 8000c46:	0049      	lslcc	r1, r1, #1
 8000c48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c4c:	005b      	lslcc	r3, r3, #1
 8000c4e:	ea40 0001 	orr.w	r0, r0, r1
 8000c52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c56:	2afd      	cmp	r2, #253	; 0xfd
 8000c58:	d81d      	bhi.n	8000c96 <__aeabi_fmul+0x92>
 8000c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c62:	bf08      	it	eq
 8000c64:	f020 0001 	biceq.w	r0, r0, #1
 8000c68:	4770      	bx	lr
 8000c6a:	f090 0f00 	teq	r0, #0
 8000c6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c72:	bf08      	it	eq
 8000c74:	0249      	lsleq	r1, r1, #9
 8000c76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c7e:	3a7f      	subs	r2, #127	; 0x7f
 8000c80:	bfc2      	ittt	gt
 8000c82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8a:	4770      	bxgt	lr
 8000c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	3a01      	subs	r2, #1
 8000c96:	dc5d      	bgt.n	8000d54 <__aeabi_fmul+0x150>
 8000c98:	f112 0f19 	cmn.w	r2, #25
 8000c9c:	bfdc      	itt	le
 8000c9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca2:	4770      	bxle	lr
 8000ca4:	f1c2 0200 	rsb	r2, r2, #0
 8000ca8:	0041      	lsls	r1, r0, #1
 8000caa:	fa21 f102 	lsr.w	r1, r1, r2
 8000cae:	f1c2 0220 	rsb	r2, r2, #32
 8000cb2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cba:	f140 0000 	adc.w	r0, r0, #0
 8000cbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc2:	bf08      	it	eq
 8000cc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc8:	4770      	bx	lr
 8000cca:	f092 0f00 	teq	r2, #0
 8000cce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd2:	bf02      	ittt	eq
 8000cd4:	0040      	lsleq	r0, r0, #1
 8000cd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cda:	3a01      	subeq	r2, #1
 8000cdc:	d0f9      	beq.n	8000cd2 <__aeabi_fmul+0xce>
 8000cde:	ea40 000c 	orr.w	r0, r0, ip
 8000ce2:	f093 0f00 	teq	r3, #0
 8000ce6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cea:	bf02      	ittt	eq
 8000cec:	0049      	lsleq	r1, r1, #1
 8000cee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf2:	3b01      	subeq	r3, #1
 8000cf4:	d0f9      	beq.n	8000cea <__aeabi_fmul+0xe6>
 8000cf6:	ea41 010c 	orr.w	r1, r1, ip
 8000cfa:	e78f      	b.n	8000c1c <__aeabi_fmul+0x18>
 8000cfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d00:	ea92 0f0c 	teq	r2, ip
 8000d04:	bf18      	it	ne
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d00a      	beq.n	8000d22 <__aeabi_fmul+0x11e>
 8000d0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d10:	bf18      	it	ne
 8000d12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d16:	d1d8      	bne.n	8000cca <__aeabi_fmul+0xc6>
 8000d18:	ea80 0001 	eor.w	r0, r0, r1
 8000d1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f090 0f00 	teq	r0, #0
 8000d26:	bf17      	itett	ne
 8000d28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d2c:	4608      	moveq	r0, r1
 8000d2e:	f091 0f00 	teqne	r1, #0
 8000d32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d36:	d014      	beq.n	8000d62 <__aeabi_fmul+0x15e>
 8000d38:	ea92 0f0c 	teq	r2, ip
 8000d3c:	d101      	bne.n	8000d42 <__aeabi_fmul+0x13e>
 8000d3e:	0242      	lsls	r2, r0, #9
 8000d40:	d10f      	bne.n	8000d62 <__aeabi_fmul+0x15e>
 8000d42:	ea93 0f0c 	teq	r3, ip
 8000d46:	d103      	bne.n	8000d50 <__aeabi_fmul+0x14c>
 8000d48:	024b      	lsls	r3, r1, #9
 8000d4a:	bf18      	it	ne
 8000d4c:	4608      	movne	r0, r1
 8000d4e:	d108      	bne.n	8000d62 <__aeabi_fmul+0x15e>
 8000d50:	ea80 0001 	eor.w	r0, r0, r1
 8000d54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	4770      	bx	lr
 8000d62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fdiv>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d069      	beq.n	8000e58 <__aeabi_fdiv+0xec>
 8000d84:	eba2 0203 	sub.w	r2, r2, r3
 8000d88:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8c:	0249      	lsls	r1, r1, #9
 8000d8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d92:	d037      	beq.n	8000e04 <__aeabi_fdiv+0x98>
 8000d94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da4:	428b      	cmp	r3, r1
 8000da6:	bf38      	it	cc
 8000da8:	005b      	lslcc	r3, r3, #1
 8000daa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db2:	428b      	cmp	r3, r1
 8000db4:	bf24      	itt	cs
 8000db6:	1a5b      	subcs	r3, r3, r1
 8000db8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dbc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dc6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dce:	bf24      	itt	cs
 8000dd0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dd8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ddc:	bf24      	itt	cs
 8000dde:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dee:	d1e0      	bne.n	8000db2 <__aeabi_fdiv+0x46>
 8000df0:	2afd      	cmp	r2, #253	; 0xfd
 8000df2:	f63f af50 	bhi.w	8000c96 <__aeabi_fmul+0x92>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dfc:	bf08      	it	eq
 8000dfe:	f020 0001 	biceq.w	r0, r0, #1
 8000e02:	4770      	bx	lr
 8000e04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0c:	327f      	adds	r2, #127	; 0x7f
 8000e0e:	bfc2      	ittt	gt
 8000e10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e18:	4770      	bxgt	lr
 8000e1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1e:	f04f 0300 	mov.w	r3, #0
 8000e22:	3a01      	subs	r2, #1
 8000e24:	e737      	b.n	8000c96 <__aeabi_fmul+0x92>
 8000e26:	f092 0f00 	teq	r2, #0
 8000e2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0040      	lsleq	r0, r0, #1
 8000e32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e36:	3a01      	subeq	r2, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fdiv+0xc2>
 8000e3a:	ea40 000c 	orr.w	r0, r0, ip
 8000e3e:	f093 0f00 	teq	r3, #0
 8000e42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	bf02      	ittt	eq
 8000e48:	0049      	lsleq	r1, r1, #1
 8000e4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e4e:	3b01      	subeq	r3, #1
 8000e50:	d0f9      	beq.n	8000e46 <__aeabi_fdiv+0xda>
 8000e52:	ea41 010c 	orr.w	r1, r1, ip
 8000e56:	e795      	b.n	8000d84 <__aeabi_fdiv+0x18>
 8000e58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e5c:	ea92 0f0c 	teq	r2, ip
 8000e60:	d108      	bne.n	8000e74 <__aeabi_fdiv+0x108>
 8000e62:	0242      	lsls	r2, r0, #9
 8000e64:	f47f af7d 	bne.w	8000d62 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	f47f af70 	bne.w	8000d50 <__aeabi_fmul+0x14c>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e776      	b.n	8000d62 <__aeabi_fmul+0x15e>
 8000e74:	ea93 0f0c 	teq	r3, ip
 8000e78:	d104      	bne.n	8000e84 <__aeabi_fdiv+0x118>
 8000e7a:	024b      	lsls	r3, r1, #9
 8000e7c:	f43f af4c 	beq.w	8000d18 <__aeabi_fmul+0x114>
 8000e80:	4608      	mov	r0, r1
 8000e82:	e76e      	b.n	8000d62 <__aeabi_fmul+0x15e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1ca      	bne.n	8000e26 <__aeabi_fdiv+0xba>
 8000e90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e94:	f47f af5c 	bne.w	8000d50 <__aeabi_fmul+0x14c>
 8000e98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e9c:	f47f af3c 	bne.w	8000d18 <__aeabi_fmul+0x114>
 8000ea0:	e75f      	b.n	8000d62 <__aeabi_fmul+0x15e>
 8000ea2:	bf00      	nop

08000ea4 <__gesf2>:
 8000ea4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ea8:	e006      	b.n	8000eb8 <__cmpsf2+0x4>
 8000eaa:	bf00      	nop

08000eac <__lesf2>:
 8000eac:	f04f 0c01 	mov.w	ip, #1
 8000eb0:	e002      	b.n	8000eb8 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__cmpsf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ebc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec8:	bf18      	it	ne
 8000eca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ece:	d011      	beq.n	8000ef4 <__cmpsf2+0x40>
 8000ed0:	b001      	add	sp, #4
 8000ed2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ed6:	bf18      	it	ne
 8000ed8:	ea90 0f01 	teqne	r0, r1
 8000edc:	bf58      	it	pl
 8000ede:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee2:	bf88      	it	hi
 8000ee4:	17c8      	asrhi	r0, r1, #31
 8000ee6:	bf38      	it	cc
 8000ee8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eec:	bf18      	it	ne
 8000eee:	f040 0001 	orrne.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ef8:	d102      	bne.n	8000f00 <__cmpsf2+0x4c>
 8000efa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000efe:	d105      	bne.n	8000f0c <__cmpsf2+0x58>
 8000f00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f04:	d1e4      	bne.n	8000ed0 <__cmpsf2+0x1c>
 8000f06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0a:	d0e1      	beq.n	8000ed0 <__cmpsf2+0x1c>
 8000f0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__aeabi_cfrcmple>:
 8000f14:	4684      	mov	ip, r0
 8000f16:	4608      	mov	r0, r1
 8000f18:	4661      	mov	r1, ip
 8000f1a:	e7ff      	b.n	8000f1c <__aeabi_cfcmpeq>

08000f1c <__aeabi_cfcmpeq>:
 8000f1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f1e:	f7ff ffc9 	bl	8000eb4 <__cmpsf2>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	bf48      	it	mi
 8000f26:	f110 0f00 	cmnmi.w	r0, #0
 8000f2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f2c <__aeabi_fcmpeq>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff fff4 	bl	8000f1c <__aeabi_cfcmpeq>
 8000f34:	bf0c      	ite	eq
 8000f36:	2001      	moveq	r0, #1
 8000f38:	2000      	movne	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_fcmplt>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff ffea 	bl	8000f1c <__aeabi_cfcmpeq>
 8000f48:	bf34      	ite	cc
 8000f4a:	2001      	movcc	r0, #1
 8000f4c:	2000      	movcs	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmple>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffe0 	bl	8000f1c <__aeabi_cfcmpeq>
 8000f5c:	bf94      	ite	ls
 8000f5e:	2001      	movls	r0, #1
 8000f60:	2000      	movhi	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmpge>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffd2 	bl	8000f14 <__aeabi_cfrcmple>
 8000f70:	bf94      	ite	ls
 8000f72:	2001      	movls	r0, #1
 8000f74:	2000      	movhi	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_fcmpgt>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff ffc8 	bl	8000f14 <__aeabi_cfrcmple>
 8000f84:	bf34      	ite	cc
 8000f86:	2001      	movcc	r0, #1
 8000f88:	2000      	movcs	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_f2iz>:
 8000f90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f98:	d30f      	bcc.n	8000fba <__aeabi_f2iz+0x2a>
 8000f9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa2:	d90d      	bls.n	8000fc0 <__aeabi_f2iz+0x30>
 8000fa4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb4:	bf18      	it	ne
 8000fb6:	4240      	negne	r0, r0
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr
 8000fc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc4:	d101      	bne.n	8000fca <__aeabi_f2iz+0x3a>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	d105      	bne.n	8000fd6 <__aeabi_f2iz+0x46>
 8000fca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fce:	bf08      	it	eq
 8000fd0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fd4:	4770      	bx	lr
 8000fd6:	f04f 0000 	mov.w	r0, #0
 8000fda:	4770      	bx	lr

08000fdc <__aeabi_f2uiz>:
 8000fdc:	0042      	lsls	r2, r0, #1
 8000fde:	d20e      	bcs.n	8000ffe <__aeabi_f2uiz+0x22>
 8000fe0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe4:	d30b      	bcc.n	8000ffe <__aeabi_f2uiz+0x22>
 8000fe6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fee:	d409      	bmi.n	8001004 <__aeabi_f2uiz+0x28>
 8000ff0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2uiz+0x32>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d102      	bne.n	8001014 <__aeabi_f2uiz+0x38>
 800100e:	f04f 30ff 	mov.w	r0, #4294967295
 8001012:	4770      	bx	lr
 8001014:	f04f 0000 	mov.w	r0, #0
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_InitTick+0x3c>)
{
 8001020:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001022:	7818      	ldrb	r0, [r3, #0]
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	fbb3 f3f0 	udiv	r3, r3, r0
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_InitTick+0x40>)
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	fbb0 f0f3 	udiv	r0, r0, r3
 8001034:	f000 fac8 	bl	80015c8 <HAL_SYSTICK_Config>
 8001038:	4604      	mov	r4, r0
 800103a:	b958      	cbnz	r0, 8001054 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103c:	2d0f      	cmp	r5, #15
 800103e:	d809      	bhi.n	8001054 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	4602      	mov	r2, r0
 8001042:	4629      	mov	r1, r5
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 fa7c 	bl	8001544 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <HAL_InitTick+0x44>)
 800104e:	4620      	mov	r0, r4
 8001050:	601d      	str	r5, [r3, #0]
 8001052:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	20000024 	.word	0x20000024
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x20>)
{
 8001066:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001072:	f000 fa55 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff ffd0 	bl	800101c <HAL_InitTick>
  HAL_MspInit();
 800107c:	f003 f8ee 	bl	800425c <HAL_MspInit>
}
 8001080:	2000      	movs	r0, #0
 8001082:	bd08      	pop	{r3, pc}
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_IncTick+0x10>)
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <HAL_IncTick+0x14>)
 800108c:	6811      	ldr	r1, [r2, #0]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	440b      	add	r3, r1
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2000018c 	.word	0x2000018c
 800109c:	20000000 	.word	0x20000000

080010a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010a0:	4b01      	ldr	r3, [pc, #4]	; (80010a8 <HAL_GetTick+0x8>)
 80010a2:	6818      	ldr	r0, [r3, #0]
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000018c 	.word	0x2000018c

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b538      	push	{r3, r4, r5, lr}
 80010ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fff6 	bl	80010a0 <HAL_GetTick>
 80010b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80010b8:	bf1e      	ittt	ne
 80010ba:	4b04      	ldrne	r3, [pc, #16]	; (80010cc <HAL_Delay+0x20>)
 80010bc:	781b      	ldrbne	r3, [r3, #0]
 80010be:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	1b40      	subs	r0, r0, r5
 80010c6:	4284      	cmp	r4, r0
 80010c8:	d8fa      	bhi.n	80010c0 <HAL_Delay+0x14>
  {
  }
}
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
 80010cc:	20000000 	.word	0x20000000

080010d0 <HAL_ADC_ConvCpltCallback>:
 80010d0:	4770      	bx	lr

080010d2 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80010d4:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010d8:	f012 0f50 	tst.w	r2, #80	; 0x50
 80010dc:	d11b      	bne.n	8001116 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	6892      	ldr	r2, [r2, #8]
 80010ea:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80010ee:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80010f2:	d10c      	bne.n	800110e <ADC_DMAConvCplt+0x3c>
 80010f4:	7b1a      	ldrb	r2, [r3, #12]
 80010f6:	b952      	cbnz	r2, 800110e <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001102:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001104:	bf5e      	ittt	pl
 8001106:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001108:	f042 0201 	orrpl.w	r2, r2, #1
 800110c:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffde 	bl	80010d0 <HAL_ADC_ConvCpltCallback>
 8001114:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001116:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8001118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4718      	bx	r3

08001120 <HAL_ADC_ConvHalfCpltCallback>:
 8001120:	4770      	bx	lr

08001122 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001122:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001124:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001126:	f7ff fffb 	bl	8001120 <HAL_ADC_ConvHalfCpltCallback>
 800112a:	bd08      	pop	{r3, pc}

0800112c <HAL_ADC_ErrorCallback>:
{
 800112c:	4770      	bx	lr

0800112e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800112e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001130:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001132:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001138:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800113a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001142:	f7ff fff3 	bl	800112c <HAL_ADC_ErrorCallback>
 8001146:	bd08      	pop	{r3, pc}

08001148 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001148:	2300      	movs	r3, #0
{ 
 800114a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800114c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800114e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001152:	2b01      	cmp	r3, #1
 8001154:	d074      	beq.n	8001240 <HAL_ADC_ConfigChannel+0xf8>
 8001156:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001158:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800115a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800115e:	2d06      	cmp	r5, #6
 8001160:	6802      	ldr	r2, [r0, #0]
 8001162:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001166:	680c      	ldr	r4, [r1, #0]
 8001168:	d825      	bhi.n	80011b6 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800116a:	442b      	add	r3, r5
 800116c:	251f      	movs	r5, #31
 800116e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001170:	3b05      	subs	r3, #5
 8001172:	409d      	lsls	r5, r3
 8001174:	ea26 0505 	bic.w	r5, r6, r5
 8001178:	fa04 f303 	lsl.w	r3, r4, r3
 800117c:	432b      	orrs	r3, r5
 800117e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001180:	2c09      	cmp	r4, #9
 8001182:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001186:	688d      	ldr	r5, [r1, #8]
 8001188:	d92f      	bls.n	80011ea <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800118a:	2607      	movs	r6, #7
 800118c:	4423      	add	r3, r4
 800118e:	68d1      	ldr	r1, [r2, #12]
 8001190:	3b1e      	subs	r3, #30
 8001192:	409e      	lsls	r6, r3
 8001194:	ea21 0106 	bic.w	r1, r1, r6
 8001198:	fa05 f303 	lsl.w	r3, r5, r3
 800119c:	430b      	orrs	r3, r1
 800119e:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011a0:	f1a4 0310 	sub.w	r3, r4, #16
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d92b      	bls.n	8001200 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	b002      	add	sp, #8
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80011b6:	2d0c      	cmp	r5, #12
 80011b8:	d80b      	bhi.n	80011d2 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011ba:	442b      	add	r3, r5
 80011bc:	251f      	movs	r5, #31
 80011be:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80011c0:	3b23      	subs	r3, #35	; 0x23
 80011c2:	409d      	lsls	r5, r3
 80011c4:	ea26 0505 	bic.w	r5, r6, r5
 80011c8:	fa04 f303 	lsl.w	r3, r4, r3
 80011cc:	432b      	orrs	r3, r5
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	e7d6      	b.n	8001180 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011d2:	442b      	add	r3, r5
 80011d4:	251f      	movs	r5, #31
 80011d6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80011d8:	3b41      	subs	r3, #65	; 0x41
 80011da:	409d      	lsls	r5, r3
 80011dc:	ea26 0505 	bic.w	r5, r6, r5
 80011e0:	fa04 f303 	lsl.w	r3, r4, r3
 80011e4:	432b      	orrs	r3, r5
 80011e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011e8:	e7ca      	b.n	8001180 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011ea:	2607      	movs	r6, #7
 80011ec:	6911      	ldr	r1, [r2, #16]
 80011ee:	4423      	add	r3, r4
 80011f0:	409e      	lsls	r6, r3
 80011f2:	ea21 0106 	bic.w	r1, r1, r6
 80011f6:	fa05 f303 	lsl.w	r3, r5, r3
 80011fa:	430b      	orrs	r3, r1
 80011fc:	6113      	str	r3, [r2, #16]
 80011fe:	e7cf      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_ADC_ConfigChannel+0xfc>)
 8001202:	429a      	cmp	r2, r3
 8001204:	d116      	bne.n	8001234 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001206:	6893      	ldr	r3, [r2, #8]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	d4cd      	bmi.n	80011a8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800120c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800120e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001210:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001214:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001216:	d1c7      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_ADC_ConfigChannel+0x100>)
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_ADC_ConfigChannel+0x104>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001222:	230a      	movs	r3, #10
 8001224:	4353      	muls	r3, r2
            wait_loop_index--;
 8001226:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001228:	9b01      	ldr	r3, [sp, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0bc      	beq.n	80011a8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800122e:	9b01      	ldr	r3, [sp, #4]
 8001230:	3b01      	subs	r3, #1
 8001232:	e7f8      	b.n	8001226 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001234:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e7b4      	b.n	80011aa <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001240:	2302      	movs	r3, #2
 8001242:	e7b5      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x68>
 8001244:	40012400 	.word	0x40012400
 8001248:	20000024 	.word	0x20000024
 800124c:	000f4240 	.word	0x000f4240

08001250 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001250:	2300      	movs	r3, #0
{
 8001252:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001254:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001256:	6803      	ldr	r3, [r0, #0]
{
 8001258:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	07d2      	lsls	r2, r2, #31
 800125e:	d502      	bpl.n	8001266 <ADC_Enable+0x16>
  return HAL_OK;
 8001260:	2000      	movs	r0, #0
}
 8001262:	b002      	add	sp, #8
 8001264:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <ADC_Enable+0x68>)
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <ADC_Enable+0x6c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001278:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800127a:	9b01      	ldr	r3, [sp, #4]
 800127c:	b9c3      	cbnz	r3, 80012b0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800127e:	f7ff ff0f 	bl	80010a0 <HAL_GetTick>
 8001282:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	689d      	ldr	r5, [r3, #8]
 8001288:	f015 0501 	ands.w	r5, r5, #1
 800128c:	d1e8      	bne.n	8001260 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800128e:	f7ff ff07 	bl	80010a0 <HAL_GetTick>
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	2802      	cmp	r0, #2
 8001296:	d9f5      	bls.n	8001284 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001298:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800129a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80012a6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80012ae:	e7d8      	b.n	8001262 <ADC_Enable+0x12>
      wait_loop_index--;
 80012b0:	9b01      	ldr	r3, [sp, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	e7e0      	b.n	8001278 <ADC_Enable+0x28>
 80012b6:	bf00      	nop
 80012b8:	20000024 	.word	0x20000024
 80012bc:	000f4240 	.word	0x000f4240

080012c0 <HAL_ADC_Start_DMA>:
{
 80012c0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80012c4:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012c6:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <HAL_ADC_Start_DMA+0x108>)
 80012c8:	6802      	ldr	r2, [r0, #0]
{
 80012ca:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012cc:	429a      	cmp	r2, r3
{
 80012ce:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012d0:	d002      	beq.n	80012d8 <HAL_ADC_Start_DMA+0x18>
 80012d2:	493e      	ldr	r1, [pc, #248]	; (80013cc <HAL_ADC_Start_DMA+0x10c>)
 80012d4:	428a      	cmp	r2, r1
 80012d6:	d103      	bne.n	80012e0 <HAL_ADC_Start_DMA+0x20>
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80012de:	d16e      	bne.n	80013be <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80012e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d06c      	beq.n	80013c2 <HAL_ADC_Start_DMA+0x102>
 80012e8:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80012ea:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80012ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80012f0:	f7ff ffae 	bl	8001250 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80012f4:	4606      	mov	r6, r0
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d15d      	bne.n	80013b6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80012fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012fc:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80012fe:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001304:	f020 0001 	bic.w	r0, r0, #1
 8001308:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800130c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800130e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001310:	d104      	bne.n	800131c <HAL_ADC_Start_DMA+0x5c>
 8001312:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <HAL_ADC_Start_DMA+0x108>)
 8001314:	6853      	ldr	r3, [r2, #4]
 8001316:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800131a:	d13e      	bne.n	800139a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800131c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800131e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001322:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001324:	684b      	ldr	r3, [r1, #4]
 8001326:	055a      	lsls	r2, r3, #21
 8001328:	d505      	bpl.n	8001336 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800132a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800132c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001334:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001338:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800133e:	bf18      	it	ne
 8001340:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001342:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001344:	bf18      	it	ne
 8001346:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800134a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800134c:	2300      	movs	r3, #0
 800134e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001354:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001356:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_ADC_Start_DMA+0x114>)
 800135a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_ADC_Start_DMA+0x118>)
 800135e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001360:	f06f 0302 	mvn.w	r3, #2
 8001364:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001368:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001374:	4643      	mov	r3, r8
 8001376:	f000 f96d 	bl	8001654 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001382:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	bf0c      	ite	eq
 800138a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800138e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001392:	609a      	str	r2, [r3, #8]
}
 8001394:	4630      	mov	r0, r6
 8001396:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800139a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800139c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013a0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013a2:	6853      	ldr	r3, [r2, #4]
 80013a4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013a6:	bf41      	itttt	mi
 80013a8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80013aa:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80013ae:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80013b2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80013b4:	e7bf      	b.n	8001336 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80013b6:	2300      	movs	r3, #0
 80013b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80013bc:	e7ea      	b.n	8001394 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80013be:	2601      	movs	r6, #1
 80013c0:	e7e8      	b.n	8001394 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80013c2:	2602      	movs	r6, #2
 80013c4:	e7e6      	b.n	8001394 <HAL_ADC_Start_DMA+0xd4>
 80013c6:	bf00      	nop
 80013c8:	40012400 	.word	0x40012400
 80013cc:	40012800 	.word	0x40012800
 80013d0:	080010d3 	.word	0x080010d3
 80013d4:	08001123 	.word	0x08001123
 80013d8:	0800112f 	.word	0x0800112f

080013dc <ADC_ConversionStop_Disable>:
{
 80013dc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013de:	6803      	ldr	r3, [r0, #0]
{
 80013e0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	07d2      	lsls	r2, r2, #31
 80013e6:	d401      	bmi.n	80013ec <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80013e8:	2000      	movs	r0, #0
 80013ea:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80013f4:	f7ff fe54 	bl	80010a0 <HAL_GetTick>
 80013f8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	07db      	lsls	r3, r3, #31
 8001400:	d5f2      	bpl.n	80013e8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001402:	f7ff fe4d 	bl	80010a0 <HAL_GetTick>
 8001406:	1b40      	subs	r0, r0, r5
 8001408:	2802      	cmp	r0, #2
 800140a:	d9f6      	bls.n	80013fa <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001410:	f043 0310 	orr.w	r3, r3, #16
 8001414:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800141e:	bd38      	pop	{r3, r4, r5, pc}

08001420 <HAL_ADC_Init>:
{
 8001420:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001422:	4604      	mov	r4, r0
 8001424:	2800      	cmp	r0, #0
 8001426:	d071      	beq.n	800150c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001428:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800142a:	b923      	cbnz	r3, 8001436 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800142c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800142e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001432:	f002 fb35 	bl	8003aa0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff ffd0 	bl	80013dc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800143c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800143e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001444:	d164      	bne.n	8001510 <HAL_ADC_Init+0xf0>
 8001446:	2800      	cmp	r0, #0
 8001448:	d162      	bne.n	8001510 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800144a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800144c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001450:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	f023 0302 	bic.w	r3, r3, #2
 8001456:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800145a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800145c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800145e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001460:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001462:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001466:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800146a:	d038      	beq.n	80014de <HAL_ADC_Init+0xbe>
 800146c:	2901      	cmp	r1, #1
 800146e:	bf14      	ite	ne
 8001470:	4606      	movne	r6, r0
 8001472:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001476:	7d25      	ldrb	r5, [r4, #20]
 8001478:	2d01      	cmp	r5, #1
 800147a:	d107      	bne.n	800148c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800147c:	2b00      	cmp	r3, #0
 800147e:	d130      	bne.n	80014e2 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001480:	69a3      	ldr	r3, [r4, #24]
 8001482:	3b01      	subs	r3, #1
 8001484:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001488:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800148c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800148e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001492:	685d      	ldr	r5, [r3, #4]
 8001494:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001498:	ea45 0506 	orr.w	r5, r5, r6
 800149c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800149e:	689e      	ldr	r6, [r3, #8]
 80014a0:	4d1d      	ldr	r5, [pc, #116]	; (8001518 <HAL_ADC_Init+0xf8>)
 80014a2:	ea05 0506 	and.w	r5, r5, r6
 80014a6:	ea45 0502 	orr.w	r5, r5, r2
 80014aa:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014ac:	d001      	beq.n	80014b2 <HAL_ADC_Init+0x92>
 80014ae:	2901      	cmp	r1, #1
 80014b0:	d120      	bne.n	80014f4 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014b2:	6921      	ldr	r1, [r4, #16]
 80014b4:	3901      	subs	r1, #1
 80014b6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80014b8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80014ba:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80014be:	4329      	orrs	r1, r5
 80014c0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_ADC_Init+0xfc>)
 80014c6:	400b      	ands	r3, r1
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d115      	bne.n	80014f8 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80014cc:	2300      	movs	r3, #0
 80014ce:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80014d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	62a3      	str	r3, [r4, #40]	; 0x28
 80014dc:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014de:	460e      	mov	r6, r1
 80014e0:	e7c9      	b.n	8001476 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014e4:	f043 0320 	orr.w	r3, r3, #32
 80014e8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014f2:	e7cb      	b.n	800148c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80014f4:	2100      	movs	r1, #0
 80014f6:	e7df      	b.n	80014b8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80014f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014fa:	f023 0312 	bic.w	r3, r3, #18
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800150c:	2001      	movs	r0, #1
}
 800150e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	62a3      	str	r3, [r4, #40]	; 0x28
 8001516:	e7f9      	b.n	800150c <HAL_ADC_Init+0xec>
 8001518:	ffe1f7fd 	.word	0xffe1f7fd
 800151c:	ff1f0efe 	.word	0xff1f0efe

08001520 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001522:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001526:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800152e:	041b      	lsls	r3, r3, #16
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800153a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800153c:	60d3      	str	r3, [r2, #12]
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b530      	push	{r4, r5, lr}
 8001548:	68dc      	ldr	r4, [r3, #12]
 800154a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	2b04      	cmp	r3, #4
 8001556:	bf28      	it	cs
 8001558:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001560:	bf98      	it	ls
 8001562:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	fa05 f303 	lsl.w	r3, r5, r3
 8001568:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156c:	bf88      	it	hi
 800156e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4019      	ands	r1, r3
 8001572:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	fa05 f404 	lsl.w	r4, r5, r4
 8001578:	3c01      	subs	r4, #1
 800157a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800157c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157e:	ea42 0201 	orr.w	r2, r2, r1
 8001582:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	bfa9      	itett	ge
 8001588:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	4b06      	ldrlt	r3, [pc, #24]	; (80015a8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	b2d2      	uxtbge	r2, r2
 8001590:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	bfbb      	ittet	lt
 8001596:	f000 000f 	andlt.w	r0, r0, #15
 800159a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	541a      	strblt	r2, [r3, r0]
 80015a2:	bd30      	pop	{r4, r5, pc}
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	e000ed14 	.word	0xe000ed14

080015ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015ac:	2800      	cmp	r0, #0
 80015ae:	db08      	blt.n	80015c2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b0:	2301      	movs	r3, #1
 80015b2:	0942      	lsrs	r2, r0, #5
 80015b4:	f000 001f 	and.w	r0, r0, #31
 80015b8:	fa03 f000 	lsl.w	r0, r3, r0
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <HAL_NVIC_EnableIRQ+0x18>)
 80015be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	3801      	subs	r0, #1
 80015ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015ce:	d20a      	bcs.n	80015e6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015f6:	b330      	cbz	r0, 8001646 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015f8:	2214      	movs	r2, #20
 80015fa:	6801      	ldr	r1, [r0, #0]
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015fe:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001600:	440b      	add	r3, r1
 8001602:	fbb3 f3f2 	udiv	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 800160c:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800160e:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001610:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001612:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001616:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001618:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800161a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161e:	4323      	orrs	r3, r4
 8001620:	6904      	ldr	r4, [r0, #16]
 8001622:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001624:	6944      	ldr	r4, [r0, #20]
 8001626:	4323      	orrs	r3, r4
 8001628:	6984      	ldr	r4, [r0, #24]
 800162a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800162c:	69c4      	ldr	r4, [r0, #28]
 800162e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001630:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001632:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001634:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001636:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001638:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800163e:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001642:	4618      	mov	r0, r3
 8001644:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
}
 8001648:	bd10      	pop	{r4, pc}
 800164a:	bf00      	nop
 800164c:	bffdfff8 	.word	0xbffdfff8
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001656:	f890 4020 	ldrb.w	r4, [r0, #32]
 800165a:	2c01      	cmp	r4, #1
 800165c:	d035      	beq.n	80016ca <HAL_DMA_Start_IT+0x76>
 800165e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001660:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001664:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001668:	42a5      	cmp	r5, r4
 800166a:	f04f 0600 	mov.w	r6, #0
 800166e:	f04f 0402 	mov.w	r4, #2
 8001672:	d128      	bne.n	80016c6 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001674:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001678:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800167a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800167c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800167e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001680:	f026 0601 	bic.w	r6, r6, #1
 8001684:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001686:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001688:	40bd      	lsls	r5, r7
 800168a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800168c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800168e:	6843      	ldr	r3, [r0, #4]
 8001690:	6805      	ldr	r5, [r0, #0]
 8001692:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001694:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001696:	bf0b      	itete	eq
 8001698:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800169a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800169c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800169e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80016a0:	b14b      	cbz	r3, 80016b6 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016a8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80016aa:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ac:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	602b      	str	r3, [r5, #0]
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	f043 030a 	orr.w	r3, r3, #10
 80016c4:	e7f0      	b.n	80016a8 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80016c6:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80016ca:	2002      	movs	r0, #2
}
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016d0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016d0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80016d4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d003      	beq.n	80016e2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	2304      	movs	r3, #4
 80016dc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80016de:	2001      	movs	r0, #1
 80016e0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e2:	6803      	ldr	r3, [r0, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	f022 020e 	bic.w	r2, r2, #14
 80016ea:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016f4:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_DMA_Abort_IT+0x88>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01f      	beq.n	800173a <HAL_DMA_Abort_IT+0x6a>
 80016fa:	3214      	adds	r2, #20
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d01e      	beq.n	800173e <HAL_DMA_Abort_IT+0x6e>
 8001700:	3214      	adds	r2, #20
 8001702:	4293      	cmp	r3, r2
 8001704:	d01d      	beq.n	8001742 <HAL_DMA_Abort_IT+0x72>
 8001706:	3214      	adds	r2, #20
 8001708:	4293      	cmp	r3, r2
 800170a:	d01d      	beq.n	8001748 <HAL_DMA_Abort_IT+0x78>
 800170c:	3214      	adds	r2, #20
 800170e:	4293      	cmp	r3, r2
 8001710:	d01d      	beq.n	800174e <HAL_DMA_Abort_IT+0x7e>
 8001712:	3214      	adds	r2, #20
 8001714:	4293      	cmp	r3, r2
 8001716:	bf0c      	ite	eq
 8001718:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800171c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001722:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001724:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001726:	2301      	movs	r3, #1
 8001728:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 800172c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800172e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001732:	b17b      	cbz	r3, 8001754 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001734:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001736:	4620      	mov	r0, r4
 8001738:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800173a:	2301      	movs	r3, #1
 800173c:	e7f0      	b.n	8001720 <HAL_DMA_Abort_IT+0x50>
 800173e:	2310      	movs	r3, #16
 8001740:	e7ee      	b.n	8001720 <HAL_DMA_Abort_IT+0x50>
 8001742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001746:	e7eb      	b.n	8001720 <HAL_DMA_Abort_IT+0x50>
 8001748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174c:	e7e8      	b.n	8001720 <HAL_DMA_Abort_IT+0x50>
 800174e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001752:	e7e5      	b.n	8001720 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	4618      	mov	r0, r3
}
 8001756:	bd10      	pop	{r4, pc}
 8001758:	40020008 	.word	0x40020008
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_DMA_IRQHandler>:
{
 8001760:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001762:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001764:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001766:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001768:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800176a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800176c:	4095      	lsls	r5, r2
 800176e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001770:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001772:	d032      	beq.n	80017da <HAL_DMA_IRQHandler+0x7a>
 8001774:	074d      	lsls	r5, r1, #29
 8001776:	d530      	bpl.n	80017da <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800177c:	bf5e      	ittt	pl
 800177e:	681a      	ldrpl	r2, [r3, #0]
 8001780:	f022 0204 	bicpl.w	r2, r2, #4
 8001784:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001786:	4a3e      	ldr	r2, [pc, #248]	; (8001880 <HAL_DMA_IRQHandler+0x120>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d019      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x60>
 800178c:	3214      	adds	r2, #20
 800178e:	4293      	cmp	r3, r2
 8001790:	d018      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x64>
 8001792:	3214      	adds	r2, #20
 8001794:	4293      	cmp	r3, r2
 8001796:	d017      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x68>
 8001798:	3214      	adds	r2, #20
 800179a:	4293      	cmp	r3, r2
 800179c:	d017      	beq.n	80017ce <HAL_DMA_IRQHandler+0x6e>
 800179e:	3214      	adds	r2, #20
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d017      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x74>
 80017a4:	3214      	adds	r2, #20
 80017a6:	4293      	cmp	r3, r2
 80017a8:	bf0c      	ite	eq
 80017aa:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80017ae:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80017b2:	4a34      	ldr	r2, [pc, #208]	; (8001884 <HAL_DMA_IRQHandler+0x124>)
 80017b4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80017b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d05e      	beq.n	800187a <HAL_DMA_IRQHandler+0x11a>
}
 80017bc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80017be:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017c0:	2304      	movs	r3, #4
 80017c2:	e7f6      	b.n	80017b2 <HAL_DMA_IRQHandler+0x52>
 80017c4:	2340      	movs	r3, #64	; 0x40
 80017c6:	e7f4      	b.n	80017b2 <HAL_DMA_IRQHandler+0x52>
 80017c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017cc:	e7f1      	b.n	80017b2 <HAL_DMA_IRQHandler+0x52>
 80017ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d2:	e7ee      	b.n	80017b2 <HAL_DMA_IRQHandler+0x52>
 80017d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017d8:	e7eb      	b.n	80017b2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017da:	2502      	movs	r5, #2
 80017dc:	4095      	lsls	r5, r2
 80017de:	4225      	tst	r5, r4
 80017e0:	d035      	beq.n	800184e <HAL_DMA_IRQHandler+0xee>
 80017e2:	078d      	lsls	r5, r1, #30
 80017e4:	d533      	bpl.n	800184e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	0694      	lsls	r4, r2, #26
 80017ea:	d406      	bmi.n	80017fa <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	f022 020a 	bic.w	r2, r2, #10
 80017f2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80017f4:	2201      	movs	r2, #1
 80017f6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017fa:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_DMA_IRQHandler+0x120>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d019      	beq.n	8001834 <HAL_DMA_IRQHandler+0xd4>
 8001800:	3214      	adds	r2, #20
 8001802:	4293      	cmp	r3, r2
 8001804:	d018      	beq.n	8001838 <HAL_DMA_IRQHandler+0xd8>
 8001806:	3214      	adds	r2, #20
 8001808:	4293      	cmp	r3, r2
 800180a:	d017      	beq.n	800183c <HAL_DMA_IRQHandler+0xdc>
 800180c:	3214      	adds	r2, #20
 800180e:	4293      	cmp	r3, r2
 8001810:	d017      	beq.n	8001842 <HAL_DMA_IRQHandler+0xe2>
 8001812:	3214      	adds	r2, #20
 8001814:	4293      	cmp	r3, r2
 8001816:	d017      	beq.n	8001848 <HAL_DMA_IRQHandler+0xe8>
 8001818:	3214      	adds	r2, #20
 800181a:	4293      	cmp	r3, r2
 800181c:	bf0c      	ite	eq
 800181e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001822:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_DMA_IRQHandler+0x124>)
 8001828:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800182a:	2300      	movs	r3, #0
 800182c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001830:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001832:	e7c1      	b.n	80017b8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001834:	2302      	movs	r3, #2
 8001836:	e7f6      	b.n	8001826 <HAL_DMA_IRQHandler+0xc6>
 8001838:	2320      	movs	r3, #32
 800183a:	e7f4      	b.n	8001826 <HAL_DMA_IRQHandler+0xc6>
 800183c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001840:	e7f1      	b.n	8001826 <HAL_DMA_IRQHandler+0xc6>
 8001842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001846:	e7ee      	b.n	8001826 <HAL_DMA_IRQHandler+0xc6>
 8001848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184c:	e7eb      	b.n	8001826 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800184e:	2508      	movs	r5, #8
 8001850:	4095      	lsls	r5, r2
 8001852:	4225      	tst	r5, r4
 8001854:	d011      	beq.n	800187a <HAL_DMA_IRQHandler+0x11a>
 8001856:	0709      	lsls	r1, r1, #28
 8001858:	d50f      	bpl.n	800187a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	f021 010e 	bic.w	r1, r1, #14
 8001860:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001862:	2301      	movs	r3, #1
 8001864:	fa03 f202 	lsl.w	r2, r3, r2
 8001868:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800186a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800186c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001870:	2300      	movs	r3, #0
 8001872:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001876:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001878:	e79e      	b.n	80017b8 <HAL_DMA_IRQHandler+0x58>
}
 800187a:	bc70      	pop	{r4, r5, r6}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40020008 	.word	0x40020008
 8001884:	40020000 	.word	0x40020000

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800188e:	4626      	mov	r6, r4
 8001890:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001892:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001a3c <HAL_GPIO_Init+0x1b4>
 8001896:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001a40 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	680a      	ldr	r2, [r1, #0]
 800189c:	fa32 f506 	lsrs.w	r5, r2, r6
 80018a0:	d102      	bne.n	80018a8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80018a2:	b003      	add	sp, #12
 80018a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80018a8:	f04f 0801 	mov.w	r8, #1
 80018ac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80018b4:	4590      	cmp	r8, r2
 80018b6:	d17f      	bne.n	80019b8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80018b8:	684d      	ldr	r5, [r1, #4]
 80018ba:	2d12      	cmp	r5, #18
 80018bc:	f000 80aa 	beq.w	8001a14 <HAL_GPIO_Init+0x18c>
 80018c0:	f200 8083 	bhi.w	80019ca <HAL_GPIO_Init+0x142>
 80018c4:	2d02      	cmp	r5, #2
 80018c6:	f000 80a2 	beq.w	8001a0e <HAL_GPIO_Init+0x186>
 80018ca:	d877      	bhi.n	80019bc <HAL_GPIO_Init+0x134>
 80018cc:	2d00      	cmp	r5, #0
 80018ce:	f000 8089 	beq.w	80019e4 <HAL_GPIO_Init+0x15c>
 80018d2:	2d01      	cmp	r5, #1
 80018d4:	f000 8099 	beq.w	8001a0a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018dc:	2aff      	cmp	r2, #255	; 0xff
 80018de:	bf93      	iteet	ls
 80018e0:	4682      	movls	sl, r0
 80018e2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80018e6:	3d08      	subhi	r5, #8
 80018e8:	f8d0 b000 	ldrls.w	fp, [r0]
 80018ec:	bf92      	itee	ls
 80018ee:	00b5      	lslls	r5, r6, #2
 80018f0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80018f4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f6:	fa09 f805 	lsl.w	r8, r9, r5
 80018fa:	ea2b 0808 	bic.w	r8, fp, r8
 80018fe:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001902:	bf88      	it	hi
 8001904:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001908:	ea48 0505 	orr.w	r5, r8, r5
 800190c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001910:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001914:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001918:	d04e      	beq.n	80019b8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800191a:	4d45      	ldr	r5, [pc, #276]	; (8001a30 <HAL_GPIO_Init+0x1a8>)
 800191c:	4f44      	ldr	r7, [pc, #272]	; (8001a30 <HAL_GPIO_Init+0x1a8>)
 800191e:	69ad      	ldr	r5, [r5, #24]
 8001920:	f026 0803 	bic.w	r8, r6, #3
 8001924:	f045 0501 	orr.w	r5, r5, #1
 8001928:	61bd      	str	r5, [r7, #24]
 800192a:	69bd      	ldr	r5, [r7, #24]
 800192c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001930:	f005 0501 	and.w	r5, r5, #1
 8001934:	9501      	str	r5, [sp, #4]
 8001936:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800193a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800193e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001940:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001944:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001948:	fa09 f90b 	lsl.w	r9, r9, fp
 800194c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001950:	4d38      	ldr	r5, [pc, #224]	; (8001a34 <HAL_GPIO_Init+0x1ac>)
 8001952:	42a8      	cmp	r0, r5
 8001954:	d063      	beq.n	8001a1e <HAL_GPIO_Init+0x196>
 8001956:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800195a:	42a8      	cmp	r0, r5
 800195c:	d061      	beq.n	8001a22 <HAL_GPIO_Init+0x19a>
 800195e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001962:	42a8      	cmp	r0, r5
 8001964:	d05f      	beq.n	8001a26 <HAL_GPIO_Init+0x19e>
 8001966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196a:	42a8      	cmp	r0, r5
 800196c:	bf0c      	ite	eq
 800196e:	2503      	moveq	r5, #3
 8001970:	2504      	movne	r5, #4
 8001972:	fa05 f50b 	lsl.w	r5, r5, fp
 8001976:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800197a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800197e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001980:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001984:	bf14      	ite	ne
 8001986:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001988:	4395      	biceq	r5, r2
 800198a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800198c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001992:	bf14      	ite	ne
 8001994:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001996:	4395      	biceq	r5, r2
 8001998:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800199a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800199c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a0:	bf14      	ite	ne
 80019a2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a4:	4395      	biceq	r5, r2
 80019a6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019aa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ae:	bf14      	ite	ne
 80019b0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b2:	ea25 0202 	biceq.w	r2, r5, r2
 80019b6:	60da      	str	r2, [r3, #12]
	position++;
 80019b8:	3601      	adds	r6, #1
 80019ba:	e76e      	b.n	800189a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80019bc:	2d03      	cmp	r5, #3
 80019be:	d022      	beq.n	8001a06 <HAL_GPIO_Init+0x17e>
 80019c0:	2d11      	cmp	r5, #17
 80019c2:	d189      	bne.n	80018d8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c4:	68cc      	ldr	r4, [r1, #12]
 80019c6:	3404      	adds	r4, #4
          break;
 80019c8:	e786      	b.n	80018d8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80019ca:	4f1b      	ldr	r7, [pc, #108]	; (8001a38 <HAL_GPIO_Init+0x1b0>)
 80019cc:	42bd      	cmp	r5, r7
 80019ce:	d009      	beq.n	80019e4 <HAL_GPIO_Init+0x15c>
 80019d0:	d812      	bhi.n	80019f8 <HAL_GPIO_Init+0x170>
 80019d2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001a44 <HAL_GPIO_Init+0x1bc>
 80019d6:	454d      	cmp	r5, r9
 80019d8:	d004      	beq.n	80019e4 <HAL_GPIO_Init+0x15c>
 80019da:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80019de:	454d      	cmp	r5, r9
 80019e0:	f47f af7a 	bne.w	80018d8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e4:	688c      	ldr	r4, [r1, #8]
 80019e6:	b1c4      	cbz	r4, 8001a1a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80019ea:	bf0c      	ite	eq
 80019ec:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80019f0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f4:	2408      	movs	r4, #8
 80019f6:	e76f      	b.n	80018d8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80019f8:	4575      	cmp	r5, lr
 80019fa:	d0f3      	beq.n	80019e4 <HAL_GPIO_Init+0x15c>
 80019fc:	4565      	cmp	r5, ip
 80019fe:	d0f1      	beq.n	80019e4 <HAL_GPIO_Init+0x15c>
 8001a00:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001a48 <HAL_GPIO_Init+0x1c0>
 8001a04:	e7eb      	b.n	80019de <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a06:	2400      	movs	r4, #0
 8001a08:	e766      	b.n	80018d8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a0a:	68cc      	ldr	r4, [r1, #12]
          break;
 8001a0c:	e764      	b.n	80018d8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a0e:	68cc      	ldr	r4, [r1, #12]
 8001a10:	3408      	adds	r4, #8
          break;
 8001a12:	e761      	b.n	80018d8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a14:	68cc      	ldr	r4, [r1, #12]
 8001a16:	340c      	adds	r4, #12
          break;
 8001a18:	e75e      	b.n	80018d8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a1a:	2404      	movs	r4, #4
 8001a1c:	e75c      	b.n	80018d8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a1e:	2500      	movs	r5, #0
 8001a20:	e7a7      	b.n	8001972 <HAL_GPIO_Init+0xea>
 8001a22:	2501      	movs	r5, #1
 8001a24:	e7a5      	b.n	8001972 <HAL_GPIO_Init+0xea>
 8001a26:	2502      	movs	r5, #2
 8001a28:	e7a3      	b.n	8001972 <HAL_GPIO_Init+0xea>
 8001a2a:	bf00      	nop
 8001a2c:	40010400 	.word	0x40010400
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	10210000 	.word	0x10210000
 8001a3c:	10310000 	.word	0x10310000
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10110000 	.word	0x10110000
 8001a48:	10220000 	.word	0x10220000

08001a4c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a4c:	6801      	ldr	r1, [r0, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	694b      	ldr	r3, [r1, #20]
 8001a52:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001a56:	d010      	beq.n	8001a7a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a58:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001a5c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a5e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a60:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a66:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a6a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001a76:	2001      	movs	r0, #1
 8001a78:	4770      	bx	lr
  }
  return HAL_OK;
 8001a7a:	4618      	mov	r0, r3
}
 8001a7c:	4770      	bx	lr

08001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001a7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a82:	4604      	mov	r4, r0
 8001a84:	4617      	mov	r7, r2
 8001a86:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a88:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001a8c:	b28e      	uxth	r6, r1
 8001a8e:	6825      	ldr	r5, [r4, #0]
 8001a90:	f1b8 0f01 	cmp.w	r8, #1
 8001a94:	bf0c      	ite	eq
 8001a96:	696b      	ldreq	r3, [r5, #20]
 8001a98:	69ab      	ldrne	r3, [r5, #24]
 8001a9a:	ea36 0303 	bics.w	r3, r6, r3
 8001a9e:	bf14      	ite	ne
 8001aa0:	2001      	movne	r0, #1
 8001aa2:	2000      	moveq	r0, #0
 8001aa4:	b908      	cbnz	r0, 8001aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aaa:	696b      	ldr	r3, [r5, #20]
 8001aac:	055a      	lsls	r2, r3, #21
 8001aae:	d516      	bpl.n	8001ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab0:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ab2:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aba:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001abe:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ac4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ac8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001acc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ace:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ad2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001ad4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001ad8:	2001      	movs	r0, #1
 8001ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001ade:	1c7b      	adds	r3, r7, #1
 8001ae0:	d0d5      	beq.n	8001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae2:	f7ff fadd 	bl	80010a0 <HAL_GetTick>
 8001ae6:	eba0 0009 	sub.w	r0, r0, r9
 8001aea:	4287      	cmp	r7, r0
 8001aec:	d301      	bcc.n	8001af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8001aee:	2f00      	cmp	r7, #0
 8001af0:	d1cd      	bne.n	8001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001af2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001af4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001af6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001af8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b02:	f042 0220 	orr.w	r2, r2, #32
 8001b06:	e7e4      	b.n	8001ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08001b08 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001b08:	b570      	push	{r4, r5, r6, lr}
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	075b      	lsls	r3, r3, #29
 8001b16:	d501      	bpl.n	8001b1c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b18:	2000      	movs	r0, #0
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff ff95 	bl	8001a4c <I2C_IsAcknowledgeFailed>
 8001b22:	b9a8      	cbnz	r0, 8001b50 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001b24:	1c6a      	adds	r2, r5, #1
 8001b26:	d0f3      	beq.n	8001b10 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b28:	f7ff faba 	bl	80010a0 <HAL_GetTick>
 8001b2c:	1b80      	subs	r0, r0, r6
 8001b2e:	4285      	cmp	r5, r0
 8001b30:	d301      	bcc.n	8001b36 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001b32:	2d00      	cmp	r5, #0
 8001b34:	d1ec      	bne.n	8001b10 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b36:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b38:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b3a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b44:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b4a:	f042 0220 	orr.w	r2, r2, #32
 8001b4e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001b50:	2001      	movs	r0, #1
}
 8001b52:	bd70      	pop	{r4, r5, r6, pc}

08001b54 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	4604      	mov	r4, r0
 8001b58:	460d      	mov	r5, r1
 8001b5a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b5c:	6820      	ldr	r0, [r4, #0]
 8001b5e:	6943      	ldr	r3, [r0, #20]
 8001b60:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001b64:	d001      	beq.n	8001b6a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001b66:	2000      	movs	r0, #0
}
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b6a:	6942      	ldr	r2, [r0, #20]
 8001b6c:	06d2      	lsls	r2, r2, #27
 8001b6e:	d50e      	bpl.n	8001b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b70:	f06f 0210 	mvn.w	r2, #16
 8001b74:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b76:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b78:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001b82:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b84:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8e:	f7ff fa87 	bl	80010a0 <HAL_GetTick>
 8001b92:	1b80      	subs	r0, r0, r6
 8001b94:	42a8      	cmp	r0, r5
 8001b96:	d801      	bhi.n	8001b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	d1df      	bne.n	8001b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b9c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b9e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ba2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001baa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001bac:	f042 0220 	orr.w	r2, r2, #32
 8001bb0:	e7e8      	b.n	8001b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001bb2 <I2C_WaitOnFlagUntilTimeout>:
{
 8001bb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	4690      	mov	r8, r2
 8001bba:	461f      	mov	r7, r3
 8001bbc:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bbe:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001bc2:	b28d      	uxth	r5, r1
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	f1b9 0f01 	cmp.w	r9, #1
 8001bca:	bf0c      	ite	eq
 8001bcc:	695b      	ldreq	r3, [r3, #20]
 8001bce:	699b      	ldrne	r3, [r3, #24]
 8001bd0:	ea35 0303 	bics.w	r3, r5, r3
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	4543      	cmp	r3, r8
 8001bdc:	d002      	beq.n	8001be4 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001bde:	2000      	movs	r0, #0
}
 8001be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001be4:	1c7b      	adds	r3, r7, #1
 8001be6:	d0ed      	beq.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be8:	f7ff fa5a 	bl	80010a0 <HAL_GetTick>
 8001bec:	1b80      	subs	r0, r0, r6
 8001bee:	4287      	cmp	r7, r0
 8001bf0:	d301      	bcc.n	8001bf6 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001bf2:	2f00      	cmp	r7, #0
 8001bf4:	d1e6      	bne.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bf8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bfa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bfc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c04:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c0a:	f042 0220 	orr.w	r2, r2, #32
 8001c0e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c10:	2001      	movs	r0, #1
 8001c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c16 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001c16:	b570      	push	{r4, r5, r6, lr}
 8001c18:	4604      	mov	r4, r0
 8001c1a:	460d      	mov	r5, r1
 8001c1c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	061b      	lsls	r3, r3, #24
 8001c24:	d501      	bpl.n	8001c2a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c26:	2000      	movs	r0, #0
 8001c28:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f7ff ff0e 	bl	8001a4c <I2C_IsAcknowledgeFailed>
 8001c30:	b9a8      	cbnz	r0, 8001c5e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001c32:	1c6a      	adds	r2, r5, #1
 8001c34:	d0f3      	beq.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c36:	f7ff fa33 	bl	80010a0 <HAL_GetTick>
 8001c3a:	1b80      	subs	r0, r0, r6
 8001c3c:	4285      	cmp	r5, r0
 8001c3e:	d301      	bcc.n	8001c44 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001c40:	2d00      	cmp	r5, #0
 8001c42:	d1ec      	bne.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c44:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c46:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c48:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c52:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c58:	f042 0220 	orr.w	r2, r2, #32
 8001c5c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
}
 8001c60:	bd70      	pop	{r4, r5, r6, pc}
	...

08001c64 <HAL_I2C_Init>:
{
 8001c64:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001c66:	4604      	mov	r4, r0
 8001c68:	b908      	cbnz	r0, 8001c6e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c76:	b91b      	cbnz	r3, 8001c80 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001c78:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c7c:	f001 ffb4 	bl	8003be8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001c82:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	6813      	ldr	r3, [r2, #0]
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c90:	f000 fdf4 	bl	800287c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c94:	6865      	ldr	r5, [r4, #4]
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_I2C_Init+0x138>)
 8001c98:	429d      	cmp	r5, r3
 8001c9a:	d84d      	bhi.n	8001d38 <HAL_I2C_Init+0xd4>
 8001c9c:	4b40      	ldr	r3, [pc, #256]	; (8001da0 <HAL_I2C_Init+0x13c>)
 8001c9e:	4298      	cmp	r0, r3
 8001ca0:	d9e3      	bls.n	8001c6a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca2:	4940      	ldr	r1, [pc, #256]	; (8001da4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ca4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca6:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001caa:	6853      	ldr	r3, [r2, #4]
 8001cac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cb4:	6a13      	ldr	r3, [r2, #32]
 8001cb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cba:	3101      	adds	r1, #1
 8001cbc:	4319      	orrs	r1, r3
 8001cbe:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc0:	69d1      	ldr	r1, [r2, #28]
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_I2C_Init+0x138>)
 8001cc4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001cc8:	429d      	cmp	r5, r3
 8001cca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cce:	f100 30ff 	add.w	r0, r0, #4294967295
 8001cd2:	d848      	bhi.n	8001d66 <HAL_I2C_Init+0x102>
 8001cd4:	006d      	lsls	r5, r5, #1
 8001cd6:	fbb0 f0f5 	udiv	r0, r0, r5
 8001cda:	3001      	adds	r0, #1
 8001cdc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	bf38      	it	cc
 8001ce4:	2304      	movcc	r3, #4
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cea:	6811      	ldr	r1, [r2, #0]
 8001cec:	6a20      	ldr	r0, [r4, #32]
 8001cee:	69e3      	ldr	r3, [r4, #28]
 8001cf0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001cf4:	4303      	orrs	r3, r0
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cfa:	6891      	ldr	r1, [r2, #8]
 8001cfc:	68e0      	ldr	r0, [r4, #12]
 8001cfe:	6923      	ldr	r3, [r4, #16]
 8001d00:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001d04:	4303      	orrs	r3, r0
 8001d06:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d0e:	68d1      	ldr	r1, [r2, #12]
 8001d10:	69a0      	ldr	r0, [r4, #24]
 8001d12:	6963      	ldr	r3, [r4, #20]
 8001d14:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001d18:	4303      	orrs	r3, r0
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d1e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d20:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001d28:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d30:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d32:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_I2C_Init+0x144>)
 8001d3a:	4298      	cmp	r0, r3
 8001d3c:	d995      	bls.n	8001c6a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001d3e:	4e19      	ldr	r6, [pc, #100]	; (8001da4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d40:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001d44:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d48:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d4a:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d4c:	6853      	ldr	r3, [r2, #4]
 8001d4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d52:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d54:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d58:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d5a:	6a13      	ldr	r3, [r2, #32]
 8001d5c:	fbb1 f1f6 	udiv	r1, r1, r6
 8001d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d64:	e7a9      	b.n	8001cba <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d66:	68a3      	ldr	r3, [r4, #8]
 8001d68:	b953      	cbnz	r3, 8001d80 <HAL_I2C_Init+0x11c>
 8001d6a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001d6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d72:	1c43      	adds	r3, r0, #1
 8001d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d78:	b16b      	cbz	r3, 8001d96 <HAL_I2C_Init+0x132>
 8001d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7e:	e7b2      	b.n	8001ce6 <HAL_I2C_Init+0x82>
 8001d80:	2319      	movs	r3, #25
 8001d82:	436b      	muls	r3, r5
 8001d84:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d88:	1c43      	adds	r3, r0, #1
 8001d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8e:	b113      	cbz	r3, 8001d96 <HAL_I2C_Init+0x132>
 8001d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d94:	e7a7      	b.n	8001ce6 <HAL_I2C_Init+0x82>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e7a5      	b.n	8001ce6 <HAL_I2C_Init+0x82>
 8001d9a:	bf00      	nop
 8001d9c:	000186a0 	.word	0x000186a0
 8001da0:	001e847f 	.word	0x001e847f
 8001da4:	000f4240 	.word	0x000f4240
 8001da8:	003d08ff 	.word	0x003d08ff

08001dac <HAL_I2C_Master_Transmit>:
{
 8001dac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001db0:	4604      	mov	r4, r0
 8001db2:	461f      	mov	r7, r3
 8001db4:	460d      	mov	r5, r1
 8001db6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff f972 	bl	80010a0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d004      	beq.n	8001dd0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001dc6:	2502      	movs	r5, #2
}
 8001dc8:	4628      	mov	r0, r5
 8001dca:	b004      	add	sp, #16
 8001dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd0:	9000      	str	r0, [sp, #0]
 8001dd2:	2319      	movs	r3, #25
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4958      	ldr	r1, [pc, #352]	; (8001f38 <HAL_I2C_Master_Transmit+0x18c>)
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7ff feea 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 8001dde:	2800      	cmp	r0, #0
 8001de0:	d1f1      	bne.n	8001dc6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001de2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d0ed      	beq.n	8001dc6 <HAL_I2C_Master_Transmit+0x1a>
 8001dea:	2301      	movs	r3, #1
 8001dec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001df6:	bf5e      	ittt	pl
 8001df8:	681a      	ldrpl	r2, [r3, #0]
 8001dfa:	f042 0201 	orrpl.w	r2, r2, #1
 8001dfe:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e06:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e08:	2221      	movs	r2, #33	; 0x21
 8001e0a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e0e:	2210      	movs	r2, #16
 8001e10:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e14:	2200      	movs	r2, #0
 8001e16:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001e18:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001e1c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001e20:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e22:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_I2C_Master_Transmit+0x190>)
 8001e24:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e28:	2a08      	cmp	r2, #8
 8001e2a:	d004      	beq.n	8001e36 <HAL_I2C_Master_Transmit+0x8a>
 8001e2c:	2a01      	cmp	r2, #1
 8001e2e:	d002      	beq.n	8001e36 <HAL_I2C_Master_Transmit+0x8a>
 8001e30:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e34:	d104      	bne.n	8001e40 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e002      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e42:	2a12      	cmp	r2, #18
 8001e44:	d0f7      	beq.n	8001e36 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e46:	9600      	str	r6, [sp, #0]
 8001e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff feae 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 8001e56:	b108      	cbz	r0, 8001e5c <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8001e58:	2501      	movs	r5, #1
 8001e5a:	e7b5      	b.n	8001dc8 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e5c:	6923      	ldr	r3, [r4, #16]
 8001e5e:	6822      	ldr	r2, [r4, #0]
 8001e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e64:	d113      	bne.n	8001e8e <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e66:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001e6a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e6c:	4633      	mov	r3, r6
 8001e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e70:	4933      	ldr	r1, [pc, #204]	; (8001f40 <HAL_I2C_Master_Transmit+0x194>)
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff fe03 	bl	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e78:	4605      	mov	r5, r0
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d1ec      	bne.n	8001e58 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	9003      	str	r0, [sp, #12]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	9203      	str	r2, [sp, #12]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	9303      	str	r3, [sp, #12]
 8001e8a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001e8c:	e044      	b.n	8001f18 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e8e:	11eb      	asrs	r3, r5, #7
 8001e90:	f003 0306 	and.w	r3, r3, #6
 8001e94:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001e98:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e9a:	492a      	ldr	r1, [pc, #168]	; (8001f44 <HAL_I2C_Master_Transmit+0x198>)
 8001e9c:	4633      	mov	r3, r6
 8001e9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff fdec 	bl	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d1d6      	bne.n	8001e58 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	b2ed      	uxtb	r5, r5
 8001eae:	611d      	str	r5, [r3, #16]
 8001eb0:	e7dc      	b.n	8001e6c <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb2:	4632      	mov	r2, r6
 8001eb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff fead 	bl	8001c16 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ebc:	b140      	cbz	r0, 8001ed0 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ec0:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	bf01      	itttt	eq
 8001ec4:	6822      	ldreq	r2, [r4, #0]
 8001ec6:	6813      	ldreq	r3, [r2, #0]
 8001ec8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001ecc:	6013      	streq	r3, [r2, #0]
 8001ece:	e7c3      	b.n	8001e58 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ed2:	6820      	ldr	r0, [r4, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001eda:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001edc:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ede:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ee0:	3a01      	subs	r2, #1
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ee6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ee8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001eea:	1e51      	subs	r1, r2, #1
 8001eec:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eee:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001ef0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ef2:	d50a      	bpl.n	8001f0a <HAL_I2C_Master_Transmit+0x15e>
 8001ef4:	b149      	cbz	r1, 8001f0a <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef6:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8001ef8:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001efa:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001efc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001efe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001f00:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001f08:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0a:	4632      	mov	r2, r6
 8001f0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff fdfa 	bl	8001b08 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	d1d2      	bne.n	8001ebe <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8001f18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1c9      	bne.n	8001eb2 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1e:	6821      	ldr	r1, [r4, #0]
 8001f20:	680a      	ldr	r2, [r1, #0]
 8001f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f26:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f28:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001f2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001f36:	e747      	b.n	8001dc8 <HAL_I2C_Master_Transmit+0x1c>
 8001f38:	00100002 	.word	0x00100002
 8001f3c:	ffff0000 	.word	0xffff0000
 8001f40:	00010002 	.word	0x00010002
 8001f44:	00010008 	.word	0x00010008

08001f48 <HAL_I2C_Master_Receive>:
{
 8001f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	4698      	mov	r8, r3
 8001f52:	460f      	mov	r7, r1
 8001f54:	4691      	mov	r9, r2
 8001f56:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff f8a2 	bl	80010a0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001f60:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d004      	beq.n	8001f70 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001f66:	2702      	movs	r7, #2
}
 8001f68:	4638      	mov	r0, r7
 8001f6a:	b009      	add	sp, #36	; 0x24
 8001f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f70:	9000      	str	r0, [sp, #0]
 8001f72:	2319      	movs	r3, #25
 8001f74:	2201      	movs	r2, #1
 8001f76:	499c      	ldr	r1, [pc, #624]	; (80021e8 <HAL_I2C_Master_Receive+0x2a0>)
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff fe1a 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	d1f1      	bne.n	8001f66 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001f82:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d0ed      	beq.n	8001f66 <HAL_I2C_Master_Receive+0x1e>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001f96:	bf5e      	ittt	pl
 8001f98:	681a      	ldrpl	r2, [r3, #0]
 8001f9a:	f042 0201 	orrpl.w	r2, r2, #1
 8001f9e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fa8:	2222      	movs	r2, #34	; 0x22
 8001faa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fae:	2210      	movs	r2, #16
 8001fb0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001fb8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001fbe:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001fc2:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc4:	4a89      	ldr	r2, [pc, #548]	; (80021ec <HAL_I2C_Master_Receive+0x2a4>)
 8001fc6:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fca:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fcc:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fce:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001fd2:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fd4:	d004      	beq.n	8001fe0 <HAL_I2C_Master_Receive+0x98>
 8001fd6:	2a01      	cmp	r2, #1
 8001fd8:	d002      	beq.n	8001fe0 <HAL_I2C_Master_Receive+0x98>
 8001fda:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001fde:	d104      	bne.n	8001fea <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e002      	b.n	8001ff0 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001fea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fec:	2a11      	cmp	r2, #17
 8001fee:	d0f7      	beq.n	8001fe0 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff0:	9500      	str	r5, [sp, #0]
 8001ff2:	4633      	mov	r3, r6
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff fdd9 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 8002000:	b108      	cbz	r0, 8002006 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8002002:	2701      	movs	r7, #1
 8002004:	e7b0      	b.n	8001f68 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002006:	6923      	ldr	r3, [r4, #16]
 8002008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	d143      	bne.n	8002098 <HAL_I2C_Master_Receive+0x150>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002010:	f047 0701 	orr.w	r7, r7, #1
 8002014:	b2ff      	uxtb	r7, r7
 8002016:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002018:	462b      	mov	r3, r5
 800201a:	4632      	mov	r2, r6
 800201c:	4974      	ldr	r1, [pc, #464]	; (80021f0 <HAL_I2C_Master_Receive+0x2a8>)
 800201e:	4620      	mov	r0, r4
 8002020:	f7ff fd2d 	bl	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002024:	4607      	mov	r7, r0
 8002026:	2800      	cmp	r0, #0
 8002028:	d1eb      	bne.n	8002002 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 800202a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	2a00      	cmp	r2, #0
 8002030:	d066      	beq.n	8002100 <HAL_I2C_Master_Receive+0x1b8>
    else if (hi2c->XferSize == 1U)
 8002032:	2a01      	cmp	r2, #1
 8002034:	d177      	bne.n	8002126 <HAL_I2C_Master_Receive+0x1de>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800203c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	9704      	str	r7, [sp, #16]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	9204      	str	r2, [sp, #16]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	9204      	str	r2, [sp, #16]
 800204c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002054:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002056:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002058:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80021f8 <HAL_I2C_Master_Receive+0x2b0>
    while (hi2c->XferSize > 0U)
 800205c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	d058      	beq.n	8002114 <HAL_I2C_Master_Receive+0x1cc>
      if (hi2c->XferSize <= 3U)
 8002062:	2b03      	cmp	r3, #3
 8002064:	f200 80ca 	bhi.w	80021fc <HAL_I2C_Master_Receive+0x2b4>
        if (hi2c->XferSize == 1U)
 8002068:	2b01      	cmp	r3, #1
 800206a:	d178      	bne.n	800215e <HAL_I2C_Master_Receive+0x216>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206c:	462a      	mov	r2, r5
 800206e:	4631      	mov	r1, r6
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff fd6f 	bl	8001b54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002076:	2800      	cmp	r0, #0
 8002078:	d1c3      	bne.n	8002002 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207a:	6822      	ldr	r2, [r4, #0]
 800207c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800207e:	6912      	ldr	r2, [r2, #16]
 8002080:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002084:	3301      	adds	r3, #1
 8002086:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002088:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800208a:	3b01      	subs	r3, #1
 800208c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800208e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002090:	3b01      	subs	r3, #1
 8002092:	b29b      	uxth	r3, r3
 8002094:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002096:	e7e1      	b.n	800205c <HAL_I2C_Master_Receive+0x114>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002098:	ea4f 18e7 	mov.w	r8, r7, asr #7
 800209c:	f008 0806 	and.w	r8, r8, #6
 80020a0:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80020a4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020a6:	4953      	ldr	r1, [pc, #332]	; (80021f4 <HAL_I2C_Master_Receive+0x2ac>)
 80020a8:	462b      	mov	r3, r5
 80020aa:	4632      	mov	r2, r6
 80020ac:	4620      	mov	r0, r4
 80020ae:	f7ff fce6 	bl	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d1a5      	bne.n	8002002 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	b2ff      	uxtb	r7, r7
 80020ba:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020bc:	4632      	mov	r2, r6
 80020be:	462b      	mov	r3, r5
 80020c0:	494b      	ldr	r1, [pc, #300]	; (80021f0 <HAL_I2C_Master_Receive+0x2a8>)
 80020c2:	4620      	mov	r0, r4
 80020c4:	f7ff fcdb 	bl	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c8:	4602      	mov	r2, r0
 80020ca:	2800      	cmp	r0, #0
 80020cc:	d199      	bne.n	8002002 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	9007      	str	r0, [sp, #28]
 80020d2:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020d4:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d6:	9107      	str	r1, [sp, #28]
 80020d8:	6999      	ldr	r1, [r3, #24]
 80020da:	9107      	str	r1, [sp, #28]
 80020dc:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020de:	6819      	ldr	r1, [r3, #0]
 80020e0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80020e4:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e6:	9500      	str	r5, [sp, #0]
 80020e8:	4633      	mov	r3, r6
 80020ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ee:	f7ff fd60 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d185      	bne.n	8002002 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80020fc:	6113      	str	r3, [r2, #16]
 80020fe:	e78b      	b.n	8002018 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002100:	9703      	str	r7, [sp, #12]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	9203      	str	r2, [sp, #12]
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	9203      	str	r2, [sp, #12]
 800210a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	2320      	movs	r3, #32
 8002116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800211a:	2300      	movs	r3, #0
 800211c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002120:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002124:	e720      	b.n	8001f68 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 8002126:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002128:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800212a:	d10e      	bne.n	800214a <HAL_I2C_Master_Receive+0x202>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800212c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002130:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002132:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	9705      	str	r7, [sp, #20]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	9205      	str	r2, [sp, #20]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	9205      	str	r2, [sp, #20]
 8002140:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002148:	e784      	b.n	8002054 <HAL_I2C_Master_Receive+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800214e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002150:	9706      	str	r7, [sp, #24]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	9206      	str	r2, [sp, #24]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	9306      	str	r3, [sp, #24]
 800215a:	9b06      	ldr	r3, [sp, #24]
 800215c:	e77c      	b.n	8002058 <HAL_I2C_Master_Receive+0x110>
        else if (hi2c->XferSize == 2U)
 800215e:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002160:	9500      	str	r5, [sp, #0]
 8002162:	4633      	mov	r3, r6
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4641      	mov	r1, r8
 800216a:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800216c:	d119      	bne.n	80021a2 <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800216e:	f7ff fd20 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 8002172:	2800      	cmp	r0, #0
 8002174:	f47f af45 	bne.w	8002002 <HAL_I2C_Master_Receive+0xba>
 8002178:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002188:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800218a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800218c:	3301      	adds	r3, #1
 800218e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002190:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002192:	3b01      	subs	r3, #1
 8002194:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002196:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002198:	3b01      	subs	r3, #1
 800219a:	b29b      	uxth	r3, r3
 800219c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800219e:	b662      	cpsie	i
 80021a0:	e76b      	b.n	800207a <HAL_I2C_Master_Receive+0x132>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a2:	f7ff fd06 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4602      	mov	r2, r0
 80021a8:	2800      	cmp	r0, #0
 80021aa:	f47f af2a 	bne.w	8002002 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ae:	6821      	ldr	r1, [r4, #0]
 80021b0:	680b      	ldr	r3, [r1, #0]
 80021b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021b6:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ba:	6821      	ldr	r1, [r4, #0]
 80021bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021be:	6909      	ldr	r1, [r1, #16]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021c0:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c2:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80021c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021c6:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 80021c8:	3301      	adds	r3, #1
 80021ca:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80021cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ce:	4641      	mov	r1, r8
          hi2c->XferSize--;
 80021d0:	3b01      	subs	r3, #1
 80021d2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80021d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29b      	uxth	r3, r3
 80021da:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021dc:	4633      	mov	r3, r6
 80021de:	f7ff fce8 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d0c9      	beq.n	800217a <HAL_I2C_Master_Receive+0x232>
 80021e6:	e70c      	b.n	8002002 <HAL_I2C_Master_Receive+0xba>
 80021e8:	00100002 	.word	0x00100002
 80021ec:	ffff0000 	.word	0xffff0000
 80021f0:	00010002 	.word	0x00010002
 80021f4:	00010008 	.word	0x00010008
 80021f8:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fc:	462a      	mov	r2, r5
 80021fe:	4631      	mov	r1, r6
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff fca7 	bl	8001b54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002206:	2800      	cmp	r0, #0
 8002208:	f47f aefb 	bne.w	8002002 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220c:	6822      	ldr	r2, [r4, #0]
 800220e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002210:	6912      	ldr	r2, [r2, #16]
 8002212:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002214:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002216:	1c53      	adds	r3, r2, #1
 8002218:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800221a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800221c:	3b01      	subs	r3, #1
 800221e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002220:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002222:	3b01      	subs	r3, #1
 8002224:	b29b      	uxth	r3, r3
 8002226:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	6959      	ldr	r1, [r3, #20]
 800222c:	0749      	lsls	r1, r1, #29
 800222e:	f57f af15 	bpl.w	800205c <HAL_I2C_Master_Receive+0x114>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	7053      	strb	r3, [r2, #1]
 8002236:	e724      	b.n	8002082 <HAL_I2C_Master_Receive+0x13a>

08002238 <HAL_I2C_IsDeviceReady>:
{
 8002238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800223c:	4604      	mov	r4, r0
 800223e:	b085      	sub	sp, #20
 8002240:	4698      	mov	r8, r3
 8002242:	4689      	mov	r9, r1
 8002244:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8002246:	f7fe ff2b 	bl	80010a0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800224a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800224e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002250:	2b20      	cmp	r3, #32
 8002252:	d003      	beq.n	800225c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002254:	2002      	movs	r0, #2
}
 8002256:	b005      	add	sp, #20
 8002258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800225c:	9000      	str	r0, [sp, #0]
 800225e:	2319      	movs	r3, #25
 8002260:	2201      	movs	r2, #1
 8002262:	4949      	ldr	r1, [pc, #292]	; (8002388 <HAL_I2C_IsDeviceReady+0x150>)
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff fca4 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 800226a:	2800      	cmp	r0, #0
 800226c:	d1f2      	bne.n	8002254 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 800226e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002272:	2b01      	cmp	r3, #1
 8002274:	d0ee      	beq.n	8002254 <HAL_I2C_IsDeviceReady+0x1c>
 8002276:	2301      	movs	r3, #1
 8002278:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800227c:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 800227e:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002280:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002282:	f8df b104 	ldr.w	fp, [pc, #260]	; 8002388 <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002286:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002288:	bf58      	it	pl
 800228a:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800228c:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8002290:	bf5c      	itt	pl
 8002292:	f042 0201 	orrpl.w	r2, r2, #1
 8002296:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	2324      	movs	r3, #36	; 0x24
 80022a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022aa:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80022ae:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b0:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b6:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022b8:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022c0:	9500      	str	r5, [sp, #0]
 80022c2:	4643      	mov	r3, r8
 80022c4:	2200      	movs	r2, #0
 80022c6:	f7ff fc74 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 80022ca:	b108      	cbz	r0, 80022d0 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 80022cc:	2001      	movs	r0, #1
 80022ce:	e7c2      	b.n	8002256 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022d0:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022d2:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022d4:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80022d8:	f7fe fee2 	bl	80010a0 <HAL_GetTick>
 80022dc:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022e2:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022e8:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022ec:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80022f0:	29a0      	cmp	r1, #160	; 0xa0
 80022f2:	d001      	beq.n	80022f8 <HAL_I2C_IsDeviceReady+0xc0>
 80022f4:	b902      	cbnz	r2, 80022f8 <HAL_I2C_IsDeviceReady+0xc0>
 80022f6:	b303      	cbz	r3, 800233a <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 80022f8:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022fa:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230c:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800230e:	d026      	beq.n	800235e <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002310:	2200      	movs	r2, #0
 8002312:	9203      	str	r2, [sp, #12]
 8002314:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002316:	491c      	ldr	r1, [pc, #112]	; (8002388 <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002318:	9203      	str	r2, [sp, #12]
 800231a:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800231c:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	9303      	str	r3, [sp, #12]
 8002320:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002322:	9500      	str	r5, [sp, #0]
 8002324:	2319      	movs	r3, #25
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff fc43 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 800232c:	2800      	cmp	r0, #0
 800232e:	d1cd      	bne.n	80022cc <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 8002330:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002334:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8002338:	e78d      	b.n	8002256 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7fe feb1 	bl	80010a0 <HAL_GetTick>
 800233e:	1b40      	subs	r0, r0, r5
 8002340:	4580      	cmp	r8, r0
 8002342:	d302      	bcc.n	800234a <HAL_I2C_IsDeviceReady+0x112>
 8002344:	f1b8 0f00 	cmp.w	r8, #0
 8002348:	d101      	bne.n	800234e <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800234a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002352:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002354:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002358:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800235c:	e7c6      	b.n	80022ec <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002362:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002364:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002366:	4620      	mov	r0, r4
 8002368:	9500      	str	r5, [sp, #0]
 800236a:	2319      	movs	r3, #25
 800236c:	2201      	movs	r2, #1
 800236e:	f7ff fc20 	bl	8001bb2 <I2C_WaitOnFlagUntilTimeout>
 8002372:	2800      	cmp	r0, #0
 8002374:	d1aa      	bne.n	80022cc <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 8002376:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8002378:	4557      	cmp	r7, sl
 800237a:	d399      	bcc.n	80022b0 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 800237c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002380:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8002384:	e7a2      	b.n	80022cc <HAL_I2C_IsDeviceReady+0x94>
 8002386:	bf00      	nop
 8002388:	00100002 	.word	0x00100002

0800238c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002390:	4605      	mov	r5, r0
 8002392:	b908      	cbnz	r0, 8002398 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
 8002396:	e03c      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002398:	6803      	ldr	r3, [r0, #0]
 800239a:	07db      	lsls	r3, r3, #31
 800239c:	d410      	bmi.n	80023c0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	079f      	lsls	r7, r3, #30
 80023a2:	d45d      	bmi.n	8002460 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a4:	682b      	ldr	r3, [r5, #0]
 80023a6:	0719      	lsls	r1, r3, #28
 80023a8:	f100 8094 	bmi.w	80024d4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	075a      	lsls	r2, r3, #29
 80023b0:	f100 80be 	bmi.w	8002530 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b4:	69e8      	ldr	r0, [r5, #28]
 80023b6:	2800      	cmp	r0, #0
 80023b8:	f040 812c 	bne.w	8002614 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80023bc:	2000      	movs	r0, #0
 80023be:	e028      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c0:	4c8f      	ldr	r4, [pc, #572]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023c2:	6863      	ldr	r3, [r4, #4]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d007      	beq.n	80023dc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023cc:	6863      	ldr	r3, [r4, #4]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
 80023d6:	6863      	ldr	r3, [r4, #4]
 80023d8:	03de      	lsls	r6, r3, #15
 80023da:	d506      	bpl.n	80023ea <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	039c      	lsls	r4, r3, #14
 80023e0:	d5dd      	bpl.n	800239e <HAL_RCC_OscConfig+0x12>
 80023e2:	686b      	ldr	r3, [r5, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1da      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
 80023e8:	e7d4      	b.n	8002394 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	686b      	ldr	r3, [r5, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d112      	bne.n	8002418 <HAL_RCC_OscConfig+0x8c>
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023fa:	f7fe fe51 	bl	80010a0 <HAL_GetTick>
 80023fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	0398      	lsls	r0, r3, #14
 8002404:	d4cb      	bmi.n	800239e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002406:	f7fe fe4b 	bl	80010a0 <HAL_GetTick>
 800240a:	1b80      	subs	r0, r0, r6
 800240c:	2864      	cmp	r0, #100	; 0x64
 800240e:	d9f7      	bls.n	8002400 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002410:	2003      	movs	r0, #3
}
 8002412:	b002      	add	sp, #8
 8002414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002418:	b99b      	cbnz	r3, 8002442 <HAL_RCC_OscConfig+0xb6>
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002428:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800242a:	f7fe fe39 	bl	80010a0 <HAL_GetTick>
 800242e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	0399      	lsls	r1, r3, #14
 8002434:	d5b3      	bpl.n	800239e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002436:	f7fe fe33 	bl	80010a0 <HAL_GetTick>
 800243a:	1b80      	subs	r0, r0, r6
 800243c:	2864      	cmp	r0, #100	; 0x64
 800243e:	d9f7      	bls.n	8002430 <HAL_RCC_OscConfig+0xa4>
 8002440:	e7e6      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	d103      	bne.n	8002452 <HAL_RCC_OscConfig+0xc6>
 800244a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244e:	6023      	str	r3, [r4, #0]
 8002450:	e7cf      	b.n	80023f2 <HAL_RCC_OscConfig+0x66>
 8002452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002456:	6023      	str	r3, [r4, #0]
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	e7cb      	b.n	80023f8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002460:	4c67      	ldr	r4, [pc, #412]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002462:	6863      	ldr	r3, [r4, #4]
 8002464:	f013 0f0c 	tst.w	r3, #12
 8002468:	d007      	beq.n	800247a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800246a:	6863      	ldr	r3, [r4, #4]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d110      	bne.n	8002496 <HAL_RCC_OscConfig+0x10a>
 8002474:	6863      	ldr	r3, [r4, #4]
 8002476:	03da      	lsls	r2, r3, #15
 8002478:	d40d      	bmi.n	8002496 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	079b      	lsls	r3, r3, #30
 800247e:	d502      	bpl.n	8002486 <HAL_RCC_OscConfig+0xfa>
 8002480:	692b      	ldr	r3, [r5, #16]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d186      	bne.n	8002394 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	696a      	ldr	r2, [r5, #20]
 800248a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800248e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002492:	6023      	str	r3, [r4, #0]
 8002494:	e786      	b.n	80023a4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002496:	692a      	ldr	r2, [r5, #16]
 8002498:	4b5a      	ldr	r3, [pc, #360]	; (8002604 <HAL_RCC_OscConfig+0x278>)
 800249a:	b16a      	cbz	r2, 80024b8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024a0:	f7fe fdfe 	bl	80010a0 <HAL_GetTick>
 80024a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	079f      	lsls	r7, r3, #30
 80024aa:	d4ec      	bmi.n	8002486 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe fdf8 	bl	80010a0 <HAL_GetTick>
 80024b0:	1b80      	subs	r0, r0, r6
 80024b2:	2802      	cmp	r0, #2
 80024b4:	d9f7      	bls.n	80024a6 <HAL_RCC_OscConfig+0x11a>
 80024b6:	e7ab      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80024b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024ba:	f7fe fdf1 	bl	80010a0 <HAL_GetTick>
 80024be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	0798      	lsls	r0, r3, #30
 80024c4:	f57f af6e 	bpl.w	80023a4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe fdea 	bl	80010a0 <HAL_GetTick>
 80024cc:	1b80      	subs	r0, r0, r6
 80024ce:	2802      	cmp	r0, #2
 80024d0:	d9f6      	bls.n	80024c0 <HAL_RCC_OscConfig+0x134>
 80024d2:	e79d      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d4:	69aa      	ldr	r2, [r5, #24]
 80024d6:	4c4a      	ldr	r4, [pc, #296]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024d8:	4b4b      	ldr	r3, [pc, #300]	; (8002608 <HAL_RCC_OscConfig+0x27c>)
 80024da:	b1da      	cbz	r2, 8002514 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024e0:	f7fe fdde 	bl	80010a0 <HAL_GetTick>
 80024e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024e8:	079b      	lsls	r3, r3, #30
 80024ea:	d50d      	bpl.n	8002508 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80024f0:	4b46      	ldr	r3, [pc, #280]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024f8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80024fa:	bf00      	nop
  }
  while (Delay --);
 80024fc:	9b01      	ldr	r3, [sp, #4]
 80024fe:	1e5a      	subs	r2, r3, #1
 8002500:	9201      	str	r2, [sp, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f9      	bne.n	80024fa <HAL_RCC_OscConfig+0x16e>
 8002506:	e751      	b.n	80023ac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002508:	f7fe fdca 	bl	80010a0 <HAL_GetTick>
 800250c:	1b80      	subs	r0, r0, r6
 800250e:	2802      	cmp	r0, #2
 8002510:	d9e9      	bls.n	80024e6 <HAL_RCC_OscConfig+0x15a>
 8002512:	e77d      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002514:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002516:	f7fe fdc3 	bl	80010a0 <HAL_GetTick>
 800251a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800251e:	079f      	lsls	r7, r3, #30
 8002520:	f57f af44 	bpl.w	80023ac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002524:	f7fe fdbc 	bl	80010a0 <HAL_GetTick>
 8002528:	1b80      	subs	r0, r0, r6
 800252a:	2802      	cmp	r0, #2
 800252c:	d9f6      	bls.n	800251c <HAL_RCC_OscConfig+0x190>
 800252e:	e76f      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002530:	4c33      	ldr	r4, [pc, #204]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002532:	69e3      	ldr	r3, [r4, #28]
 8002534:	00d8      	lsls	r0, r3, #3
 8002536:	d424      	bmi.n	8002582 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8002538:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	69e3      	ldr	r3, [r4, #28]
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	61e3      	str	r3, [r4, #28]
 8002542:	69e3      	ldr	r3, [r4, #28]
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	4e30      	ldr	r6, [pc, #192]	; (8002610 <HAL_RCC_OscConfig+0x284>)
 800254e:	6833      	ldr	r3, [r6, #0]
 8002550:	05d9      	lsls	r1, r3, #23
 8002552:	d518      	bpl.n	8002586 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	68eb      	ldr	r3, [r5, #12]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d126      	bne.n	80025a8 <HAL_RCC_OscConfig+0x21c>
 800255a:	6a23      	ldr	r3, [r4, #32]
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002562:	f7fe fd9d 	bl	80010a0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800256a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	6a23      	ldr	r3, [r4, #32]
 800256e:	079b      	lsls	r3, r3, #30
 8002570:	d53f      	bpl.n	80025f2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8002572:	2f00      	cmp	r7, #0
 8002574:	f43f af1e 	beq.w	80023b4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	69e3      	ldr	r3, [r4, #28]
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257e:	61e3      	str	r3, [r4, #28]
 8002580:	e718      	b.n	80023b4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002582:	2700      	movs	r7, #0
 8002584:	e7e2      	b.n	800254c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	6833      	ldr	r3, [r6, #0]
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800258e:	f7fe fd87 	bl	80010a0 <HAL_GetTick>
 8002592:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	6833      	ldr	r3, [r6, #0]
 8002596:	05da      	lsls	r2, r3, #23
 8002598:	d4dc      	bmi.n	8002554 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe fd81 	bl	80010a0 <HAL_GetTick>
 800259e:	eba0 0008 	sub.w	r0, r0, r8
 80025a2:	2864      	cmp	r0, #100	; 0x64
 80025a4:	d9f6      	bls.n	8002594 <HAL_RCC_OscConfig+0x208>
 80025a6:	e733      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	b9ab      	cbnz	r3, 80025d6 <HAL_RCC_OscConfig+0x24a>
 80025aa:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	6223      	str	r3, [r4, #32]
 80025b6:	6a23      	ldr	r3, [r4, #32]
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80025be:	f7fe fd6f 	bl	80010a0 <HAL_GetTick>
 80025c2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	6a23      	ldr	r3, [r4, #32]
 80025c6:	0798      	lsls	r0, r3, #30
 80025c8:	d5d3      	bpl.n	8002572 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fd69 	bl	80010a0 <HAL_GetTick>
 80025ce:	1b80      	subs	r0, r0, r6
 80025d0:	4540      	cmp	r0, r8
 80025d2:	d9f7      	bls.n	80025c4 <HAL_RCC_OscConfig+0x238>
 80025d4:	e71c      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	6a23      	ldr	r3, [r4, #32]
 80025da:	d103      	bne.n	80025e4 <HAL_RCC_OscConfig+0x258>
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6223      	str	r3, [r4, #32]
 80025e2:	e7ba      	b.n	800255a <HAL_RCC_OscConfig+0x1ce>
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6223      	str	r3, [r4, #32]
 80025ea:	6a23      	ldr	r3, [r4, #32]
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	e7b6      	b.n	8002560 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe fd55 	bl	80010a0 <HAL_GetTick>
 80025f6:	eba0 0008 	sub.w	r0, r0, r8
 80025fa:	42b0      	cmp	r0, r6
 80025fc:	d9b6      	bls.n	800256c <HAL_RCC_OscConfig+0x1e0>
 80025fe:	e707      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
 8002600:	40021000 	.word	0x40021000
 8002604:	42420000 	.word	0x42420000
 8002608:	42420480 	.word	0x42420480
 800260c:	20000024 	.word	0x20000024
 8002610:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_OscConfig+0x334>)
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	461c      	mov	r4, r3
 800261a:	f002 020c 	and.w	r2, r2, #12
 800261e:	2a08      	cmp	r2, #8
 8002620:	d03d      	beq.n	800269e <HAL_RCC_OscConfig+0x312>
 8002622:	2300      	movs	r3, #0
 8002624:	4e27      	ldr	r6, [pc, #156]	; (80026c4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002626:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002628:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262a:	d12b      	bne.n	8002684 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800262c:	f7fe fd38 	bl	80010a0 <HAL_GetTick>
 8002630:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	0199      	lsls	r1, r3, #6
 8002636:	d41f      	bmi.n	8002678 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002638:	6a2b      	ldr	r3, [r5, #32]
 800263a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263e:	d105      	bne.n	800264c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002640:	6862      	ldr	r2, [r4, #4]
 8002642:	68a9      	ldr	r1, [r5, #8]
 8002644:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002648:	430a      	orrs	r2, r1
 800264a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800264e:	6862      	ldr	r2, [r4, #4]
 8002650:	430b      	orrs	r3, r1
 8002652:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002656:	4313      	orrs	r3, r2
 8002658:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800265a:	2301      	movs	r3, #1
 800265c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800265e:	f7fe fd1f 	bl	80010a0 <HAL_GetTick>
 8002662:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	019a      	lsls	r2, r3, #6
 8002668:	f53f aea8 	bmi.w	80023bc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe fd18 	bl	80010a0 <HAL_GetTick>
 8002670:	1b40      	subs	r0, r0, r5
 8002672:	2802      	cmp	r0, #2
 8002674:	d9f6      	bls.n	8002664 <HAL_RCC_OscConfig+0x2d8>
 8002676:	e6cb      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fd12 	bl	80010a0 <HAL_GetTick>
 800267c:	1bc0      	subs	r0, r0, r7
 800267e:	2802      	cmp	r0, #2
 8002680:	d9d7      	bls.n	8002632 <HAL_RCC_OscConfig+0x2a6>
 8002682:	e6c5      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002684:	f7fe fd0c 	bl	80010a0 <HAL_GetTick>
 8002688:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	019b      	lsls	r3, r3, #6
 800268e:	f57f ae95 	bpl.w	80023bc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe fd05 	bl	80010a0 <HAL_GetTick>
 8002696:	1b40      	subs	r0, r0, r5
 8002698:	2802      	cmp	r0, #2
 800269a:	d9f6      	bls.n	800268a <HAL_RCC_OscConfig+0x2fe>
 800269c:	e6b8      	b.n	8002410 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269e:	2801      	cmp	r0, #1
 80026a0:	f43f aeb7 	beq.w	8002412 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80026a4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	6a2b      	ldr	r3, [r5, #32]
 80026a8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f47f ae71 	bne.w	8002394 <HAL_RCC_OscConfig+0x8>
 80026b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80026b8:	1ac0      	subs	r0, r0, r3
 80026ba:	bf18      	it	ne
 80026bc:	2001      	movne	r0, #1
 80026be:	e6a8      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	42420060 	.word	0x42420060

080026c8 <HAL_RCC_GetSysClockFreq>:
{
 80026c8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80026cc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ce:	ac02      	add	r4, sp, #8
 80026d0:	f103 0510 	add.w	r5, r3, #16
 80026d4:	4622      	mov	r2, r4
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	3308      	adds	r3, #8
 80026dc:	c203      	stmia	r2!, {r0, r1}
 80026de:	42ab      	cmp	r3, r5
 80026e0:	4614      	mov	r4, r2
 80026e2:	d1f7      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026e4:	2301      	movs	r3, #1
 80026e6:	f88d 3004 	strb.w	r3, [sp, #4]
 80026ea:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80026ec:	4911      	ldr	r1, [pc, #68]	; (8002734 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026ee:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80026f2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80026f4:	f003 020c 	and.w	r2, r3, #12
 80026f8:	2a08      	cmp	r2, #8
 80026fa:	d117      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002700:	a806      	add	r0, sp, #24
 8002702:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002704:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002706:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800270a:	d50c      	bpl.n	8002726 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800270e:	480a      	ldr	r0, [pc, #40]	; (8002738 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002710:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002714:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002716:	aa06      	add	r2, sp, #24
 8002718:	4413      	add	r3, r2
 800271a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002722:	b007      	add	sp, #28
 8002724:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <HAL_RCC_GetSysClockFreq+0x74>)
 8002728:	4350      	muls	r0, r2
 800272a:	e7fa      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800272e:	e7f8      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x5a>
 8002730:	08004c74 	.word	0x08004c74
 8002734:	40021000 	.word	0x40021000
 8002738:	007a1200 	.word	0x007a1200
 800273c:	003d0900 	.word	0x003d0900

08002740 <HAL_RCC_ClockConfig>:
{
 8002740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002744:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002746:	4604      	mov	r4, r0
 8002748:	b910      	cbnz	r0, 8002750 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800274a:	2001      	movs	r0, #1
 800274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4a45      	ldr	r2, [pc, #276]	; (8002868 <HAL_RCC_ClockConfig+0x128>)
 8002752:	6813      	ldr	r3, [r2, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	428b      	cmp	r3, r1
 800275a:	d329      	bcc.n	80027b0 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	6821      	ldr	r1, [r4, #0]
 800275e:	078e      	lsls	r6, r1, #30
 8002760:	d431      	bmi.n	80027c6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	07ca      	lsls	r2, r1, #31
 8002764:	d444      	bmi.n	80027f0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002766:	4a40      	ldr	r2, [pc, #256]	; (8002868 <HAL_RCC_ClockConfig+0x128>)
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	429d      	cmp	r5, r3
 8002770:	d367      	bcc.n	8002842 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002772:	6822      	ldr	r2, [r4, #0]
 8002774:	4d3d      	ldr	r5, [pc, #244]	; (800286c <HAL_RCC_ClockConfig+0x12c>)
 8002776:	f012 0f04 	tst.w	r2, #4
 800277a:	d16e      	bne.n	800285a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	0713      	lsls	r3, r2, #28
 800277e:	d506      	bpl.n	800278e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002780:	686b      	ldr	r3, [r5, #4]
 8002782:	6922      	ldr	r2, [r4, #16]
 8002784:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002788:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800278c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278e:	f7ff ff9b 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002792:	686b      	ldr	r3, [r5, #4]
 8002794:	4a36      	ldr	r2, [pc, #216]	; (8002870 <HAL_RCC_ClockConfig+0x130>)
 8002796:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	40d8      	lsrs	r0, r3
 800279e:	4b35      	ldr	r3, [pc, #212]	; (8002874 <HAL_RCC_ClockConfig+0x134>)
 80027a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80027a2:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_ClockConfig+0x138>)
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	f7fe fc39 	bl	800101c <HAL_InitTick>
  return HAL_OK;
 80027aa:	2000      	movs	r0, #0
 80027ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b0:	6813      	ldr	r3, [r2, #0]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	430b      	orrs	r3, r1
 80027b8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4299      	cmp	r1, r3
 80027c2:	d1c2      	bne.n	800274a <HAL_RCC_ClockConfig+0xa>
 80027c4:	e7ca      	b.n	800275c <HAL_RCC_ClockConfig+0x1c>
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	bf1e      	ittt	ne
 80027ce:	685a      	ldrne	r2, [r3, #4]
 80027d0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80027d4:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	bf42      	ittt	mi
 80027da:	685a      	ldrmi	r2, [r3, #4]
 80027dc:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80027e0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68a0      	ldr	r0, [r4, #8]
 80027e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027ea:	4302      	orrs	r2, r0
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	e7b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f0:	6862      	ldr	r2, [r4, #4]
 80027f2:	4e1e      	ldr	r6, [pc, #120]	; (800286c <HAL_RCC_ClockConfig+0x12c>)
 80027f4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f8:	d11b      	bne.n	8002832 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	d0a4      	beq.n	800274a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002800:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002802:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	4313      	orrs	r3, r2
 800280c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800280e:	f7fe fc47 	bl	80010a0 <HAL_GetTick>
 8002812:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002814:	6873      	ldr	r3, [r6, #4]
 8002816:	6862      	ldr	r2, [r4, #4]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002820:	d0a1      	beq.n	8002766 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002822:	f7fe fc3d 	bl	80010a0 <HAL_GetTick>
 8002826:	1bc0      	subs	r0, r0, r7
 8002828:	4540      	cmp	r0, r8
 800282a:	d9f3      	bls.n	8002814 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800282c:	2003      	movs	r0, #3
}
 800282e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002832:	2a02      	cmp	r2, #2
 8002834:	d102      	bne.n	800283c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800283a:	e7e0      	b.n	80027fe <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	f013 0f02 	tst.w	r3, #2
 8002840:	e7dd      	b.n	80027fe <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	6813      	ldr	r3, [r2, #0]
 8002844:	f023 0307 	bic.w	r3, r3, #7
 8002848:	432b      	orrs	r3, r5
 800284a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	429d      	cmp	r5, r3
 8002854:	f47f af79 	bne.w	800274a <HAL_RCC_ClockConfig+0xa>
 8002858:	e78b      	b.n	8002772 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800285a:	686b      	ldr	r3, [r5, #4]
 800285c:	68e1      	ldr	r1, [r4, #12]
 800285e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002862:	430b      	orrs	r3, r1
 8002864:	606b      	str	r3, [r5, #4]
 8002866:	e789      	b.n	800277c <HAL_RCC_ClockConfig+0x3c>
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	08004cfc 	.word	0x08004cfc
 8002874:	20000024 	.word	0x20000024
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x14>)
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800288a:	6810      	ldr	r0, [r2, #0]
}
 800288c:	40d8      	lsrs	r0, r3
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	08004d0c 	.word	0x08004d0c
 8002898:	20000024 	.word	0x20000024

0800289c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	4a03      	ldr	r2, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028aa:	6810      	ldr	r0, [r2, #0]
}
 80028ac:	40d8      	lsrs	r0, r3
 80028ae:	4770      	bx	lr
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08004d0c 	.word	0x08004d0c
 80028b8:	20000024 	.word	0x20000024

080028bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028bc:	6803      	ldr	r3, [r0, #0]
{
 80028be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028c2:	07d9      	lsls	r1, r3, #31
{
 80028c4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028c6:	d520      	bpl.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c8:	4c35      	ldr	r4, [pc, #212]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80028ca:	69e3      	ldr	r3, [r4, #28]
 80028cc:	00da      	lsls	r2, r3, #3
 80028ce:	d432      	bmi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80028d0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	69e3      	ldr	r3, [r4, #28]
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	61e3      	str	r3, [r4, #28]
 80028da:	69e3      	ldr	r3, [r4, #28]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4e2f      	ldr	r6, [pc, #188]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028e6:	6833      	ldr	r3, [r6, #0]
 80028e8:	05db      	lsls	r3, r3, #23
 80028ea:	d526      	bpl.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ec:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028f2:	d136      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f4:	6a23      	ldr	r3, [r4, #32]
 80028f6:	686a      	ldr	r2, [r5, #4]
 80028f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fc:	4313      	orrs	r3, r2
 80028fe:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002900:	b11f      	cbz	r7, 800290a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	69e3      	ldr	r3, [r4, #28]
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002908:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800290a:	6828      	ldr	r0, [r5, #0]
 800290c:	0783      	lsls	r3, r0, #30
 800290e:	d506      	bpl.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002910:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002912:	68a9      	ldr	r1, [r5, #8]
 8002914:	6853      	ldr	r3, [r2, #4]
 8002916:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800291a:	430b      	orrs	r3, r1
 800291c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800291e:	f010 0010 	ands.w	r0, r0, #16
 8002922:	d01b      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002924:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002926:	68e9      	ldr	r1, [r5, #12]
 8002928:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800292a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800292c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002930:	430b      	orrs	r3, r1
 8002932:	6053      	str	r3, [r2, #4]
 8002934:	e012      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002936:	2700      	movs	r7, #0
 8002938:	e7d4      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293a:	6833      	ldr	r3, [r6, #0]
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002942:	f7fe fbad 	bl	80010a0 <HAL_GetTick>
 8002946:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	6833      	ldr	r3, [r6, #0]
 800294a:	05d8      	lsls	r0, r3, #23
 800294c:	d4ce      	bmi.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294e:	f7fe fba7 	bl	80010a0 <HAL_GetTick>
 8002952:	eba0 0008 	sub.w	r0, r0, r8
 8002956:	2864      	cmp	r0, #100	; 0x64
 8002958:	d9f6      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800295a:	2003      	movs	r0, #3
}
 800295c:	b002      	add	sp, #8
 800295e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002962:	686a      	ldr	r2, [r5, #4]
 8002964:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002968:	4293      	cmp	r3, r2
 800296a:	d0c3      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800296c:	2001      	movs	r0, #1
 800296e:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002970:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002972:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002974:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002976:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800297a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800297c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800297e:	07d9      	lsls	r1, r3, #31
 8002980:	d5b8      	bpl.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002982:	f7fe fb8d 	bl	80010a0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800298a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	6a23      	ldr	r3, [r4, #32]
 800298e:	079a      	lsls	r2, r3, #30
 8002990:	d4b0      	bmi.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe fb85 	bl	80010a0 <HAL_GetTick>
 8002996:	1b80      	subs	r0, r0, r6
 8002998:	4540      	cmp	r0, r8
 800299a:	d9f7      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800299c:	e7dd      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42420440 	.word	0x42420440

080029ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ac:	6a03      	ldr	r3, [r0, #32]
{
 80029ae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80029c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80029c6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80029ca:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029cc:	4d0a      	ldr	r5, [pc, #40]	; (80029f8 <TIM_OC1_SetConfig+0x4c>)
 80029ce:	42a8      	cmp	r0, r5
 80029d0:	d10b      	bne.n	80029ea <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80029d4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80029d8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029da:	698e      	ldr	r6, [r1, #24]
 80029dc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029de:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80029e2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80029e4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80029e8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029ee:	684a      	ldr	r2, [r1, #4]
 80029f0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f2:	6203      	str	r3, [r0, #32]
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
 80029f6:	bf00      	nop
 80029f8:	40012c00 	.word	0x40012c00

080029fc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029fc:	6a03      	ldr	r3, [r0, #32]
{
 80029fe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a04:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a0a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a0e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002a12:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a14:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002a16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a1a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a1e:	4d0b      	ldr	r5, [pc, #44]	; (8002a4c <TIM_OC3_SetConfig+0x50>)
 8002a20:	42a8      	cmp	r0, r5
 8002a22:	d10d      	bne.n	8002a40 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a24:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a2e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a30:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a32:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a36:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a3c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a40:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a42:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a44:	684a      	ldr	r2, [r1, #4]
 8002a46:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a48:	6203      	str	r3, [r0, #32]
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}
 8002a4c:	40012c00 	.word	0x40012c00

08002a50 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a50:	6a03      	ldr	r3, [r0, #32]
{
 8002a52:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a58:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a5c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a62:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a6a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002a6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a70:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a74:	4d06      	ldr	r5, [pc, #24]	; (8002a90 <TIM_OC4_SetConfig+0x40>)
 8002a76:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a78:	bf02      	ittt	eq
 8002a7a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a7c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a80:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a84:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a86:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a88:	684a      	ldr	r2, [r1, #4]
 8002a8a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a8c:	6203      	str	r3, [r0, #32]
 8002a8e:	bd30      	pop	{r4, r5, pc}
 8002a90:	40012c00 	.word	0x40012c00

08002a94 <HAL_TIM_PWM_MspInit>:
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIM_PeriodElapsedCallback>:
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIM_OC_DelayElapsedCallback>:
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIM_IC_CaptureCallback>:
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_PWM_PulseFinishedCallback>:
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_TriggerCallback>:
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa0:	6803      	ldr	r3, [r0, #0]
{
 8002aa2:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa4:	691a      	ldr	r2, [r3, #16]
{
 8002aa6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa8:	0791      	lsls	r1, r2, #30
 8002aaa:	d50e      	bpl.n	8002aca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	0792      	lsls	r2, r2, #30
 8002ab0:	d50b      	bpl.n	8002aca <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab2:	f06f 0202 	mvn.w	r2, #2
 8002ab6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ab8:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aba:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002abc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002abe:	079b      	lsls	r3, r3, #30
 8002ac0:	d077      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	f7ff ffea 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	0750      	lsls	r0, r2, #29
 8002ad0:	d510      	bpl.n	8002af4 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	0751      	lsls	r1, r2, #29
 8002ad6:	d50d      	bpl.n	8002af4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad8:	f06f 0204 	mvn.w	r2, #4
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ade:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aea:	d068      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002aec:	f7ff ffd5 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af0:	2300      	movs	r3, #0
 8002af2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	0712      	lsls	r2, r2, #28
 8002afa:	d50f      	bpl.n	8002b1c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	0710      	lsls	r0, r2, #28
 8002b00:	d50c      	bpl.n	8002b1c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b02:	f06f 0208 	mvn.w	r2, #8
 8002b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b08:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002b10:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b12:	d05a      	beq.n	8002bca <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b14:	f7ff ffc1 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	06d2      	lsls	r2, r2, #27
 8002b22:	d510      	bpl.n	8002b46 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	06d0      	lsls	r0, r2, #27
 8002b28:	d50d      	bpl.n	8002b46 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b2a:	f06f 0210 	mvn.w	r2, #16
 8002b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b30:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b32:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b34:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b36:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b3c:	d04b      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	f7ff ffac 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	2300      	movs	r3, #0
 8002b44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	07d1      	lsls	r1, r2, #31
 8002b4c:	d508      	bpl.n	8002b60 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	07d2      	lsls	r2, r2, #31
 8002b52:	d505      	bpl.n	8002b60 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b54:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5c:	f7ff ff9b 	bl	8002a96 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	0610      	lsls	r0, r2, #24
 8002b66:	d508      	bpl.n	8002b7a <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	0611      	lsls	r1, r2, #24
 8002b6c:	d505      	bpl.n	8002b7a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002b72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b74:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b76:	f000 fa16 	bl	8002fa6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	0652      	lsls	r2, r2, #25
 8002b80:	d508      	bpl.n	8002b94 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	0650      	lsls	r0, r2, #25
 8002b86:	d505      	bpl.n	8002b94 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b88:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002b8c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b90:	f7ff ff85 	bl	8002a9e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	0691      	lsls	r1, r2, #26
 8002b9a:	d522      	bpl.n	8002be2 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	0692      	lsls	r2, r2, #26
 8002ba0:	d51f      	bpl.n	8002be2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ba2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002ba6:	4620      	mov	r0, r4
}
 8002ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002bae:	f000 b9f9 	b.w	8002fa4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	f7ff ff71 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f7ff ff70 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
 8002bbc:	e783      	b.n	8002ac6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	f7ff ff6b 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff ff6a 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
 8002bc8:	e792      	b.n	8002af0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bca:	f7ff ff65 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff ff64 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
 8002bd4:	e7a0      	b.n	8002b18 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	f7ff ff5f 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f7ff ff5e 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
 8002be0:	e7af      	b.n	8002b42 <HAL_TIM_IRQHandler+0xa2>
 8002be2:	bd10      	pop	{r4, pc}

08002be4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002be6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be8:	4290      	cmp	r0, r2
 8002bea:	d00a      	beq.n	8002c02 <TIM_Base_SetConfig+0x1e>
 8002bec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x1e>
 8002bf2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002bf6:	4290      	cmp	r0, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x1e>
 8002bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bfe:	4290      	cmp	r0, r2
 8002c00:	d115      	bne.n	8002c2e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002c02:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c08:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <TIM_Base_SetConfig+0x6c>)
 8002c0c:	4290      	cmp	r0, r2
 8002c0e:	d00a      	beq.n	8002c26 <TIM_Base_SetConfig+0x42>
 8002c10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c14:	d007      	beq.n	8002c26 <TIM_Base_SetConfig+0x42>
 8002c16:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c1a:	4290      	cmp	r0, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_Base_SetConfig+0x42>
 8002c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c22:	4290      	cmp	r0, r2
 8002c24:	d103      	bne.n	8002c2e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c26:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c2e:	694a      	ldr	r2, [r1, #20]
 8002c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c34:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002c36:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c38:	688b      	ldr	r3, [r1, #8]
 8002c3a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c3c:	680b      	ldr	r3, [r1, #0]
 8002c3e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <TIM_Base_SetConfig+0x6c>)
 8002c42:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002c44:	bf04      	itt	eq
 8002c46:	690b      	ldreq	r3, [r1, #16]
 8002c48:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	6143      	str	r3, [r0, #20]
 8002c4e:	4770      	bx	lr
 8002c50:	40012c00 	.word	0x40012c00

08002c54 <HAL_TIM_Base_Init>:
{
 8002c54:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002c56:	4604      	mov	r4, r0
 8002c58:	b1a0      	cbz	r0, 8002c84 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c62:	b91b      	cbnz	r3, 8002c6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002c64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c68:	f001 fbaa 	bl	80043c0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c6e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c74:	1d21      	adds	r1, r4, #4
 8002c76:	f7ff ffb5 	bl	8002be4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c7a:	2301      	movs	r3, #1
  return HAL_OK;
 8002c7c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c84:	2001      	movs	r0, #1
}
 8002c86:	bd10      	pop	{r4, pc}

08002c88 <HAL_TIM_PWM_Init>:
{
 8002c88:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	b1a0      	cbz	r0, 8002cb8 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c96:	b91b      	cbnz	r3, 8002ca0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002c98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002c9c:	f7ff fefa 	bl	8002a94 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	1d21      	adds	r1, r4, #4
 8002caa:	f7ff ff9b 	bl	8002be4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002cae:	2301      	movs	r3, #1
  return HAL_OK;
 8002cb0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002cb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cb8:	2001      	movs	r0, #1
}
 8002cba:	bd10      	pop	{r4, pc}

08002cbc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cbc:	6a03      	ldr	r3, [r0, #32]
{
 8002cbe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc0:	f023 0310 	bic.w	r3, r3, #16
 8002cc4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002cc6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002cc8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002cca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ccc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cd6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002cd8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cdc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ce0:	4d0b      	ldr	r5, [pc, #44]	; (8002d10 <TIM_OC2_SetConfig+0x54>)
 8002ce2:	42a8      	cmp	r0, r5
 8002ce4:	d10d      	bne.n	8002d02 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ce6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cf0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cf2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cf4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cf8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cfe:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002d02:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d04:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d06:	684a      	ldr	r2, [r1, #4]
 8002d08:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002d0a:	6203      	str	r3, [r0, #32]
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00

08002d14 <HAL_TIM_PWM_ConfigChannel>:
{
 8002d14:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002d16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d1a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f04f 0002 	mov.w	r0, #2
 8002d22:	d025      	beq.n	8002d70 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002d24:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002d26:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002d2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002d2e:	2a0c      	cmp	r2, #12
 8002d30:	d818      	bhi.n	8002d64 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002d32:	e8df f002 	tbb	[pc, r2]
 8002d36:	1707      	.short	0x1707
 8002d38:	171e1717 	.word	0x171e1717
 8002d3c:	172f1717 	.word	0x172f1717
 8002d40:	1717      	.short	0x1717
 8002d42:	40          	.byte	0x40
 8002d43:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d44:	6820      	ldr	r0, [r4, #0]
 8002d46:	f7ff fe31 	bl	80029ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d4a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d4c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	f042 0208 	orr.w	r2, r2, #8
 8002d54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	f022 0204 	bic.w	r2, r2, #4
 8002d5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d62:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002d66:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002d6c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002d70:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d72:	6820      	ldr	r0, [r4, #0]
 8002d74:	f7ff ffa2 	bl	8002cbc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d78:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d7a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d92:	e7e6      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d94:	6820      	ldr	r0, [r4, #0]
 8002d96:	f7ff fe31 	bl	80029fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d9a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d9c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	f042 0208 	orr.w	r2, r2, #8
 8002da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	f022 0204 	bic.w	r2, r2, #4
 8002dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db2:	61da      	str	r2, [r3, #28]
      break;
 8002db4:	e7d6      	b.n	8002d64 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	f7ff fe4a 	bl	8002a50 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dbc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dbe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dd6:	e7ec      	b.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dd8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dda:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ddc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dde:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002de6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de8:	6083      	str	r3, [r0, #8]
 8002dea:	bd10      	pop	{r4, pc}

08002dec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002dec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002df0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002df2:	2b01      	cmp	r3, #1
{
 8002df4:	4604      	mov	r4, r0
 8002df6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002dfa:	d019      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0x44>
 8002dfc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002e02:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002e04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002e12:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002e14:	680b      	ldr	r3, [r1, #0]
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	d065      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0xfa>
 8002e1a:	d815      	bhi.n	8002e48 <HAL_TIM_ConfigClockSource+0x5c>
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d00c      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x4e>
 8002e20:	d807      	bhi.n	8002e32 <HAL_TIM_ConfigClockSource+0x46>
 8002e22:	b153      	cbz	r3, 8002e3a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002e26:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002e2c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d001      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x4e>
 8002e36:	2b30      	cmp	r3, #48	; 0x30
 8002e38:	d1f4      	bne.n	8002e24 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002e3a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e3c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e44:	4313      	orrs	r3, r2
 8002e46:	e01a      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002e48:	2b60      	cmp	r3, #96	; 0x60
 8002e4a:	d034      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0xca>
 8002e4c:	d819      	bhi.n	8002e82 <HAL_TIM_ConfigClockSource+0x96>
 8002e4e:	2b50      	cmp	r3, #80	; 0x50
 8002e50:	d1e8      	bne.n	8002e24 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	684a      	ldr	r2, [r1, #4]
 8002e54:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002e56:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e58:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e5e:	f025 0501 	bic.w	r5, r5, #1
 8002e62:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e64:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002e66:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e6c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002e70:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e72:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002e74:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e7a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002e7e:	6083      	str	r3, [r0, #8]
 8002e80:	e7d0      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002e82:	2b70      	cmp	r3, #112	; 0x70
 8002e84:	d00c      	beq.n	8002ea0 <HAL_TIM_ConfigClockSource+0xb4>
 8002e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8a:	d1cb      	bne.n	8002e24 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002e8c:	68cb      	ldr	r3, [r1, #12]
 8002e8e:	684a      	ldr	r2, [r1, #4]
 8002e90:	6889      	ldr	r1, [r1, #8]
 8002e92:	f7ff ffa1 	bl	8002dd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e96:	6822      	ldr	r2, [r4, #0]
 8002e98:	6893      	ldr	r3, [r2, #8]
 8002e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9e:	e008      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002ea0:	68cb      	ldr	r3, [r1, #12]
 8002ea2:	684a      	ldr	r2, [r1, #4]
 8002ea4:	6889      	ldr	r1, [r1, #8]
 8002ea6:	f7ff ff97 	bl	8002dd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb2:	6093      	str	r3, [r2, #8]
      break;
 8002eb4:	e7b6      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb6:	684d      	ldr	r5, [r1, #4]
 8002eb8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eba:	6a01      	ldr	r1, [r0, #32]
 8002ebc:	f021 0110 	bic.w	r1, r1, #16
 8002ec0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002ec4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ece:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ed2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002ed6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ed8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002eda:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002ee4:	e7cb      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee6:	684a      	ldr	r2, [r1, #4]
 8002ee8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002eea:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eec:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eee:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef2:	f025 0501 	bic.w	r5, r5, #1
 8002ef6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002efa:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f00:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002f04:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f06:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f08:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f0e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002f12:	e7b4      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x92>

08002f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f14:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f16:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f18:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f1a:	f001 011f 	and.w	r1, r1, #31
 8002f1e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002f20:	ea23 0304 	bic.w	r3, r3, r4
 8002f24:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f26:	6a03      	ldr	r3, [r0, #32]
 8002f28:	408a      	lsls	r2, r1
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	6202      	str	r2, [r0, #32]
 8002f2e:	bd10      	pop	{r4, pc}

08002f30 <HAL_TIM_PWM_Start>:
{
 8002f30:	b510      	push	{r4, lr}
 8002f32:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f34:	2201      	movs	r2, #1
 8002f36:	6800      	ldr	r0, [r0, #0]
 8002f38:	f7ff ffec 	bl	8002f14 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_TIM_PWM_Start+0x34>)
}
 8002f40:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f42:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8002f44:	bf02      	ittt	eq
 8002f46:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002f48:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002f4c:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002f56:	bf1e      	ittt	ne
 8002f58:	681a      	ldrne	r2, [r3, #0]
 8002f5a:	f042 0201 	orrne.w	r2, r2, #1
 8002f5e:	601a      	strne	r2, [r3, #0]
}
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00

08002f68 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002f6c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	f04f 0302 	mov.w	r3, #2
 8002f74:	d014      	beq.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f76:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002f7c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f7e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f80:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f82:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f8c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f8e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f90:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f92:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002fa0:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002fa2:	bd30      	pop	{r4, r5, pc}

08002fa4 <HAL_TIMEx_CommutCallback>:
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fa6:	4770      	bx	lr

08002fa8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa8:	6803      	ldr	r3, [r0, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fb0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002fc0:	4770      	bx	lr
	...

08002fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc4:	b538      	push	{r3, r4, r5, lr}
 8002fc6:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc8:	6803      	ldr	r3, [r0, #0]
 8002fca:	68c1      	ldr	r1, [r0, #12]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	2419      	movs	r4, #25
 8002fd0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fd8:	6882      	ldr	r2, [r0, #8]
 8002fda:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002fdc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fde:	4302      	orrs	r2, r0
 8002fe0:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002fe2:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002fe6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fea:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	69a9      	ldr	r1, [r5, #24]
 8002ff4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <UART_SetConfig+0x70>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d114      	bne.n	800302c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003002:	f7ff fc4b 	bl	800289c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003006:	4360      	muls	r0, r4
 8003008:	686c      	ldr	r4, [r5, #4]
 800300a:	2264      	movs	r2, #100	; 0x64
 800300c:	00a4      	lsls	r4, r4, #2
 800300e:	fbb0 f0f4 	udiv	r0, r0, r4
 8003012:	fbb0 f4f2 	udiv	r4, r0, r2
 8003016:	fb02 0314 	mls	r3, r2, r4, r0
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	3332      	adds	r3, #50	; 0x32
 800301e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003022:	6829      	ldr	r1, [r5, #0]
 8003024:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003028:	608b      	str	r3, [r1, #8]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800302c:	f7ff fc26 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003030:	e7e9      	b.n	8003006 <UART_SetConfig+0x42>
 8003032:	bf00      	nop
 8003034:	40013800 	.word	0x40013800

08003038 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	4604      	mov	r4, r0
 800303c:	460e      	mov	r6, r1
 800303e:	4617      	mov	r7, r2
 8003040:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003042:	6821      	ldr	r1, [r4, #0]
 8003044:	680b      	ldr	r3, [r1, #0]
 8003046:	ea36 0303 	bics.w	r3, r6, r3
 800304a:	d101      	bne.n	8003050 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800304c:	2000      	movs	r0, #0
}
 800304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003050:	1c6b      	adds	r3, r5, #1
 8003052:	d0f7      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003054:	b995      	cbnz	r5, 800307c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003056:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003058:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003060:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800306a:	2320      	movs	r3, #32
 800306c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003070:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003074:	2300      	movs	r3, #0
 8003076:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800307c:	f7fe f810 	bl	80010a0 <HAL_GetTick>
 8003080:	1bc0      	subs	r0, r0, r7
 8003082:	4285      	cmp	r5, r0
 8003084:	d2dd      	bcs.n	8003042 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003086:	e7e6      	b.n	8003056 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003088 <HAL_UART_Init>:
{
 8003088:	b510      	push	{r4, lr}
  if (huart == NULL)
 800308a:	4604      	mov	r4, r0
 800308c:	b340      	cbz	r0, 80030e0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800308e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003092:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003096:	b91b      	cbnz	r3, 80030a0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003098:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800309c:	f001 fa58 	bl	8004550 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80030a0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80030a2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80030a8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80030aa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80030ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80030b2:	f7ff ff87 	bl	8002fc4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80030d2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030da:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80030de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030e0:	2001      	movs	r0, #1
}
 80030e2:	bd10      	pop	{r4, pc}

080030e4 <HAL_UART_Transmit>:
{
 80030e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80030ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80030ee:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80030f0:	2b20      	cmp	r3, #32
{
 80030f2:	460d      	mov	r5, r1
 80030f4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80030f6:	d14e      	bne.n	8003196 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d049      	beq.n	8003190 <HAL_UART_Transmit+0xac>
 80030fc:	2a00      	cmp	r2, #0
 80030fe:	d047      	beq.n	8003190 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003100:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003104:	2b01      	cmp	r3, #1
 8003106:	d046      	beq.n	8003196 <HAL_UART_Transmit+0xb2>
 8003108:	2301      	movs	r3, #1
 800310a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	2300      	movs	r3, #0
 8003110:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003112:	2321      	movs	r3, #33	; 0x21
 8003114:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003118:	f7fd ffc2 	bl	80010a0 <HAL_GetTick>
 800311c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800311e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003122:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003126:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003128:	b29b      	uxth	r3, r3
 800312a:	b96b      	cbnz	r3, 8003148 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800312c:	463b      	mov	r3, r7
 800312e:	4632      	mov	r2, r6
 8003130:	2140      	movs	r1, #64	; 0x40
 8003132:	4620      	mov	r0, r4
 8003134:	f7ff ff80 	bl	8003038 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003138:	b9a8      	cbnz	r0, 8003166 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800313a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800313c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003140:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003148:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800314c:	3b01      	subs	r3, #1
 800314e:	b29b      	uxth	r3, r3
 8003150:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003152:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003154:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315a:	4620      	mov	r0, r4
 800315c:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800315e:	d10e      	bne.n	800317e <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003160:	f7ff ff6a 	bl	8003038 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003164:	b110      	cbz	r0, 800316c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8003166:	2003      	movs	r0, #3
 8003168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800316c:	882b      	ldrh	r3, [r5, #0]
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003176:	6923      	ldr	r3, [r4, #16]
 8003178:	b943      	cbnz	r3, 800318c <HAL_UART_Transmit+0xa8>
          pData += 2U;
 800317a:	3502      	adds	r5, #2
 800317c:	e7d3      	b.n	8003126 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	f7ff ff5b 	bl	8003038 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003182:	2800      	cmp	r0, #0
 8003184:	d1ef      	bne.n	8003166 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	782a      	ldrb	r2, [r5, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	3501      	adds	r5, #1
 800318e:	e7ca      	b.n	8003126 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003190:	2001      	movs	r0, #1
 8003192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003196:	2002      	movs	r0, #2
}
 8003198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800319c <HAL_UART_Receive>:
{
 800319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a0:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80031a6:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a8:	2b20      	cmp	r3, #32
{
 80031aa:	460d      	mov	r5, r1
 80031ac:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ae:	d151      	bne.n	8003254 <HAL_UART_Receive+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80031b0:	2900      	cmp	r1, #0
 80031b2:	d04c      	beq.n	800324e <HAL_UART_Receive+0xb2>
 80031b4:	2a00      	cmp	r2, #0
 80031b6:	d04a      	beq.n	800324e <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 80031b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d049      	beq.n	8003254 <HAL_UART_Receive+0xb8>
 80031c0:	2301      	movs	r3, #1
 80031c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ca:	2322      	movs	r3, #34	; 0x22
 80031cc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80031d0:	f7fd ff66 	bl	80010a0 <HAL_GetTick>
 80031d4:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 80031d6:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80031da:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80031de:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80031e0:	b280      	uxth	r0, r0
 80031e2:	b930      	cbnz	r0, 80031f2 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 80031e4:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80031e6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 80031ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 80031ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 80031f2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031f4:	4632      	mov	r2, r6
      huart->RxXferCount--;
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031fc:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031fe:	2120      	movs	r1, #32
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003204:	4620      	mov	r0, r4
 8003206:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003208:	d112      	bne.n	8003230 <HAL_UART_Receive+0x94>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	f7ff ff15 	bl	8003038 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800320e:	b110      	cbz	r0, 8003216 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8003210:	2003      	movs	r0, #3
 8003212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003216:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003218:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800321a:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800321c:	b922      	cbnz	r2, 8003228 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003222:	f825 3b02 	strh.w	r3, [r5], #2
 8003226:	e7da      	b.n	80031de <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f825 3b01 	strh.w	r3, [r5], #1
 800322e:	e7d6      	b.n	80031de <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003230:	f7ff ff02 	bl	8003038 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003234:	2800      	cmp	r0, #0
 8003236:	d1eb      	bne.n	8003210 <HAL_UART_Receive+0x74>
 8003238:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800323a:	6921      	ldr	r1, [r4, #16]
 800323c:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800323e:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003240:	b911      	cbnz	r1, 8003248 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003242:	702b      	strb	r3, [r5, #0]
 8003244:	4615      	mov	r5, r2
 8003246:	e7ca      	b.n	80031de <HAL_UART_Receive+0x42>
 8003248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324c:	e7f9      	b.n	8003242 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 800324e:	2001      	movs	r0, #1
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003254:	2002      	movs	r0, #2
}
 8003256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800325a <HAL_UART_TxCpltCallback>:
 800325a:	4770      	bx	lr

0800325c <HAL_UART_RxCpltCallback>:
 800325c:	4770      	bx	lr

0800325e <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800325e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003262:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003264:	2b22      	cmp	r3, #34	; 0x22
 8003266:	d136      	bne.n	80032d6 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003268:	6883      	ldr	r3, [r0, #8]
 800326a:	6901      	ldr	r1, [r0, #16]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003270:	6802      	ldr	r2, [r0, #0]
 8003272:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003274:	d123      	bne.n	80032be <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003276:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003278:	b9e9      	cbnz	r1, 80032b6 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800327a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800327e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003282:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003284:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003286:	3c01      	subs	r4, #1
 8003288:	b2a4      	uxth	r4, r4
 800328a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800328c:	b98c      	cbnz	r4, 80032b2 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800328e:	6803      	ldr	r3, [r0, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	f022 0220 	bic.w	r2, r2, #32
 8003296:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800329e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80032a8:	2320      	movs	r3, #32
 80032aa:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80032ae:	f7ff ffd5 	bl	800325c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80032b2:	2000      	movs	r0, #0
}
 80032b4:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	f823 2b01 	strh.w	r2, [r3], #1
 80032bc:	e7e1      	b.n	8003282 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032be:	b921      	cbnz	r1, 80032ca <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032c0:	1c59      	adds	r1, r3, #1
 80032c2:	6852      	ldr	r2, [r2, #4]
 80032c4:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e7dc      	b.n	8003284 <UART_Receive_IT+0x26>
 80032ca:	6852      	ldr	r2, [r2, #4]
 80032cc:	1c59      	adds	r1, r3, #1
 80032ce:	6281      	str	r1, [r0, #40]	; 0x28
 80032d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032d4:	e7f7      	b.n	80032c6 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80032d6:	2002      	movs	r0, #2
 80032d8:	bd10      	pop	{r4, pc}

080032da <HAL_UART_ErrorCallback>:
 80032da:	4770      	bx	lr

080032dc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032dc:	6803      	ldr	r3, [r0, #0]
{
 80032de:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032e0:	681a      	ldr	r2, [r3, #0]
{
 80032e2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80032e4:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032e6:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032e8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80032ea:	d107      	bne.n	80032fc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ec:	0696      	lsls	r6, r2, #26
 80032ee:	d55a      	bpl.n	80033a6 <HAL_UART_IRQHandler+0xca>
 80032f0:	068d      	lsls	r5, r1, #26
 80032f2:	d558      	bpl.n	80033a6 <HAL_UART_IRQHandler+0xca>
}
 80032f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80032f8:	f7ff bfb1 	b.w	800325e <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032fc:	f015 0501 	ands.w	r5, r5, #1
 8003300:	d102      	bne.n	8003308 <HAL_UART_IRQHandler+0x2c>
 8003302:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003306:	d04e      	beq.n	80033a6 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003308:	07d3      	lsls	r3, r2, #31
 800330a:	d505      	bpl.n	8003318 <HAL_UART_IRQHandler+0x3c>
 800330c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800330e:	bf42      	ittt	mi
 8003310:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003312:	f043 0301 	orrmi.w	r3, r3, #1
 8003316:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003318:	0750      	lsls	r0, r2, #29
 800331a:	d504      	bpl.n	8003326 <HAL_UART_IRQHandler+0x4a>
 800331c:	b11d      	cbz	r5, 8003326 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800331e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003326:	0793      	lsls	r3, r2, #30
 8003328:	d504      	bpl.n	8003334 <HAL_UART_IRQHandler+0x58>
 800332a:	b11d      	cbz	r5, 8003334 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800332c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003334:	0716      	lsls	r6, r2, #28
 8003336:	d504      	bpl.n	8003342 <HAL_UART_IRQHandler+0x66>
 8003338:	b11d      	cbz	r5, 8003342 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800333a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003342:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d066      	beq.n	8003416 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003348:	0695      	lsls	r5, r2, #26
 800334a:	d504      	bpl.n	8003356 <HAL_UART_IRQHandler+0x7a>
 800334c:	0688      	lsls	r0, r1, #26
 800334e:	d502      	bpl.n	8003356 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003350:	4620      	mov	r0, r4
 8003352:	f7ff ff84 	bl	800325e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003356:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003358:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800335a:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800335c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800335e:	0711      	lsls	r1, r2, #28
 8003360:	d402      	bmi.n	8003368 <HAL_UART_IRQHandler+0x8c>
 8003362:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003366:	d01a      	beq.n	800339e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003368:	f7ff fe1e 	bl	8002fa8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	0652      	lsls	r2, r2, #25
 8003372:	d510      	bpl.n	8003396 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003374:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003376:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800337e:	b150      	cbz	r0, 8003396 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_UART_IRQHandler+0x13c>)
 8003382:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003384:	f7fe f9a4 	bl	80016d0 <HAL_DMA_Abort_IT>
 8003388:	2800      	cmp	r0, #0
 800338a:	d044      	beq.n	8003416 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800338c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800338e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003392:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003394:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003396:	4620      	mov	r0, r4
 8003398:	f7ff ff9f 	bl	80032da <HAL_UART_ErrorCallback>
 800339c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800339e:	f7ff ff9c 	bl	80032da <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033a6:	0616      	lsls	r6, r2, #24
 80033a8:	d527      	bpl.n	80033fa <HAL_UART_IRQHandler+0x11e>
 80033aa:	060d      	lsls	r5, r1, #24
 80033ac:	d525      	bpl.n	80033fa <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033ae:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80033b2:	2a21      	cmp	r2, #33	; 0x21
 80033b4:	d12f      	bne.n	8003416 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033b6:	68a2      	ldr	r2, [r4, #8]
 80033b8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80033bc:	6a22      	ldr	r2, [r4, #32]
 80033be:	d117      	bne.n	80033f0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033c0:	8811      	ldrh	r1, [r2, #0]
 80033c2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80033c6:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033c8:	6921      	ldr	r1, [r4, #16]
 80033ca:	b979      	cbnz	r1, 80033ec <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80033cc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80033ce:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80033d0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80033d2:	3a01      	subs	r2, #1
 80033d4:	b292      	uxth	r2, r2
 80033d6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80033d8:	b9ea      	cbnz	r2, 8003416 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80033ec:	3201      	adds	r2, #1
 80033ee:	e7ee      	b.n	80033ce <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033f0:	1c51      	adds	r1, r2, #1
 80033f2:	6221      	str	r1, [r4, #32]
 80033f4:	7812      	ldrb	r2, [r2, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	e7ea      	b.n	80033d0 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033fa:	0650      	lsls	r0, r2, #25
 80033fc:	d50b      	bpl.n	8003416 <HAL_UART_IRQHandler+0x13a>
 80033fe:	064a      	lsls	r2, r1, #25
 8003400:	d509      	bpl.n	8003416 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003402:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003404:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800340c:	2320      	movs	r3, #32
 800340e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003412:	f7ff ff22 	bl	800325a <HAL_UART_TxCpltCallback>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	0800341d 	.word	0x0800341d

0800341c <UART_DMAAbortOnError>:
{
 800341c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800341e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003420:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003422:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003424:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003426:	f7ff ff58 	bl	80032da <HAL_UART_ErrorCallback>
 800342a:	bd08      	pop	{r3, pc}

0800342c <clear_uart_buffer>:
#include "string.h"
#include "stdlib.h"
#include "math.h"

void clear_uart_buffer(uint8_t len, uint8_t buffer[len])
{
 800342c:	b510      	push	{r4, lr}
	for(uint8_t i=0; i<len; i++){
 800342e:	460a      	mov	r2, r1
		buffer[i]='\0';
 8003430:	2400      	movs	r4, #0
	for(uint8_t i=0; i<len; i++){
 8003432:	1a53      	subs	r3, r2, r1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	4298      	cmp	r0, r3
 8003438:	d800      	bhi.n	800343c <clear_uart_buffer+0x10>
	}
}
 800343a:	bd10      	pop	{r4, pc}
		buffer[i]='\0';
 800343c:	f802 4b01 	strb.w	r4, [r2], #1
 8003440:	e7f7      	b.n	8003432 <clear_uart_buffer+0x6>

08003442 <UART_Transmit_string>:
	HAL_Delay(10);
}

void UART_Transmit_string(UART_HandleTypeDef *huart,
		                    char *pData, uint32_t Timeout)
{
 8003442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003444:	4605      	mov	r5, r0
 8003446:	4616      	mov	r6, r2
 8003448:	1e4c      	subs	r4, r1, #1
	uint8_t data;
	while(*pData != '\0')
 800344a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800344e:	b90b      	cbnz	r3, 8003454 <UART_Transmit_string+0x12>

	    data=(uint8_t)(*pData);
		HAL_UART_Transmit(huart, &data, 1, Timeout);
	    pData++;
	}
}
 8003450:	b002      	add	sp, #8
 8003452:	bd70      	pop	{r4, r5, r6, pc}
	    data=(uint8_t)(*pData);
 8003454:	f88d 3007 	strb.w	r3, [sp, #7]
		HAL_UART_Transmit(huart, &data, 1, Timeout);
 8003458:	2201      	movs	r2, #1
 800345a:	4633      	mov	r3, r6
 800345c:	f10d 0107 	add.w	r1, sp, #7
 8003460:	4628      	mov	r0, r5
 8003462:	f7ff fe3f 	bl	80030e4 <HAL_UART_Transmit>
 8003466:	e7f0      	b.n	800344a <UART_Transmit_string+0x8>

08003468 <UART_Transmit_string_CR_LF>:


void UART_Transmit_string_CR_LF(UART_HandleTypeDef *huart,
		                    char *pData, uint32_t Timeout)
{
	uint8_t end_code  = 13; //ASCII '\r'
 8003468:	230d      	movs	r3, #13
{
 800346a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800346c:	4615      	mov	r5, r2
 800346e:	4604      	mov	r4, r0
	uint8_t end_code  = 13; //ASCII '\r'
 8003470:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t enter_code  = 10; //ASCII '\r'
 8003474:	230a      	movs	r3, #10
 8003476:	f88d 3007 	strb.w	r3, [sp, #7]

	UART_Transmit_string(huart, pData, Timeout);
 800347a:	f7ff ffe2 	bl	8003442 <UART_Transmit_string>

	HAL_UART_Transmit(huart, &end_code, 1, Timeout);
 800347e:	462b      	mov	r3, r5
 8003480:	f10d 0106 	add.w	r1, sp, #6
 8003484:	2201      	movs	r2, #1
 8003486:	4620      	mov	r0, r4
 8003488:	f7ff fe2c 	bl	80030e4 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, &enter_code, 1, Timeout);
 800348c:	462b      	mov	r3, r5
 800348e:	2201      	movs	r2, #1
 8003490:	f10d 0107 	add.w	r1, sp, #7
 8003494:	4620      	mov	r0, r4
 8003496:	f7ff fe25 	bl	80030e4 <HAL_UART_Transmit>
}
 800349a:	b003      	add	sp, #12
 800349c:	bd30      	pop	{r4, r5, pc}
	...

080034a0 <UART_send_float>:

void UART_send_float(UART_HandleTypeDef *huart, float number, uint32_t Timeout)
{
 80034a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	char* point = ".";
	char temp[100] = "";
 80034a2:	2600      	movs	r6, #0
{
 80034a4:	b09d      	sub	sp, #116	; 0x74
 80034a6:	4604      	mov	r4, r0
 80034a8:	4615      	mov	r5, r2
 80034aa:	460f      	mov	r7, r1
	char temp[100] = "";
 80034ac:	2260      	movs	r2, #96	; 0x60
 80034ae:	4631      	mov	r1, r6
 80034b0:	a804      	add	r0, sp, #16
 80034b2:	9603      	str	r6, [sp, #12]
 80034b4:	f001 f8fa 	bl	80046ac <memset>
	volatile int n = 0;

    volatile float reminder, quotient = 0.0;
 80034b8:	2300      	movs	r3, #0

	quotient = (int)(number);
 80034ba:	4638      	mov	r0, r7
	volatile int n = 0;
 80034bc:	9600      	str	r6, [sp, #0]
    volatile float reminder, quotient = 0.0;
 80034be:	9302      	str	r3, [sp, #8]
	quotient = (int)(number);
 80034c0:	f7fd fd66 	bl	8000f90 <__aeabi_f2iz>
 80034c4:	f7fd fb4a 	bl	8000b5c <__aeabi_i2f>
 80034c8:	9002      	str	r0, [sp, #8]
	n = quotient;
 80034ca:	9802      	ldr	r0, [sp, #8]
 80034cc:	f7fd fd60 	bl	8000f90 <__aeabi_f2iz>
 80034d0:	9000      	str	r0, [sp, #0]

	itoa(n, temp, 10);
 80034d2:	a903      	add	r1, sp, #12
 80034d4:	9800      	ldr	r0, [sp, #0]
 80034d6:	220a      	movs	r2, #10
 80034d8:	f001 f8e6 	bl	80046a8 <itoa>

	UART_Transmit_string(huart, temp, Timeout);
 80034dc:	462a      	mov	r2, r5
 80034de:	a903      	add	r1, sp, #12
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff ffae 	bl	8003442 <UART_Transmit_string>
//	HAL_UART_Transmit(huart, temp, strlen(temp), Timeout);
//	HAL_Delay(10);

//	HAL_UART_Transmit(huart, point, 1, Timeout);
//	HAL_Delay(10);
	UART_Transmit_string(huart, point, Timeout);
 80034e6:	462a      	mov	r2, r5
 80034e8:	4620      	mov	r0, r4
 80034ea:	4911      	ldr	r1, [pc, #68]	; (8003530 <UART_send_float+0x90>)
 80034ec:	f7ff ffa9 	bl	8003442 <UART_Transmit_string>

	reminder = fabs(number - quotient);
 80034f0:	9902      	ldr	r1, [sp, #8]
 80034f2:	4638      	mov	r0, r7
 80034f4:	f7fd fa7c 	bl	80009f0 <__aeabi_fsub>
 80034f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80034fc:	9001      	str	r0, [sp, #4]
	reminder = (int)(reminder*1000);
 80034fe:	9801      	ldr	r0, [sp, #4]
 8003500:	490c      	ldr	r1, [pc, #48]	; (8003534 <UART_send_float+0x94>)
 8003502:	f7fd fb7f 	bl	8000c04 <__aeabi_fmul>
 8003506:	f7fd fd43 	bl	8000f90 <__aeabi_f2iz>
 800350a:	f7fd fb27 	bl	8000b5c <__aeabi_i2f>
 800350e:	9001      	str	r0, [sp, #4]
	n = reminder;
 8003510:	9801      	ldr	r0, [sp, #4]
 8003512:	f7fd fd3d 	bl	8000f90 <__aeabi_f2iz>
 8003516:	9000      	str	r0, [sp, #0]
	itoa(n, temp, 10);
 8003518:	a903      	add	r1, sp, #12
 800351a:	9800      	ldr	r0, [sp, #0]
 800351c:	220a      	movs	r2, #10
 800351e:	f001 f8c3 	bl	80046a8 <itoa>

	UART_Transmit_string_CR_LF(huart, temp, Timeout);
 8003522:	462a      	mov	r2, r5
 8003524:	a903      	add	r1, sp, #12
 8003526:	4620      	mov	r0, r4
 8003528:	f7ff ff9e 	bl	8003468 <UART_Transmit_string_CR_LF>
}
 800352c:	b01d      	add	sp, #116	; 0x74
 800352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003530:	08004cfa 	.word	0x08004cfa
 8003534:	447a0000 	.word	0x447a0000

08003538 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8003538:	4a07      	ldr	r2, [pc, #28]	; (8003558 <DWT_Init+0x20>)
 800353a:	68d3      	ldr	r3, [r2, #12]
 800353c:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8003540:	d109      	bne.n	8003556 <DWT_Init+0x1e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003542:	68d1      	ldr	r1, [r2, #12]
 8003544:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003548:	60d1      	str	r1, [r2, #12]
        DWT->CYCCNT = 0;
 800354a:	4a04      	ldr	r2, [pc, #16]	; (800355c <DWT_Init+0x24>)
 800354c:	6053      	str	r3, [r2, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4770      	bx	lr
 8003558:	e000edf0 	.word	0xe000edf0
 800355c:	e0001000 	.word	0xe0001000

08003560 <array_averaging>:
	return number;
}

float array_averaging(int len, float array[len])
{
	volatile float averaged = 0;
 8003560:	2300      	movs	r3, #0
{
 8003562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003564:	4605      	mov	r5, r0
 8003566:	460e      	mov	r6, r1
	for(int i = 0; i < len; i++)
 8003568:	2400      	movs	r4, #0
	volatile float averaged = 0;
 800356a:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < len; i++)
 800356c:	42ac      	cmp	r4, r5
 800356e:	db0b      	blt.n	8003588 <array_averaging+0x28>
	{
		averaged += array[i];
	}
	averaged = averaged/(float)len;
 8003570:	4628      	mov	r0, r5
 8003572:	f7fd faf3 	bl	8000b5c <__aeabi_i2f>
 8003576:	9c01      	ldr	r4, [sp, #4]
 8003578:	4601      	mov	r1, r0
 800357a:	4620      	mov	r0, r4
 800357c:	f7fd fbf6 	bl	8000d6c <__aeabi_fdiv>
 8003580:	9001      	str	r0, [sp, #4]
	return averaged;
 8003582:	9801      	ldr	r0, [sp, #4]
}
 8003584:	b002      	add	sp, #8
 8003586:	bd70      	pop	{r4, r5, r6, pc}
		averaged += array[i];
 8003588:	9801      	ldr	r0, [sp, #4]
 800358a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800358e:	f7fd fa31 	bl	80009f4 <__addsf3>
	for(int i = 0; i < len; i++)
 8003592:	3401      	adds	r4, #1
		averaged += array[i];
 8003594:	9001      	str	r0, [sp, #4]
 8003596:	e7e9      	b.n	800356c <array_averaging+0xc>

08003598 <arrays_xy_averaging>:

float arrays_xy_averaging(int len, float x_array[len], float y_array[len])
{
	volatile float xy = 0;
 8003598:	2300      	movs	r3, #0
{
 800359a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800359e:	4605      	mov	r5, r0
 80035a0:	460e      	mov	r6, r1
 80035a2:	4617      	mov	r7, r2
	for(int i = 0; i < len; i++)
 80035a4:	2400      	movs	r4, #0
	volatile float xy = 0;
 80035a6:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < len; i++)
 80035a8:	42ac      	cmp	r4, r5
 80035aa:	db0c      	blt.n	80035c6 <arrays_xy_averaging+0x2e>
	{
		xy += (x_array[i]*y_array[i]);

	}
	xy = xy/(float)len;
 80035ac:	4628      	mov	r0, r5
 80035ae:	f7fd fad5 	bl	8000b5c <__aeabi_i2f>
 80035b2:	9c01      	ldr	r4, [sp, #4]
 80035b4:	4601      	mov	r1, r0
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7fd fbd8 	bl	8000d6c <__aeabi_fdiv>
 80035bc:	9001      	str	r0, [sp, #4]
	return xy;
 80035be:	9801      	ldr	r0, [sp, #4]
}
 80035c0:	b002      	add	sp, #8
 80035c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xy += (x_array[i]*y_array[i]);
 80035c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80035ca:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80035ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80035d2:	f7fd fb17 	bl	8000c04 <__aeabi_fmul>
 80035d6:	4641      	mov	r1, r8
 80035d8:	f7fd fa0c 	bl	80009f4 <__addsf3>
	for(int i = 0; i < len; i++)
 80035dc:	3401      	adds	r4, #1
		xy += (x_array[i]*y_array[i]);
 80035de:	9001      	str	r0, [sp, #4]
 80035e0:	e7e2      	b.n	80035a8 <arrays_xy_averaging+0x10>

080035e2 <disperssion>:

float disperssion(int len, float array[len])
{
	volatile float S, averaged = 0;
 80035e2:	2300      	movs	r3, #0
{
 80035e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035e6:	4605      	mov	r5, r0
 80035e8:	460e      	mov	r6, r1
	for(int i = 0; i < len; i++)
 80035ea:	2400      	movs	r4, #0
	volatile float S, averaged = 0;
 80035ec:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < len; i++)
 80035ee:	42ac      	cmp	r4, r5
 80035f0:	db1e      	blt.n	8003630 <disperssion+0x4e>
	{
		S += (array[i]*array[i]);
		HAL_Delay(1);
	}

	averaged = array_averaging(len,array);
 80035f2:	4631      	mov	r1, r6
 80035f4:	4628      	mov	r0, r5
 80035f6:	f7ff ffb3 	bl	8003560 <array_averaging>
 80035fa:	9001      	str	r0, [sp, #4]

	S = (S/len - (averaged*averaged));
 80035fc:	4628      	mov	r0, r5
 80035fe:	f7fd faad 	bl	8000b5c <__aeabi_i2f>
 8003602:	9c00      	ldr	r4, [sp, #0]
 8003604:	4601      	mov	r1, r0
 8003606:	4620      	mov	r0, r4
 8003608:	f7fd fbb0 	bl	8000d6c <__aeabi_fdiv>
 800360c:	9e01      	ldr	r6, [sp, #4]
 800360e:	9f01      	ldr	r7, [sp, #4]
 8003610:	4604      	mov	r4, r0
 8003612:	4639      	mov	r1, r7
 8003614:	4630      	mov	r0, r6
 8003616:	f7fd faf5 	bl	8000c04 <__aeabi_fmul>
 800361a:	4601      	mov	r1, r0
 800361c:	4620      	mov	r0, r4
 800361e:	f7fd f9e7 	bl	80009f0 <__aeabi_fsub>
 8003622:	9000      	str	r0, [sp, #0]
	HAL_Delay(1);
 8003624:	2001      	movs	r0, #1
 8003626:	f7fd fd41 	bl	80010ac <HAL_Delay>

	return S;
 800362a:	9800      	ldr	r0, [sp, #0]
}
 800362c:	b003      	add	sp, #12
 800362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		S += (array[i]*array[i]);
 8003630:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8003634:	9f00      	ldr	r7, [sp, #0]
 8003636:	4608      	mov	r0, r1
 8003638:	f7fd fae4 	bl	8000c04 <__aeabi_fmul>
 800363c:	4639      	mov	r1, r7
 800363e:	f7fd f9d9 	bl	80009f4 <__addsf3>
 8003642:	9000      	str	r0, [sp, #0]
		HAL_Delay(1);
 8003644:	2001      	movs	r0, #1
 8003646:	f7fd fd31 	bl	80010ac <HAL_Delay>
	for(int i = 0; i < len; i++)
 800364a:	3401      	adds	r4, #1
 800364c:	e7cf      	b.n	80035ee <disperssion+0xc>

0800364e <linear_regression>:

void linear_regression(int len, float X[len], float Y[len],
		               float* a, float* b)
{
 800364e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003650:	461f      	mov	r7, r3
	volatile float res_a, res_b, x_averaged, y_averaged, xy_averaged, Sx = 0;
 8003652:	2300      	movs	r3, #0
{
 8003654:	b087      	sub	sp, #28
	volatile float res_a, res_b, x_averaged, y_averaged, xy_averaged, Sx = 0;
 8003656:	9305      	str	r3, [sp, #20]
{
 8003658:	4604      	mov	r4, r0
 800365a:	460d      	mov	r5, r1
 800365c:	4616      	mov	r6, r2

	x_averaged = array_averaging(len,X);
 800365e:	f7ff ff7f 	bl	8003560 <array_averaging>

    y_averaged = array_averaging(len,Y);
 8003662:	4631      	mov	r1, r6
	x_averaged = array_averaging(len,X);
 8003664:	9002      	str	r0, [sp, #8]
    y_averaged = array_averaging(len,Y);
 8003666:	4620      	mov	r0, r4
 8003668:	f7ff ff7a 	bl	8003560 <array_averaging>

    xy_averaged = arrays_xy_averaging(len,X,Y);
 800366c:	4632      	mov	r2, r6
    y_averaged = array_averaging(len,Y);
 800366e:	9003      	str	r0, [sp, #12]
    xy_averaged = arrays_xy_averaging(len,X,Y);
 8003670:	4629      	mov	r1, r5
 8003672:	4620      	mov	r0, r4
 8003674:	f7ff ff90 	bl	8003598 <arrays_xy_averaging>

    Sx = disperssion(len,X);
 8003678:	4629      	mov	r1, r5
    xy_averaged = arrays_xy_averaging(len,X,Y);
 800367a:	9004      	str	r0, [sp, #16]
    Sx = disperssion(len,X);
 800367c:	4620      	mov	r0, r4
 800367e:	f7ff ffb0 	bl	80035e2 <disperssion>
 8003682:	9005      	str	r0, [sp, #20]

    res_b = (xy_averaged - x_averaged*y_averaged)/Sx;
 8003684:	9d04      	ldr	r5, [sp, #16]
 8003686:	9802      	ldr	r0, [sp, #8]
 8003688:	9903      	ldr	r1, [sp, #12]
 800368a:	f7fd fabb 	bl	8000c04 <__aeabi_fmul>
 800368e:	9c05      	ldr	r4, [sp, #20]
 8003690:	4601      	mov	r1, r0
 8003692:	4628      	mov	r0, r5
 8003694:	f7fd f9ac 	bl	80009f0 <__aeabi_fsub>
 8003698:	4621      	mov	r1, r4
 800369a:	f7fd fb67 	bl	8000d6c <__aeabi_fdiv>
 800369e:	9001      	str	r0, [sp, #4]

    res_a = y_averaged - res_b*x_averaged;
 80036a0:	9c03      	ldr	r4, [sp, #12]
 80036a2:	9801      	ldr	r0, [sp, #4]
 80036a4:	9902      	ldr	r1, [sp, #8]
 80036a6:	f7fd faad 	bl	8000c04 <__aeabi_fmul>
 80036aa:	4601      	mov	r1, r0
 80036ac:	4620      	mov	r0, r4
 80036ae:	f7fd f99f 	bl	80009f0 <__aeabi_fsub>
 80036b2:	9000      	str	r0, [sp, #0]

    *a = res_a;
 80036b4:	9b00      	ldr	r3, [sp, #0]
    *b = res_b;
 80036b6:	9a01      	ldr	r2, [sp, #4]
    *a = res_a;
 80036b8:	603b      	str	r3, [r7, #0]
    *b = res_b;
 80036ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    HAL_Delay(1);
 80036bc:	2001      	movs	r0, #1
    *b = res_b;
 80036be:	601a      	str	r2, [r3, #0]
    HAL_Delay(1);
 80036c0:	f7fd fcf4 	bl	80010ac <HAL_Delay>

}
 80036c4:	b007      	add	sp, #28
 80036c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036c8 <PID_init>:
//That is, a->b is equivalent to (*a).b

PIDtypedef* PID_init(PIDtypedef* PID, float *KP, float *KI, float *KD, float *hold)
{

	PID->Kp = *KP;
 80036c8:	6809      	ldr	r1, [r1, #0]
{
 80036ca:	b510      	push	{r4, lr}
	PID->Kp = *KP;
 80036cc:	6001      	str	r1, [r0, #0]
	PID->Ki = *KI;
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	6042      	str	r2, [r0, #4]
	PID->Kd = *KD;
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6083      	str	r3, [r0, #8]

	PID->hold = *hold;
 80036d6:	9b02      	ldr	r3, [sp, #8]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60c3      	str	r3, [r0, #12]

	PID->out = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	6103      	str	r3, [r0, #16]
	PID->e = 0;
 80036e0:	6143      	str	r3, [r0, #20]


	return PID;
}
 80036e2:	bd10      	pop	{r4, pc}

080036e4 <integral_part>:


void integral_part(PIDtypedef *PID, float PID_e)
{
 80036e4:	b510      	push	{r4, lr}
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
	PID->e=PID_e;
 80036ea:	6161      	str	r1, [r4, #20]
	PID->I += PID->Ki * PID->e;
 80036ec:	6861      	ldr	r1, [r4, #4]
 80036ee:	f7fd fa89 	bl	8000c04 <__aeabi_fmul>
 80036f2:	4601      	mov	r1, r0
 80036f4:	69e0      	ldr	r0, [r4, #28]
 80036f6:	f7fd f97d 	bl	80009f4 <__addsf3>
 80036fa:	61e0      	str	r0, [r4, #28]
 80036fc:	bd10      	pop	{r4, pc}

080036fe <differential_part>:
}

void differential_part(PIDtypedef *PID, float PID_e)
{
 80036fe:	b538      	push	{r3, r4, r5, lr}
 8003700:	4604      	mov	r4, r0

	//PID->e=PID_e;
	PID->D = PID->Kd * (PID->e - PID_e);
 8003702:	6940      	ldr	r0, [r0, #20]
{
 8003704:	460d      	mov	r5, r1
	PID->D = PID->Kd * (PID->e - PID_e);
 8003706:	f7fd f973 	bl	80009f0 <__aeabi_fsub>
 800370a:	68a1      	ldr	r1, [r4, #8]
 800370c:	f7fd fa7a 	bl	8000c04 <__aeabi_fmul>
	PID->e=PID_e;
 8003710:	6165      	str	r5, [r4, #20]
	PID->D = PID->Kd * (PID->e - PID_e);
 8003712:	6220      	str	r0, [r4, #32]
	PID->e=PID_e;
 8003714:	bd38      	pop	{r3, r4, r5, pc}

08003716 <PID>:
	PID->e = PID_e;
	PID->P=PID->Kp*PID->e;
}

void PID(PIDtypedef *PID, float PID_e)
{
 8003716:	b538      	push	{r3, r4, r5, lr}
 8003718:	4604      	mov	r4, r0
	PID->P=PID->Kp*PID->e;
 800371a:	6800      	ldr	r0, [r0, #0]
	PID->e = PID_e;
 800371c:	6161      	str	r1, [r4, #20]
{
 800371e:	460d      	mov	r5, r1
	PID->P=PID->Kp*PID->e;
 8003720:	f7fd fa70 	bl	8000c04 <__aeabi_fmul>
	proportional_part(PID, PID_e);
	differential_part(PID, PID_e);
 8003724:	4629      	mov	r1, r5
	PID->P=PID->Kp*PID->e;
 8003726:	61a0      	str	r0, [r4, #24]
	differential_part(PID, PID_e);
 8003728:	4620      	mov	r0, r4
 800372a:	f7ff ffe8 	bl	80036fe <differential_part>
	integral_part(PID, PID_e);
 800372e:	4629      	mov	r1, r5
 8003730:	4620      	mov	r0, r4
 8003732:	f7ff ffd7 	bl	80036e4 <integral_part>
	PID->out=PID->P+PID->I+PID->D;
 8003736:	69e1      	ldr	r1, [r4, #28]
 8003738:	69a0      	ldr	r0, [r4, #24]
 800373a:	f7fd f95b 	bl	80009f4 <__addsf3>
 800373e:	6a21      	ldr	r1, [r4, #32]
 8003740:	f7fd f958 	bl	80009f4 <__addsf3>
 8003744:	6120      	str	r0, [r4, #16]
 8003746:	bd38      	pop	{r3, r4, r5, pc}

08003748 <SD_MPU6050_SetDataRate>:
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8003748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 800374a:	2319      	movs	r3, #25
{
 800374c:	4605      	mov	r5, r0
	d[1] = rate;

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800374e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t address = DataStruct->Address;
 8003752:	780c      	ldrb	r4, [r1, #0]
	d[0] = MPU6050_SMPLRT_DIV;
 8003754:	f88d 300c 	strb.w	r3, [sp, #12]
	d[1] = rate;
 8003758:	f88d 200d 	strb.w	r2, [sp, #13]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800375c:	b2a4      	uxth	r4, r4
 800375e:	9600      	str	r6, [sp, #0]
 8003760:	2302      	movs	r3, #2
 8003762:	aa03      	add	r2, sp, #12
 8003764:	4621      	mov	r1, r4
 8003766:	4628      	mov	r0, r5
 8003768:	f7fe fb20 	bl	8001dac <HAL_I2C_Master_Transmit>
 800376c:	2800      	cmp	r0, #0
 800376e:	d1f6      	bne.n	800375e <SD_MPU6050_SetDataRate+0x16>
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003770:	b004      	add	sp, #16
 8003772:	bd70      	pop	{r4, r5, r6, pc}

08003774 <SD_MPU6050_SetAccelerometer>:
SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8003774:	231c      	movs	r3, #28
{
 8003776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800377a:	4607      	mov	r7, r0
 800377c:	460c      	mov	r4, r1
 800377e:	4616      	mov	r6, r2

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003780:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 8003784:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 8003786:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8003788:	f10d 0810 	add.w	r8, sp, #16
 800378c:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003790:	b2ad      	uxth	r5, r5
 8003792:	f8cd 9000 	str.w	r9, [sp]
 8003796:	2301      	movs	r3, #1
 8003798:	4642      	mov	r2, r8
 800379a:	4629      	mov	r1, r5
 800379c:	4638      	mov	r0, r7
 800379e:	f7fe fb05 	bl	8001dac <HAL_I2C_Master_Transmit>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d1f5      	bne.n	8003792 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80037a6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80037aa:	f8cd 8000 	str.w	r8, [sp]
 80037ae:	2301      	movs	r3, #1
 80037b0:	f10d 020e 	add.w	r2, sp, #14
 80037b4:	4629      	mov	r1, r5
 80037b6:	4638      	mov	r0, r7
 80037b8:	f7fe fbc6 	bl	8001f48 <HAL_I2C_Master_Receive>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d1f4      	bne.n	80037aa <SD_MPU6050_SetAccelerometer+0x36>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80037c0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 80037c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80037c8:	f023 0318 	bic.w	r3, r3, #24
 80037cc:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 80037d0:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80037d4:	f8cd 8000 	str.w	r8, [sp]
 80037d8:	2301      	movs	r3, #1
 80037da:	f10d 020e 	add.w	r2, sp, #14
 80037de:	4629      	mov	r1, r5
 80037e0:	4638      	mov	r0, r7
 80037e2:	f7fe fae3 	bl	8001dac <HAL_I2C_Master_Transmit>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d1f4      	bne.n	80037d4 <SD_MPU6050_SetAccelerometer+0x60>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 80037ea:	2e03      	cmp	r6, #3
 80037ec:	d806      	bhi.n	80037fc <SD_MPU6050_SetAccelerometer+0x88>
 80037ee:	e8df f006 	tbb	[pc, r6]
 80037f2:	0902      	.short	0x0902
 80037f4:	0f0c      	.short	0x0f0c
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80037f6:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
			break;
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
			break;
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80037fa:	60a3      	str	r3, [r4, #8]
			break;
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	b005      	add	sp, #20
 8003800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8003804:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 8003808:	e7f7      	b.n	80037fa <SD_MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 800380a:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 800380e:	e7f4      	b.n	80037fa <SD_MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8003810:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 8003814:	e7f1      	b.n	80037fa <SD_MPU6050_SetAccelerometer+0x86>
	...

08003818 <SD_MPU6050_SetGyroscope>:
SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8003818:	231b      	movs	r3, #27
{
 800381a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800381e:	4607      	mov	r7, r0
 8003820:	460c      	mov	r4, r1
 8003822:	4616      	mov	r6, r2

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003824:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 8003828:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 800382a:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 800382c:	f10d 0810 	add.w	r8, sp, #16
 8003830:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003834:	b2ad      	uxth	r5, r5
 8003836:	f8cd 9000 	str.w	r9, [sp]
 800383a:	2301      	movs	r3, #1
 800383c:	4642      	mov	r2, r8
 800383e:	4629      	mov	r1, r5
 8003840:	4638      	mov	r0, r7
 8003842:	f7fe fab3 	bl	8001dac <HAL_I2C_Master_Transmit>
 8003846:	2800      	cmp	r0, #0
 8003848:	d1f5      	bne.n	8003836 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800384a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800384e:	f8cd 8000 	str.w	r8, [sp]
 8003852:	2301      	movs	r3, #1
 8003854:	f10d 020e 	add.w	r2, sp, #14
 8003858:	4629      	mov	r1, r5
 800385a:	4638      	mov	r0, r7
 800385c:	f7fe fb74 	bl	8001f48 <HAL_I2C_Master_Receive>
 8003860:	2800      	cmp	r0, #0
 8003862:	d1f4      	bne.n	800384e <SD_MPU6050_SetGyroscope+0x36>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8003864:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8003868:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800386c:	f023 0318 	bic.w	r3, r3, #24
 8003870:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 8003874:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8003878:	f8cd 8000 	str.w	r8, [sp]
 800387c:	2301      	movs	r3, #1
 800387e:	f10d 020e 	add.w	r2, sp, #14
 8003882:	4629      	mov	r1, r5
 8003884:	4638      	mov	r0, r7
 8003886:	f7fe fa91 	bl	8001dac <HAL_I2C_Master_Transmit>
 800388a:	2800      	cmp	r0, #0
 800388c:	d1f4      	bne.n	8003878 <SD_MPU6050_SetGyroscope+0x60>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 800388e:	2e03      	cmp	r6, #3
 8003890:	d805      	bhi.n	800389e <SD_MPU6050_SetGyroscope+0x86>
 8003892:	e8df f006 	tbb	[pc, r6]
 8003896:	0802      	.short	0x0802
 8003898:	0c0a      	.short	0x0c0a
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <SD_MPU6050_SetGyroscope+0x9c>)
				break;
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
				break;
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 800389c:	6063      	str	r3, [r4, #4]
			default:
				break;
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 800389e:	2000      	movs	r0, #0
 80038a0:	b005      	add	sp, #20
 80038a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <SD_MPU6050_SetGyroscope+0xa0>)
 80038a8:	e7f8      	b.n	800389c <SD_MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <SD_MPU6050_SetGyroscope+0xa4>)
 80038ac:	e7f6      	b.n	800389c <SD_MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <SD_MPU6050_SetGyroscope+0xa8>)
 80038b0:	e7f4      	b.n	800389c <SD_MPU6050_SetGyroscope+0x84>
 80038b2:	bf00      	nop
 80038b4:	3bfa232d 	.word	0x3bfa232d
 80038b8:	3c7a232d 	.word	0x3c7a232d
 80038bc:	3cf9c190 	.word	0x3cf9c190
 80038c0:	3d79c190 	.word	0x3d79c190

080038c4 <SD_MPU6050_Init>:
{
 80038c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80038c8:	4698      	mov	r8, r3
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80038ca:	2375      	movs	r3, #117	; 0x75
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80038cc:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80038d0:	b294      	uxth	r4, r2
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80038d2:	700a      	strb	r2, [r1, #0]
{
 80038d4:	460e      	mov	r6, r1
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80038d6:	f88d 300a 	strb.w	r3, [sp, #10]
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80038da:	2202      	movs	r2, #2
 80038dc:	2305      	movs	r3, #5
 80038de:	4621      	mov	r1, r4
{
 80038e0:	4605      	mov	r5, r0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80038e2:	f7fe fca9 	bl	8002238 <HAL_I2C_IsDeviceReady>
 80038e6:	b118      	cbz	r0, 80038f0 <SD_MPU6050_Init+0x2c>
				return SD_MPU6050_Result_Error;
 80038e8:	2001      	movs	r0, #1
}
 80038ea:	b004      	add	sp, #16
 80038ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 80038f0:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80038f4:	2301      	movs	r3, #1
 80038f6:	9700      	str	r7, [sp, #0]
 80038f8:	f10d 020a 	add.w	r2, sp, #10
 80038fc:	4621      	mov	r1, r4
 80038fe:	4628      	mov	r0, r5
 8003900:	f7fe fa54 	bl	8001dac <HAL_I2C_Master_Transmit>
 8003904:	2800      	cmp	r0, #0
 8003906:	d1ef      	bne.n	80038e8 <SD_MPU6050_Init+0x24>
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8003908:	9700      	str	r7, [sp, #0]
 800390a:	2301      	movs	r3, #1
 800390c:	f10d 020b 	add.w	r2, sp, #11
 8003910:	4621      	mov	r1, r4
 8003912:	4628      	mov	r0, r5
 8003914:	f7fe fb18 	bl	8001f48 <HAL_I2C_Master_Receive>
 8003918:	2800      	cmp	r0, #0
 800391a:	d1e5      	bne.n	80038e8 <SD_MPU6050_Init+0x24>
		while(temp != MPU6050_I_AM)
 800391c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003920:	2b68      	cmp	r3, #104	; 0x68
 8003922:	d120      	bne.n	8003966 <SD_MPU6050_Init+0xa2>
		d[0] = MPU6050_PWR_MGMT_1;
 8003924:	236b      	movs	r3, #107	; 0x6b
		d[1] = 0x00;
 8003926:	f88d 000d 	strb.w	r0, [sp, #13]
		d[0] = MPU6050_PWR_MGMT_1;
 800392a:	f88d 300c 	strb.w	r3, [sp, #12]
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800392e:	4621      	mov	r1, r4
 8003930:	9700      	str	r7, [sp, #0]
 8003932:	2302      	movs	r3, #2
 8003934:	aa03      	add	r2, sp, #12
 8003936:	4628      	mov	r0, r5
 8003938:	f7fe fa38 	bl	8001dac <HAL_I2C_Master_Transmit>
 800393c:	4604      	mov	r4, r0
 800393e:	2800      	cmp	r0, #0
 8003940:	d1d2      	bne.n	80038e8 <SD_MPU6050_Init+0x24>
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8003942:	2207      	movs	r2, #7
 8003944:	4631      	mov	r1, r6
 8003946:	4628      	mov	r0, r5
 8003948:	f7ff fefe 	bl	8003748 <SD_MPU6050_SetDataRate>
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 800394c:	4642      	mov	r2, r8
 800394e:	4631      	mov	r1, r6
 8003950:	4628      	mov	r0, r5
 8003952:	f7ff ff0f 	bl	8003774 <SD_MPU6050_SetAccelerometer>
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8003956:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800395a:	4631      	mov	r1, r6
 800395c:	4628      	mov	r0, r5
 800395e:	f7ff ff5b 	bl	8003818 <SD_MPU6050_SetGyroscope>
	return SD_MPU6050_Result_Ok;
 8003962:	4620      	mov	r0, r4
 8003964:	e7c1      	b.n	80038ea <SD_MPU6050_Init+0x26>
				return SD_MPU6050_Result_DeviceInvalid;
 8003966:	2003      	movs	r0, #3
 8003968:	e7bf      	b.n	80038ea <SD_MPU6050_Init+0x26>

0800396a <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800396a:	233b      	movs	r3, #59	; 0x3b
{
 800396c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003970:	4606      	mov	r6, r0
 8003972:	460c      	mov	r4, r1
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003974:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 8003978:	b086      	sub	sp, #24
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800397a:	ad06      	add	r5, sp, #24
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 800397c:	780f      	ldrb	r7, [r1, #0]
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800397e:	f805 3d09 	strb.w	r3, [r5, #-9]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003982:	f8cd 8000 	str.w	r8, [sp]
 8003986:	2301      	movs	r3, #1
 8003988:	462a      	mov	r2, r5
 800398a:	4639      	mov	r1, r7
 800398c:	4630      	mov	r0, r6
 800398e:	f7fe fa0d 	bl	8001dac <HAL_I2C_Master_Transmit>
 8003992:	2800      	cmp	r0, #0
 8003994:	d1f5      	bne.n	8003982 <SD_MPU6050_ReadAccelerometer+0x18>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8003996:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800399a:	9500      	str	r5, [sp, #0]
 800399c:	2306      	movs	r3, #6
 800399e:	aa04      	add	r2, sp, #16
 80039a0:	4639      	mov	r1, r7
 80039a2:	4630      	mov	r0, r6
 80039a4:	f7fe fad0 	bl	8001f48 <HAL_I2C_Master_Receive>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d1f6      	bne.n	800399a <SD_MPU6050_ReadAccelerometer+0x30>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 80039ac:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80039b0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80039b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80039b8:	81a3      	strh	r3, [r4, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 80039ba:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80039be:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80039c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80039c6:	81e3      	strh	r3, [r4, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 80039c8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80039cc:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80039d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80039d4:	8223      	strh	r3, [r4, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 80039d6:	b006      	add	sp, #24
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039dc <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80039dc:	2343      	movs	r3, #67	; 0x43
{
 80039de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e2:	4606      	mov	r6, r0
 80039e4:	460c      	mov	r4, r1
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80039e6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 80039ea:	b086      	sub	sp, #24
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80039ec:	ad06      	add	r5, sp, #24
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80039ee:	780f      	ldrb	r7, [r1, #0]
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80039f0:	f805 3d09 	strb.w	r3, [r5, #-9]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80039f4:	f8cd 8000 	str.w	r8, [sp]
 80039f8:	2301      	movs	r3, #1
 80039fa:	462a      	mov	r2, r5
 80039fc:	4639      	mov	r1, r7
 80039fe:	4630      	mov	r0, r6
 8003a00:	f7fe f9d4 	bl	8001dac <HAL_I2C_Master_Transmit>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d1f5      	bne.n	80039f4 <SD_MPU6050_ReadGyroscope+0x18>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8003a08:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003a0c:	9500      	str	r5, [sp, #0]
 8003a0e:	2306      	movs	r3, #6
 8003a10:	aa04      	add	r2, sp, #16
 8003a12:	4639      	mov	r1, r7
 8003a14:	4630      	mov	r0, r6
 8003a16:	f7fe fa97 	bl	8001f48 <HAL_I2C_Master_Receive>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d1f6      	bne.n	8003a0c <SD_MPU6050_ReadGyroscope+0x30>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8003a1e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003a22:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003a26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a2a:	8263      	strh	r3, [r4, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8003a2c:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8003a30:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a38:	82a3      	strh	r3, [r4, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8003a3a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003a3e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003a42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a46:	82e3      	strh	r3, [r4, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003a48:	b006      	add	sp, #24
 8003a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003a50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003a52:	4811      	ldr	r0, [pc, #68]	; (8003a98 <MX_ADC1_Init+0x48>)
 8003a54:	4a11      	ldr	r2, [pc, #68]	; (8003a9c <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003a56:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003a58:	2401      	movs	r4, #1
  hadc1.Instance = ADC1;
 8003a5a:	6002      	str	r2, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a5c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	9302      	str	r3, [sp, #8]
 8003a64:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003a66:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003a68:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a6a:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a6c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a6e:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003a70:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a72:	f7fd fcd5 	bl	8001420 <HAL_ADC_Init>
 8003a76:	b108      	cbz	r0, 8003a7c <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 8003a78:	f000 fbee 	bl	8004258 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003a7c:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a7e:	a901      	add	r1, sp, #4
 8003a80:	4805      	ldr	r0, [pc, #20]	; (8003a98 <MX_ADC1_Init+0x48>)
  sConfig.Channel = ADC_CHANNEL_1;
 8003a82:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003a84:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003a86:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a88:	f7fd fb5e 	bl	8001148 <HAL_ADC_ConfigChannel>
 8003a8c:	b108      	cbz	r0, 8003a92 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8003a8e:	f000 fbe3 	bl	8004258 <Error_Handler>
  }

}
 8003a92:	b004      	add	sp, #16
 8003a94:	bd10      	pop	{r4, pc}
 8003a96:	bf00      	nop
 8003a98:	20000190 	.word	0x20000190
 8003a9c:	40012400 	.word	0x40012400

08003aa0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003aa0:	b530      	push	{r4, r5, lr}
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	a802      	add	r0, sp, #8
 8003aac:	f000 fdfe 	bl	80046ac <memset>
  if(adcHandle->Instance==ADC1)
 8003ab0:	682a      	ldr	r2, [r5, #0]
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <HAL_ADC_MspInit+0x84>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d133      	bne.n	8003b20 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ab8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003abc:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abe:	481a      	ldr	r0, [pc, #104]	; (8003b28 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac4:	619a      	str	r2, [r3, #24]
 8003ac6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac8:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003aca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003ace:	9200      	str	r2, [sp, #0]
 8003ad0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003ad4:	4c15      	ldr	r4, [pc, #84]	; (8003b2c <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad6:	f042 0204 	orr.w	r2, r2, #4
 8003ada:	619a      	str	r2, [r3, #24]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aea:	2303      	movs	r3, #3
 8003aec:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aee:	f7fd fecb 	bl	8001888 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003af2:	2280      	movs	r2, #128	; 0x80
 8003af4:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003af6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Channel1;
 8003afa:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003afc:	6122      	str	r2, [r4, #16]
    hdma_adc1.Instance = DMA1_Channel1;
 8003afe:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b04:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b06:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b08:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0a:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b0c:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003b0e:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b10:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b12:	f7fd fd6f 	bl	80015f4 <HAL_DMA_Init>
 8003b16:	b108      	cbz	r0, 8003b1c <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8003b18:	f000 fb9e 	bl	8004258 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003b1c:	622c      	str	r4, [r5, #32]
 8003b1e:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003b20:	b007      	add	sp, #28
 8003b22:	bd30      	pop	{r4, r5, pc}
 8003b24:	40012400 	.word	0x40012400
 8003b28:	40010800 	.word	0x40010800
 8003b2c:	200001c0 	.word	0x200001c0
 8003b30:	40020008 	.word	0x40020008

08003b34 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <MX_DMA_Init+0x2c>)
{
 8003b36:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b38:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b3a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b42:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b44:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b46:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b50:	f7fd fcf8 	bl	8001544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b54:	200b      	movs	r0, #11
 8003b56:	f7fd fd29 	bl	80015ac <HAL_NVIC_EnableIRQ>

}
 8003b5a:	b003      	add	sp, #12
 8003b5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b60:	40021000 	.word	0x40021000

08003b64 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <MX_GPIO_Init+0x40>)
{
 8003b66:	b084      	sub	sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	f042 0220 	orr.w	r2, r2, #32
 8003b6e:	619a      	str	r2, [r3, #24]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	f002 0220 	and.w	r2, r2, #32
 8003b76:	9201      	str	r2, [sp, #4]
 8003b78:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	f042 0204 	orr.w	r2, r2, #4
 8003b80:	619a      	str	r2, [r3, #24]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	f002 0204 	and.w	r2, r2, #4
 8003b88:	9202      	str	r2, [sp, #8]
 8003b8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	f042 0208 	orr.w	r2, r2, #8
 8003b92:	619a      	str	r2, [r3, #24]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	9303      	str	r3, [sp, #12]
 8003b9c:	9b03      	ldr	r3, [sp, #12]

}
 8003b9e:	b004      	add	sp, #16
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000

08003ba8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003ba8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003baa:	480c      	ldr	r0, [pc, #48]	; (8003bdc <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <MX_I2C1_Init+0x38>)
 8003bae:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003be4 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8003bb6:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bba:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bbc:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bbe:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003bc0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bc2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003bc4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bc6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bc8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bca:	f7fe f84b 	bl	8001c64 <HAL_I2C_Init>
 8003bce:	b118      	cbz	r0, 8003bd8 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8003bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003bd4:	f000 bb40 	b.w	8004258 <Error_Handler>
 8003bd8:	bd08      	pop	{r3, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000204 	.word	0x20000204
 8003be0:	40005400 	.word	0x40005400
 8003be4:	000186a0 	.word	0x000186a0

08003be8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003be8:	b510      	push	{r4, lr}
 8003bea:	4604      	mov	r4, r0
 8003bec:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bee:	2210      	movs	r2, #16
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	a802      	add	r0, sp, #8
 8003bf4:	f000 fd5a 	bl	80046ac <memset>
  if(i2cHandle->Instance==I2C1)
 8003bf8:	6822      	ldr	r2, [r4, #0]
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_I2C_MspInit+0x68>)
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d124      	bne.n	8003c4a <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c00:	4c14      	ldr	r4, [pc, #80]	; (8003c54 <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c02:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c04:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c06:	4814      	ldr	r0, [pc, #80]	; (8003c58 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c08:	f043 0308 	orr.w	r3, r3, #8
 8003c0c:	61a3      	str	r3, [r4, #24]
 8003c0e:	69a3      	ldr	r3, [r4, #24]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c1c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c1e:	2312      	movs	r3, #18
 8003c20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c22:	2303      	movs	r3, #3
 8003c24:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c26:	f7fd fe2f 	bl	8001888 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003c2a:	4a0c      	ldr	r2, [pc, #48]	; (8003c5c <HAL_I2C_MspInit+0x74>)
 8003c2c:	6853      	ldr	r3, [r2, #4]
 8003c2e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003c32:	f043 0302 	orr.w	r3, r3, #2
 8003c36:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c38:	69e3      	ldr	r3, [r4, #28]
 8003c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c3e:	61e3      	str	r3, [r4, #28]
 8003c40:	69e3      	ldr	r3, [r4, #28]
 8003c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003c4a:	b006      	add	sp, #24
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	bf00      	nop
 8003c50:	40005400 	.word	0x40005400
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40010c00 	.word	0x40010c00
 8003c5c:	40010000 	.word	0x40010000

08003c60 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c60:	2228      	movs	r2, #40	; 0x28
{
 8003c62:	b530      	push	{r4, r5, lr}
 8003c64:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c66:	eb0d 0002 	add.w	r0, sp, r2
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f000 fd1e 	bl	80046ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c70:	2214      	movs	r2, #20
 8003c72:	2100      	movs	r1, #0
 8003c74:	eb0d 0002 	add.w	r0, sp, r2
 8003c78:	f000 fd18 	bl	80046ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2210      	movs	r2, #16
 8003c80:	a801      	add	r0, sp, #4
 8003c82:	f000 fd13 	bl	80046ac <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c8a:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c8c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c8e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c90:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003c92:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c96:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c98:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c9a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003c9c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c9e:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ca0:	f7fe fb74 	bl	800238c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ca4:	230f      	movs	r3, #15
 8003ca6:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cac:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cae:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003cb0:	f44f 63a0 	mov.w	r3, #1280	; 0x500

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003cb8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cba:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cbc:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003cbe:	f7fe fd3f 	bl	8002740 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cc2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003cc4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003cc6:	9503      	str	r5, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cc8:	f7fe fdf8 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003ccc:	b015      	add	sp, #84	; 0x54
 8003cce:	bd30      	pop	{r4, r5, pc}

08003cd0 <servo_set_CCRx_value>:

/* USER CODE BEGIN 4 */

void servo_set_CCRx_value(uint16_t CCRx_value)
{
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,CCRx_value);
 8003cd0:	4b02      	ldr	r3, [pc, #8]	; (8003cdc <servo_set_CCRx_value+0xc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6358      	str	r0, [r3, #52]	; 0x34
	HAL_Delay(25);
 8003cd6:	2019      	movs	r0, #25
 8003cd8:	f7fd b9e8 	b.w	80010ac <HAL_Delay>
 8003cdc:	200002e4 	.word	0x200002e4

08003ce0 <servo_set_position>:
}

int servo_set_position(volatile float degree)
{
 8003ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ce2:	9001      	str	r0, [sp, #4]
	if((degree>= SERVO_MIN_ANGLE) && (degree <= SERVO_MAX_ANGLE))
 8003ce4:	9801      	ldr	r0, [sp, #4]
 8003ce6:	4914      	ldr	r1, [pc, #80]	; (8003d38 <servo_set_position+0x58>)
 8003ce8:	f7fd f93e 	bl	8000f68 <__aeabi_fcmpge>
 8003cec:	b300      	cbz	r0, 8003d30 <servo_set_position+0x50>
 8003cee:	9801      	ldr	r0, [sp, #4]
 8003cf0:	4912      	ldr	r1, [pc, #72]	; (8003d3c <servo_set_position+0x5c>)
 8003cf2:	f7fd f92f 	bl	8000f54 <__aeabi_fcmple>
 8003cf6:	b1d8      	cbz	r0, 8003d30 <servo_set_position+0x50>
	{
		volatile uint16_t y = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8ad 300e 	strh.w	r3, [sp, #14]
		y = (uint16_t)(CCRxTD_b*degree+CCRxTD_a);
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <servo_set_position+0x60>)
 8003d00:	9801      	ldr	r0, [sp, #4]
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	f7fc ff7e 	bl	8000c04 <__aeabi_fmul>
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <servo_set_position+0x64>)
 8003d0a:	6819      	ldr	r1, [r3, #0]
 8003d0c:	f7fc fe72 	bl	80009f4 <__addsf3>
 8003d10:	f7fd f964 	bl	8000fdc <__aeabi_f2uiz>
 8003d14:	b280      	uxth	r0, r0
 8003d16:	f8ad 000e 	strh.w	r0, [sp, #14]
		servo_set_CCRx_value(y);
 8003d1a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003d1e:	b280      	uxth	r0, r0
 8003d20:	f7ff ffd6 	bl	8003cd0 <servo_set_CCRx_value>
//        HAL_Delay(50);
		return y;
 8003d24:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003d28:	b280      	uxth	r0, r0
	else
	{
		return -1;
	}

}
 8003d2a:	b005      	add	sp, #20
 8003d2c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	e7f9      	b.n	8003d2a <servo_set_position+0x4a>
 8003d36:	bf00      	nop
 8003d38:	c2200000 	.word	0xc2200000
 8003d3c:	42200000 	.word	0x42200000
 8003d40:	2000000c 	.word	0x2000000c
 8003d44:	20000008 	.word	0x20000008

08003d48 <potentiometer_calibration>:

void potentiometer_calibration()
{
 8003d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
//	volatile float a,b, x_averaged, y_averaged, xy_averaged, Sx = 0;

    for(int d = 0; d<len; d++)
    {
    	degs[d]=degree;
  	    degree = degree + 0.5;
 8003d4c:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
{
 8003d50:	b082      	sub	sp, #8
 8003d52:	af02      	add	r7, sp, #8
	float ress[len];
 8003d54:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003d58:	ae02      	add	r6, sp, #8
	float degs[len];
 8003d5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003d5e:	ad02      	add	r5, sp, #8
	float degree = SERVO_MIN_ANGLE;
 8003d60:	481f      	ldr	r0, [pc, #124]	; (8003de0 <potentiometer_calibration+0x98>)
 8003d62:	1f2c      	subs	r4, r5, #4
 8003d64:	f505 781f 	add.w	r8, r5, #636	; 0x27c
    	degs[d]=degree;
 8003d68:	f844 0f04 	str.w	r0, [r4, #4]!
  	    degree = degree + 0.5;
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	f7fc fe41 	bl	80009f4 <__addsf3>
    for(int d = 0; d<len; d++)
 8003d72:	45a0      	cmp	r8, r4
 8003d74:	d1f8      	bne.n	8003d68 <potentiometer_calibration+0x20>
 8003d76:	2400      	movs	r4, #0
	{
		int err = servo_set_position(degs[d]);
		if(err != -1)
		{
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
			  ress[d]= (ADC1_DATA[0]*ADC1_K);
 8003d78:	f04f 0800 	mov.w	r8, #0
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8003d7c:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003de4 <potentiometer_calibration+0x9c>
			  ress[d]= (ADC1_DATA[0]*ADC1_K);
 8003d80:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003df4 <potentiometer_calibration+0xac>
		int err = servo_set_position(degs[d]);
 8003d84:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8003d88:	f7ff ffaa 	bl	8003ce0 <servo_set_position>
		if(err != -1)
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d013      	beq.n	8003db8 <potentiometer_calibration+0x70>
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8003d90:	2201      	movs	r2, #1
 8003d92:	4914      	ldr	r1, [pc, #80]	; (8003de4 <potentiometer_calibration+0x9c>)
 8003d94:	4814      	ldr	r0, [pc, #80]	; (8003de8 <potentiometer_calibration+0xa0>)
 8003d96:	f7fd fa93 	bl	80012c0 <HAL_ADC_Start_DMA>
			  ress[d]= (ADC1_DATA[0]*ADC1_K);
 8003d9a:	f8ba 0000 	ldrh.w	r0, [sl]
 8003d9e:	f7fc fb33 	bl	8000408 <__aeabi_i2d>
 8003da2:	4642      	mov	r2, r8
 8003da4:	464b      	mov	r3, r9
 8003da6:	f7fc fb95 	bl	80004d4 <__aeabi_dmul>
 8003daa:	f7fc fdcd 	bl	8000948 <__aeabi_d2f>
 8003dae:	f846 0024 	str.w	r0, [r6, r4, lsl #2]

			  HAL_Delay(1);
 8003db2:	2001      	movs	r0, #1
 8003db4:	f7fd f97a 	bl	80010ac <HAL_Delay>
		 }
         HAL_Delay(1);
 8003db8:	2001      	movs	r0, #1
	for(int d = 0; d < len; d++)
 8003dba:	3401      	adds	r4, #1
         HAL_Delay(1);
 8003dbc:	f7fd f976 	bl	80010ac <HAL_Delay>
	for(int d = 0; d < len; d++)
 8003dc0:	2ca0      	cmp	r4, #160	; 0xa0
 8003dc2:	d1df      	bne.n	8003d84 <potentiometer_calibration+0x3c>
	}


	linear_regression(len, ress, degs, &RTD_a, &RTD_b);
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <potentiometer_calibration+0xa4>)
 8003dc6:	462a      	mov	r2, r5
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <potentiometer_calibration+0xa8>)
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f7ff fc3d 	bl	800364e <linear_regression>
    HAL_Delay(10);
 8003dd4:	200a      	movs	r0, #10
 8003dd6:	f7fd f969 	bl	80010ac <HAL_Delay>
}
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	c2200000 	.word	0xc2200000
 8003de4:	200000ac 	.word	0x200000ac
 8003de8:	20000190 	.word	0x20000190
 8003dec:	2000001c 	.word	0x2000001c
 8003df0:	20000018 	.word	0x20000018
 8003df4:	3f480000 	.word	0x3f480000

08003df8 <IMU_get_acc>:
	return current_angle;
}


float IMU_get_acc(int axis)
{
 8003df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	  volatile float result = 0.0;
 8003dfa:	2300      	movs	r3, #0
{
 8003dfc:	4605      	mov	r5, r0
	  SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 8003dfe:	4c0f      	ldr	r4, [pc, #60]	; (8003e3c <IMU_get_acc+0x44>)
 8003e00:	480f      	ldr	r0, [pc, #60]	; (8003e40 <IMU_get_acc+0x48>)
 8003e02:	4621      	mov	r1, r4
	  volatile float result = 0.0;
 8003e04:	9301      	str	r3, [sp, #4]
	  SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 8003e06:	f7ff fdb0 	bl	800396a <SD_MPU6050_ReadAccelerometer>
 //     HAL_Delay(10);

	  if(axis == X_AXIS)
 8003e0a:	2d01      	cmp	r5, #1
 8003e0c:	d10b      	bne.n	8003e26 <IMU_get_acc+0x2e>
	  {
		  result=(float)mpu1.Accelerometer_X/MPU_AK;
 8003e0e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
	  {
		  result=(float)mpu1.Accelerometer_Y/MPU_AK;
	  }
	  if(axis == Z_AXIS)
	  {
		  result=(float)mpu1.Accelerometer_Z/MPU_AK;
 8003e12:	f7fc fea3 	bl	8000b5c <__aeabi_i2f>
 8003e16:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8003e1a:	f7fc fef3 	bl	8000c04 <__aeabi_fmul>
 8003e1e:	9001      	str	r0, [sp, #4]
	  }
	  return result;
 8003e20:	9801      	ldr	r0, [sp, #4]

}
 8003e22:	b003      	add	sp, #12
 8003e24:	bd30      	pop	{r4, r5, pc}
	  if(axis == Y_AXIS)
 8003e26:	2d02      	cmp	r5, #2
 8003e28:	d102      	bne.n	8003e30 <IMU_get_acc+0x38>
		  result=(float)mpu1.Accelerometer_Y/MPU_AK;
 8003e2a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8003e2e:	e7f0      	b.n	8003e12 <IMU_get_acc+0x1a>
	  if(axis == Z_AXIS)
 8003e30:	2d03      	cmp	r5, #3
 8003e32:	d1f5      	bne.n	8003e20 <IMU_get_acc+0x28>
		  result=(float)mpu1.Accelerometer_Z/MPU_AK;
 8003e34:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8003e38:	e7eb      	b.n	8003e12 <IMU_get_acc+0x1a>
 8003e3a:	bf00      	nop
 8003e3c:	200002c8 	.word	0x200002c8
 8003e40:	20000204 	.word	0x20000204

08003e44 <IMU_get_gyro>:

float IMU_get_gyro(int axis)
{
 8003e44:	b537      	push	{r0, r1, r2, r4, r5, lr}

	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 8003e46:	4c0f      	ldr	r4, [pc, #60]	; (8003e84 <IMU_get_gyro+0x40>)
{
 8003e48:	4605      	mov	r5, r0
	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	480e      	ldr	r0, [pc, #56]	; (8003e88 <IMU_get_gyro+0x44>)
 8003e4e:	f7ff fdc5 	bl	80039dc <SD_MPU6050_ReadGyroscope>
	  volatile float result = 0.0;
 8003e52:	2300      	movs	r3, #0
	  if(axis == X_AXIS)
 8003e54:	2d01      	cmp	r5, #1
	  volatile float result = 0.0;
 8003e56:	9301      	str	r3, [sp, #4]
	  if(axis == X_AXIS)
 8003e58:	d10a      	bne.n	8003e70 <IMU_get_gyro+0x2c>
	  {
		  result = (float)mpu1.Gyroscope_X/MPU_GK;
 8003e5a:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
	  {
		  result =(float)mpu1.Gyroscope_Y/MPU_GK;
	  }
	  if(axis == Z_AXIS)
	  {
		  result = (float)mpu1.Gyroscope_Z/MPU_GK;
 8003e5e:	f7fc fe7d 	bl	8000b5c <__aeabi_i2f>
 8003e62:	490a      	ldr	r1, [pc, #40]	; (8003e8c <IMU_get_gyro+0x48>)
 8003e64:	f7fc ff82 	bl	8000d6c <__aeabi_fdiv>
 8003e68:	9001      	str	r0, [sp, #4]
	  }
	  return result;
 8003e6a:	9801      	ldr	r0, [sp, #4]

}
 8003e6c:	b003      	add	sp, #12
 8003e6e:	bd30      	pop	{r4, r5, pc}
	  if(axis == Y_AXIS)
 8003e70:	2d02      	cmp	r5, #2
 8003e72:	d102      	bne.n	8003e7a <IMU_get_gyro+0x36>
		  result =(float)mpu1.Gyroscope_Y/MPU_GK;
 8003e74:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8003e78:	e7f1      	b.n	8003e5e <IMU_get_gyro+0x1a>
	  if(axis == Z_AXIS)
 8003e7a:	2d03      	cmp	r5, #3
 8003e7c:	d1f5      	bne.n	8003e6a <IMU_get_gyro+0x26>
		  result = (float)mpu1.Gyroscope_Z/MPU_GK;
 8003e7e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8003e82:	e7ec      	b.n	8003e5e <IMU_get_gyro+0x1a>
 8003e84:	200002c8 	.word	0x200002c8
 8003e88:	20000204 	.word	0x20000204
 8003e8c:	43030000 	.word	0x43030000

08003e90 <angle_from_acc>:
	  return mpu1.Temperature;
}


float angle_from_acc(int axis)
{
 8003e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003e92:	4604      	mov	r4, r0
	volatile float accx,accy,accz;
	volatile float angle;


	accx = IMU_get_acc(X_AXIS);
 8003e94:	2001      	movs	r0, #1
 8003e96:	f7ff ffaf 	bl	8003df8 <IMU_get_acc>
 8003e9a:	9000      	str	r0, [sp, #0]
	accy = IMU_get_acc(Y_AXIS);
 8003e9c:	2002      	movs	r0, #2
 8003e9e:	f7ff ffab 	bl	8003df8 <IMU_get_acc>
 8003ea2:	9001      	str	r0, [sp, #4]
	accz = IMU_get_acc(Z_AXIS);
 8003ea4:	2003      	movs	r0, #3
 8003ea6:	f7ff ffa7 	bl	8003df8 <IMU_get_acc>


		if (axis==X_AXIS)
 8003eaa:	2c01      	cmp	r4, #1
	accz = IMU_get_acc(Z_AXIS);
 8003eac:	9002      	str	r0, [sp, #8]
		if (axis==X_AXIS)
 8003eae:	d11a      	bne.n	8003ee6 <angle_from_acc+0x56>
		{
//			angle = sqrtf(accy*accy + accz*accz);
//			angle = accx/angle;
//			angle = RAD_TO_DEG*atanf(angle);
			angle = RAD_TO_DEG*atanf(accx/hypotf(accy, accz));
 8003eb0:	9c00      	ldr	r4, [sp, #0]
 8003eb2:	9801      	ldr	r0, [sp, #4]
		if (axis==Y_AXIS)
		{
//			angle = sqrtf(accx*accx + accz*accz);
//			angle = accy/angle;
//			angle = RAD_TO_DEG*atanf(angle);
			angle = RAD_TO_DEG*atanf(accy/hypotf(accx, accz));
 8003eb4:	9902      	ldr	r1, [sp, #8]
		if (axis==Z_AXIS)
		{
//			angle = sqrtf(accy*accy + accx*accx);
//			angle = angle/accz;
//			angle = RAD_TO_DEG*atanf(angle);
			angle = RAD_TO_DEG*atanf(accz/hypotf(accx, accy));
 8003eb6:	f000 fd5d 	bl	8004974 <hypotf>
 8003eba:	4601      	mov	r1, r0
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f7fc ff55 	bl	8000d6c <__aeabi_fdiv>
 8003ec2:	f000 fc43 	bl	800474c <atanf>
 8003ec6:	f7fc fab1 	bl	800042c <__aeabi_f2d>
 8003eca:	a30d      	add	r3, pc, #52	; (adr r3, 8003f00 <angle_from_acc+0x70>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f7fc fb00 	bl	80004d4 <__aeabi_dmul>
 8003ed4:	f7fc fd38 	bl	8000948 <__aeabi_d2f>
 8003ed8:	9003      	str	r0, [sp, #12]
		}




	HAL_Delay(10);
 8003eda:	200a      	movs	r0, #10
 8003edc:	f7fd f8e6 	bl	80010ac <HAL_Delay>
	return angle;
 8003ee0:	9803      	ldr	r0, [sp, #12]
}
 8003ee2:	b004      	add	sp, #16
 8003ee4:	bd10      	pop	{r4, pc}
		if (axis==Y_AXIS)
 8003ee6:	2c02      	cmp	r4, #2
 8003ee8:	d102      	bne.n	8003ef0 <angle_from_acc+0x60>
			angle = RAD_TO_DEG*atanf(accy/hypotf(accx, accz));
 8003eea:	9c01      	ldr	r4, [sp, #4]
 8003eec:	9800      	ldr	r0, [sp, #0]
 8003eee:	e7e1      	b.n	8003eb4 <angle_from_acc+0x24>
		if (axis==Z_AXIS)
 8003ef0:	2c03      	cmp	r4, #3
 8003ef2:	d1f2      	bne.n	8003eda <angle_from_acc+0x4a>
			angle = RAD_TO_DEG*atanf(accz/hypotf(accx, accy));
 8003ef4:	9c02      	ldr	r4, [sp, #8]
 8003ef6:	9800      	ldr	r0, [sp, #0]
 8003ef8:	9901      	ldr	r1, [sp, #4]
 8003efa:	e7dc      	b.n	8003eb6 <angle_from_acc+0x26>
 8003efc:	f3af 8000 	nop.w
 8003f00:	e564768a 	.word	0xe564768a
 8003f04:	404ca5db 	.word	0x404ca5db

08003f08 <get_microseconds_since_begin>:
}

int get_microseconds_since_begin(uint32_t startTick)
{
	  //new_tick = DWT->CYCCNT;
	  int tick= (int)DWT->CYCCNT - startTick;
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <get_microseconds_since_begin+0x30>)
{
 8003f0a:	b510      	push	{r4, lr}
	  int tick= (int)DWT->CYCCNT - startTick;
 8003f0c:	685c      	ldr	r4, [r3, #4]
	  int divider=(int)(SystemCoreClock/1e6);
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <get_microseconds_since_begin+0x34>)
	  int tick= (int)DWT->CYCCNT - startTick;
 8003f10:	1a24      	subs	r4, r4, r0
	  int divider=(int)(SystemCoreClock/1e6);
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	f7fc fa68 	bl	80003e8 <__aeabi_ui2d>
 8003f18:	a305      	add	r3, pc, #20	; (adr r3, 8003f30 <get_microseconds_since_begin+0x28>)
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f7fc fc03 	bl	8000728 <__aeabi_ddiv>
 8003f22:	f7fc fce9 	bl	80008f8 <__aeabi_d2iz>
	  tick=tick/divider;
	  return tick;
}
 8003f26:	fb94 f0f0 	sdiv	r0, r4, r0
 8003f2a:	bd10      	pop	{r4, pc}
 8003f2c:	f3af 8000 	nop.w
 8003f30:	00000000 	.word	0x00000000
 8003f34:	412e8480 	.word	0x412e8480
 8003f38:	e0001000 	.word	0xe0001000
 8003f3c:	20000024 	.word	0x20000024

08003f40 <angle_from_gyro>:
{
 8003f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f42:	460c      	mov	r4, r1
 8003f44:	4605      	mov	r5, r0
	g_struct->time=get_microseconds_since_begin(g_struct->start_tick);
 8003f46:	6808      	ldr	r0, [r1, #0]
 8003f48:	f7ff ffde 	bl	8003f08 <get_microseconds_since_begin>
	volatile float dt = (float)((g_struct->time - g_struct->last_time)*1e-6);
 8003f4c:	6863      	ldr	r3, [r4, #4]
	g_struct->time=get_microseconds_since_begin(g_struct->start_tick);
 8003f4e:	60a0      	str	r0, [r4, #8]
	volatile float dt = (float)((g_struct->time - g_struct->last_time)*1e-6);
 8003f50:	1ac0      	subs	r0, r0, r3
 8003f52:	f7fc fa59 	bl	8000408 <__aeabi_i2d>
 8003f56:	a31e      	add	r3, pc, #120	; (adr r3, 8003fd0 <angle_from_gyro+0x90>)
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f7fc faba 	bl	80004d4 <__aeabi_dmul>
 8003f60:	f7fc fcf2 	bl	8000948 <__aeabi_d2f>
 8003f64:	9001      	str	r0, [sp, #4]
	dt= fabs(dt);
 8003f66:	9b01      	ldr	r3, [sp, #4]
	g_struct->last_time=get_microseconds_since_begin(g_struct->start_tick);
 8003f68:	6820      	ldr	r0, [r4, #0]
	dt= fabs(dt);
 8003f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f6e:	9301      	str	r3, [sp, #4]
	g_struct->last_time=get_microseconds_since_begin(g_struct->start_tick);
 8003f70:	f7ff ffca 	bl	8003f08 <get_microseconds_since_begin>
	if(axis == X_AXIS)
 8003f74:	2d01      	cmp	r5, #1
	g_struct->last_time=get_microseconds_since_begin(g_struct->start_tick);
 8003f76:	6060      	str	r0, [r4, #4]
	if(axis == X_AXIS)
 8003f78:	d10c      	bne.n	8003f94 <angle_from_gyro+0x54>
		g_struct->ax=g_struct->ax+IMU_get_gyro(axis)*dt;
 8003f7a:	68e6      	ldr	r6, [r4, #12]
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7ff ff61 	bl	8003e44 <IMU_get_gyro>
 8003f82:	9901      	ldr	r1, [sp, #4]
 8003f84:	f7fc fe3e 	bl	8000c04 <__aeabi_fmul>
 8003f88:	4631      	mov	r1, r6
 8003f8a:	f7fc fd33 	bl	80009f4 <__addsf3>
 8003f8e:	60e0      	str	r0, [r4, #12]
}
 8003f90:	b002      	add	sp, #8
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
	else if(axis == Y_AXIS)
 8003f94:	2d02      	cmp	r5, #2
 8003f96:	d10b      	bne.n	8003fb0 <angle_from_gyro+0x70>
		g_struct->ay=g_struct->ay+IMU_get_gyro(axis)*dt;
 8003f98:	6926      	ldr	r6, [r4, #16]
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f7ff ff52 	bl	8003e44 <IMU_get_gyro>
 8003fa0:	9901      	ldr	r1, [sp, #4]
 8003fa2:	f7fc fe2f 	bl	8000c04 <__aeabi_fmul>
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	f7fc fd24 	bl	80009f4 <__addsf3>
 8003fac:	6120      	str	r0, [r4, #16]
		return g_struct->ay;
 8003fae:	e7ef      	b.n	8003f90 <angle_from_gyro+0x50>
	else if(axis == Z_AXIS)
 8003fb0:	2d03      	cmp	r5, #3
 8003fb2:	d1ed      	bne.n	8003f90 <angle_from_gyro+0x50>
		g_struct->az=g_struct->az+IMU_get_gyro(axis)*dt;
 8003fb4:	6966      	ldr	r6, [r4, #20]
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f7ff ff44 	bl	8003e44 <IMU_get_gyro>
 8003fbc:	9901      	ldr	r1, [sp, #4]
 8003fbe:	f7fc fe21 	bl	8000c04 <__aeabi_fmul>
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	f7fc fd16 	bl	80009f4 <__addsf3>
 8003fc8:	6160      	str	r0, [r4, #20]
		return g_struct->az;
 8003fca:	e7e1      	b.n	8003f90 <angle_from_gyro+0x50>
 8003fcc:	f3af 8000 	nop.w
 8003fd0:	a0b5ed8d 	.word	0xa0b5ed8d
 8003fd4:	3eb0c6f7 	.word	0x3eb0c6f7

08003fd8 <complementary_filter>:
{
 8003fd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	volatile float k = *CFK;
 8003fda:	680b      	ldr	r3, [r1, #0]
{
 8003fdc:	4615      	mov	r5, r2
	volatile float k = *CFK;
 8003fde:	9300      	str	r3, [sp, #0]
	volatile float angle_acc, angle_gyro = 0;
 8003fe0:	2300      	movs	r3, #0
{
 8003fe2:	4604      	mov	r4, r0
	volatile float angle_acc, angle_gyro = 0;
 8003fe4:	9302      	str	r3, [sp, #8]
    volatile float angle = 0;
 8003fe6:	9303      	str	r3, [sp, #12]
	angle_acc = angle_from_acc(axis);
 8003fe8:	f7ff ff52 	bl	8003e90 <angle_from_acc>
	angle_gyro = angle_from_gyro(axis, g_struct);
 8003fec:	4629      	mov	r1, r5
	angle_acc = angle_from_acc(axis);
 8003fee:	9001      	str	r0, [sp, #4]
	angle_gyro = angle_from_gyro(axis, g_struct);
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7ff ffa5 	bl	8003f40 <angle_from_gyro>
 8003ff6:	9002      	str	r0, [sp, #8]
    angle= angle_gyro*(1-k)+angle_acc*k;
 8003ff8:	9900      	ldr	r1, [sp, #0]
 8003ffa:	9c02      	ldr	r4, [sp, #8]
 8003ffc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004000:	f7fc fcf6 	bl	80009f0 <__aeabi_fsub>
 8004004:	4621      	mov	r1, r4
 8004006:	f7fc fdfd 	bl	8000c04 <__aeabi_fmul>
 800400a:	9d01      	ldr	r5, [sp, #4]
 800400c:	9e00      	ldr	r6, [sp, #0]
 800400e:	4604      	mov	r4, r0
 8004010:	4631      	mov	r1, r6
 8004012:	4628      	mov	r0, r5
 8004014:	f7fc fdf6 	bl	8000c04 <__aeabi_fmul>
 8004018:	4601      	mov	r1, r0
 800401a:	4620      	mov	r0, r4
 800401c:	f7fc fcea 	bl	80009f4 <__addsf3>
 8004020:	9003      	str	r0, [sp, #12]
	return angle;
 8004022:	9803      	ldr	r0, [sp, #12]
}
 8004024:	b004      	add	sp, #16
 8004026:	bd70      	pop	{r4, r5, r6, pc}

08004028 <stabilize_by_pid>:
{
 8004028:	b530      	push	{r4, r5, lr}
	  imu_angle = complementary_filter(Z_AXIS, &CFK, &gyro_angles);
 800402a:	4916      	ldr	r1, [pc, #88]	; (8004084 <stabilize_by_pid+0x5c>)
{
 800402c:	b085      	sub	sp, #20
 800402e:	4604      	mov	r4, r0
	  imu_angle = complementary_filter(Z_AXIS, &CFK, &gyro_angles);
 8004030:	4a15      	ldr	r2, [pc, #84]	; (8004088 <stabilize_by_pid+0x60>)
 8004032:	2003      	movs	r0, #3
 8004034:	f7ff ffd0 	bl	8003fd8 <complementary_filter>
	  if(imu_angle > IMU_MAX_ANGLE)
 8004038:	4d14      	ldr	r5, [pc, #80]	; (800408c <stabilize_by_pid+0x64>)
	  imu_angle = complementary_filter(Z_AXIS, &CFK, &gyro_angles);
 800403a:	9002      	str	r0, [sp, #8]
	  if(imu_angle > IMU_MAX_ANGLE)
 800403c:	9802      	ldr	r0, [sp, #8]
 800403e:	4629      	mov	r1, r5
 8004040:	f7fc ff9c 	bl	8000f7c <__aeabi_fcmpgt>
 8004044:	b100      	cbz	r0, 8004048 <stabilize_by_pid+0x20>
		  imu_angle = IMU_MAX_ANGLE;
 8004046:	9502      	str	r5, [sp, #8]
	  if(imu_angle < IMU_MIN_ANGLE)
 8004048:	4d11      	ldr	r5, [pc, #68]	; (8004090 <stabilize_by_pid+0x68>)
 800404a:	9802      	ldr	r0, [sp, #8]
 800404c:	4629      	mov	r1, r5
 800404e:	f7fc ff77 	bl	8000f40 <__aeabi_fcmplt>
 8004052:	b100      	cbz	r0, 8004056 <stabilize_by_pid+0x2e>
		  imu_angle = IMU_MIN_ANGLE;
 8004054:	9502      	str	r5, [sp, #8]
	  imu_angle = imu_angle*ITS_B + ITS_A;
 8004056:	9802      	ldr	r0, [sp, #8]
 8004058:	2100      	movs	r1, #0
 800405a:	f7fc fccb 	bl	80009f4 <__addsf3>
 800405e:	9002      	str	r0, [sp, #8]
	  pid_error = PID_struct->hold - imu_angle;
 8004060:	9902      	ldr	r1, [sp, #8]
 8004062:	68e0      	ldr	r0, [r4, #12]
 8004064:	f7fc fcc4 	bl	80009f0 <__aeabi_fsub>
 8004068:	9001      	str	r0, [sp, #4]
	  PID(PID_struct, pid_error);
 800406a:	9901      	ldr	r1, [sp, #4]
 800406c:	4620      	mov	r0, r4
 800406e:	f7ff fb52 	bl	8003716 <PID>
	  set = PID_struct->out;
 8004072:	6923      	ldr	r3, [r4, #16]
 8004074:	9303      	str	r3, [sp, #12]
	  servo_set_position(set);
 8004076:	9803      	ldr	r0, [sp, #12]
 8004078:	f7ff fe32 	bl	8003ce0 <servo_set_position>
	  return set;
 800407c:	9803      	ldr	r0, [sp, #12]
}
 800407e:	b005      	add	sp, #20
 8004080:	bd30      	pop	{r4, r5, pc}
 8004082:	bf00      	nop
 8004084:	20000010 	.word	0x20000010
 8004088:	200002a8 	.word	0x200002a8
 800408c:	42200000 	.word	0x42200000
 8004090:	c2200000 	.word	0xc2200000

08004094 <GYRO_struct_init>:
}

ANG_GYROtypedef* GYRO_struct_init(ANG_GYROtypedef* gyro_data)
{

	gyro_data->time = 0;
 8004094:	2300      	movs	r3, #0
{
 8004096:	b510      	push	{r4, lr}
	gyro_data->time = 0;
 8004098:	6083      	str	r3, [r0, #8]
	gyro_data->last_time = 0;
 800409a:	6043      	str	r3, [r0, #4]
	gyro_data->start_tick=DWT->CYCCNT;
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <GYRO_struct_init+0x2c>)
{
 800409e:	4604      	mov	r4, r0
	gyro_data->start_tick=DWT->CYCCNT;
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	6003      	str	r3, [r0, #0]
//	gyro_data->us_dt=delay_us;
	gyro_data->ax = angle_from_acc(X_AXIS);
 80040a4:	2001      	movs	r0, #1
 80040a6:	f7ff fef3 	bl	8003e90 <angle_from_acc>
 80040aa:	60e0      	str	r0, [r4, #12]
	gyro_data->ay = angle_from_acc(Y_AXIS);
 80040ac:	2002      	movs	r0, #2
 80040ae:	f7ff feef 	bl	8003e90 <angle_from_acc>
 80040b2:	6120      	str	r0, [r4, #16]
	gyro_data->az = angle_from_acc(Z_AXIS);
 80040b4:	2003      	movs	r0, #3
 80040b6:	f7ff feeb 	bl	8003e90 <angle_from_acc>
 80040ba:	6160      	str	r0, [r4, #20]
	return gyro_data;
}
 80040bc:	4620      	mov	r0, r4
 80040be:	bd10      	pop	{r4, pc}
 80040c0:	e0001000 	.word	0xe0001000

080040c4 <main>:
{
 80040c4:	b583      	push	{r0, r1, r7, lr}
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80040c6:	4c4e      	ldr	r4, [pc, #312]	; (8004200 <main+0x13c>)
  HAL_Init();
 80040c8:	f7fc ffcc 	bl	8001064 <HAL_Init>
  SystemClock_Config();
 80040cc:	f7ff fdc8 	bl	8003c60 <SystemClock_Config>
  MX_GPIO_Init();
 80040d0:	f7ff fd48 	bl	8003b64 <MX_GPIO_Init>
  MX_DMA_Init();
 80040d4:	f7ff fd2e 	bl	8003b34 <MX_DMA_Init>
  MX_I2C1_Init();
 80040d8:	f7ff fd66 	bl	8003ba8 <MX_I2C1_Init>
  MX_TIM4_Init();
 80040dc:	f000 f9ca 	bl	8004474 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80040e0:	f000 fa1a 	bl	8004518 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80040e4:	f7ff fcb4 	bl	8003a50 <MX_ADC1_Init>
  MX_TIM1_Init();
 80040e8:	f000 f934 	bl	8004354 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80040ec:	2100      	movs	r1, #0
 80040ee:	4845      	ldr	r0, [pc, #276]	; (8004204 <main+0x140>)
 80040f0:	f7fe ff1e 	bl	8002f30 <HAL_TIM_PWM_Start>
  DWT_Init();
 80040f4:	f7ff fa20 	bl	8003538 <DWT_Init>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80040f8:	6822      	ldr	r2, [r4, #0]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 80040fa:	4943      	ldr	r1, [pc, #268]	; (8004208 <main+0x144>)
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80040fc:	68d3      	ldr	r3, [r2, #12]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 80040fe:	4843      	ldr	r0, [pc, #268]	; (800420c <main+0x148>)
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	60d3      	str	r3, [r2, #12]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8004106:	2201      	movs	r2, #1
 8004108:	f7fd f8da 	bl	80012c0 <HAL_ADC_Start_DMA>
  UART_Transmit_string(&huart1, idn, 10);
 800410c:	4620      	mov	r0, r4
  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,
 800410e:	2400      	movs	r4, #0
  UART_Transmit_string(&huart1, idn, 10);
 8004110:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <main+0x14c>)
  servo_set_position(pid_hold);
 8004112:	4e40      	ldr	r6, [pc, #256]	; (8004214 <main+0x150>)
  UART_Transmit_string(&huart1, idn, 10);
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	220a      	movs	r2, #10
 8004118:	f7ff f993 	bl	8003442 <UART_Transmit_string>
  servo_set_position(pid_hold);
 800411c:	6830      	ldr	r0, [r6, #0]
 800411e:	f7ff fddf 	bl	8003ce0 <servo_set_position>
  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,
 8004122:	4623      	mov	r3, r4
 8004124:	4622      	mov	r2, r4
 8004126:	9400      	str	r4, [sp, #0]
 8004128:	493b      	ldr	r1, [pc, #236]	; (8004218 <main+0x154>)
 800412a:	483c      	ldr	r0, [pc, #240]	; (800421c <main+0x158>)
 800412c:	f7ff fbca 	bl	80038c4 <SD_MPU6050_Init>
 8004130:	4d3b      	ldr	r5, [pc, #236]	; (8004220 <main+0x15c>)
  result = SD_MPU6050_SetDataRate(&hi2c1,&mpu1,
 8004132:	4622      	mov	r2, r4
 8004134:	4938      	ldr	r1, [pc, #224]	; (8004218 <main+0x154>)
  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,
 8004136:	7028      	strb	r0, [r5, #0]
  result = SD_MPU6050_SetDataRate(&hi2c1,&mpu1,
 8004138:	4838      	ldr	r0, [pc, #224]	; (800421c <main+0x158>)
 800413a:	f7ff fb05 	bl	8003748 <SD_MPU6050_SetDataRate>
 800413e:	7028      	strb	r0, [r5, #0]
  HAL_Delay(500);
 8004140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004144:	f7fc ffb2 	bl	80010ac <HAL_Delay>
  gyro_angles=*GYRO_struct_init(&gyro_angles);
 8004148:	4836      	ldr	r0, [pc, #216]	; (8004224 <main+0x160>)
 800414a:	f7ff ffa3 	bl	8004094 <GYRO_struct_init>
 800414e:	4605      	mov	r5, r0
 8004150:	4c34      	ldr	r4, [pc, #208]	; (8004224 <main+0x160>)
 8004152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  a =pid_hold;
 8004156:	4f34      	ldr	r7, [pc, #208]	; (8004228 <main+0x164>)
 8004158:	6833      	ldr	r3, [r6, #0]
  gyro_angles=*GYRO_struct_init(&gyro_angles);
 800415a:	e895 0003 	ldmia.w	r5, {r0, r1}
  a =pid_hold;
 800415e:	603b      	str	r3, [r7, #0]
  gyro_angles=*GYRO_struct_init(&gyro_angles);
 8004160:	e884 0003 	stmia.w	r4, {r0, r1}
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <main+0x168>)
 8004166:	9600      	str	r6, [sp, #0]
 8004168:	4a31      	ldr	r2, [pc, #196]	; (8004230 <main+0x16c>)
 800416a:	4932      	ldr	r1, [pc, #200]	; (8004234 <main+0x170>)
 800416c:	4832      	ldr	r0, [pc, #200]	; (8004238 <main+0x174>)
 800416e:	f7ff faab 	bl	80036c8 <PID_init>
 8004172:	4605      	mov	r5, r0
 8004174:	4c30      	ldr	r4, [pc, #192]	; (8004238 <main+0x174>)
 8004176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	463d      	mov	r5, r7
 8004182:	6023      	str	r3, [r4, #0]
	  if(strcmp(uart_string, "calibr:start\r") == 0)
 8004184:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004250 <main+0x18c>
 8004188:	4c2c      	ldr	r4, [pc, #176]	; (800423c <main+0x178>)
	  if(uart_buffer[uart_rx_counter-1] == '\r')
 800418a:	4e2d      	ldr	r6, [pc, #180]	; (8004240 <main+0x17c>)
		  strcpy(uart_string, "");
 800418c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8004254 <main+0x190>
	  if(strcmp(uart_string, "calibr:start\r") == 0)
 8004190:	4649      	mov	r1, r9
 8004192:	4620      	mov	r0, r4
 8004194:	f7fb ffdc 	bl	8000150 <strcmp>
 8004198:	b928      	cbnz	r0, 80041a6 <main+0xe2>
		  potentiometer_calibration();
 800419a:	f7ff fdd5 	bl	8003d48 <potentiometer_calibration>
		  strcpy(uart_string, "");
 800419e:	4641      	mov	r1, r8
 80041a0:	4620      	mov	r0, r4
 80041a2:	f000 fa8b 	bl	80046bc <strcpy>
	  if(strcmp(uart_string, "tracking:start\r") == 0)
 80041a6:	4927      	ldr	r1, [pc, #156]	; (8004244 <main+0x180>)
 80041a8:	4620      	mov	r0, r4
 80041aa:	f7fb ffd1 	bl	8000150 <strcmp>
 80041ae:	b940      	cbnz	r0, 80041c2 <main+0xfe>
		  a = stabilize_by_pid(&gst_pid);
 80041b0:	4821      	ldr	r0, [pc, #132]	; (8004238 <main+0x174>)
 80041b2:	f7ff ff39 	bl	8004028 <stabilize_by_pid>
		  UART_send_float(&huart1, a, 10);
 80041b6:	220a      	movs	r2, #10
		  a = stabilize_by_pid(&gst_pid);
 80041b8:	4601      	mov	r1, r0
 80041ba:	6028      	str	r0, [r5, #0]
		  UART_send_float(&huart1, a, 10);
 80041bc:	4810      	ldr	r0, [pc, #64]	; (8004200 <main+0x13c>)
 80041be:	f7ff f96f 	bl	80034a0 <UART_send_float>
	  if(strcmp(uart_string, "tracking:stop\r") == 0)
 80041c2:	4921      	ldr	r1, [pc, #132]	; (8004248 <main+0x184>)
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7fb ffc3 	bl	8000150 <strcmp>
 80041ca:	b918      	cbnz	r0, 80041d4 <main+0x110>
		  strcpy(uart_string, "");
 80041cc:	4641      	mov	r1, r8
 80041ce:	4620      	mov	r0, r4
 80041d0:	f000 fa74 	bl	80046bc <strcpy>
	  if(uart_buffer[uart_rx_counter-1] == '\r')
 80041d4:	4f1d      	ldr	r7, [pc, #116]	; (800424c <main+0x188>)
 80041d6:	783b      	ldrb	r3, [r7, #0]
 80041d8:	4433      	add	r3, r6
 80041da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80041de:	2b0d      	cmp	r3, #13
 80041e0:	d1d6      	bne.n	8004190 <main+0xcc>
		  strcpy(uart_string, uart_buffer);
 80041e2:	4631      	mov	r1, r6
 80041e4:	4620      	mov	r0, r4
 80041e6:	f000 fa69 	bl	80046bc <strcpy>
		  uart_rx_counter=0;
 80041ea:	2300      	movs	r3, #0
		  clear_uart_buffer(100, uart_buffer);
 80041ec:	4631      	mov	r1, r6
 80041ee:	2064      	movs	r0, #100	; 0x64
		  uart_rx_counter=0;
 80041f0:	703b      	strb	r3, [r7, #0]
		  clear_uart_buffer(100, uart_buffer);
 80041f2:	f7ff f91b 	bl	800342c <clear_uart_buffer>
		  HAL_Delay(1);
 80041f6:	2001      	movs	r0, #1
 80041f8:	f7fc ff58 	bl	80010ac <HAL_Delay>
 80041fc:	e7c6      	b.n	800418c <main+0xc8>
 80041fe:	bf00      	nop
 8004200:	20000364 	.word	0x20000364
 8004204:	200002e4 	.word	0x200002e4
 8004208:	200000ac 	.word	0x200000ac
 800420c:	20000190 	.word	0x20000190
 8004210:	20000020 	.word	0x20000020
 8004214:	200000bc 	.word	0x200000bc
 8004218:	200002c8 	.word	0x200002c8
 800421c:	20000204 	.word	0x20000204
 8004220:	200002a4 	.word	0x200002a4
 8004224:	200002a8 	.word	0x200002a8
 8004228:	200000b8 	.word	0x200000b8
 800422c:	200000b0 	.word	0x200000b0
 8004230:	200000b4 	.word	0x200000b4
 8004234:	20000014 	.word	0x20000014
 8004238:	20000280 	.word	0x20000280
 800423c:	20000125 	.word	0x20000125
 8004240:	200000c0 	.word	0x200000c0
 8004244:	08004c92 	.word	0x08004c92
 8004248:	08004ca2 	.word	0x08004ca2
 800424c:	20000124 	.word	0x20000124
 8004250:	08004c84 	.word	0x08004c84
 8004254:	08004cb0 	.word	0x08004cb0

08004258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004258:	4770      	bx	lr
	...

0800425c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <HAL_MspInit+0x3c>)
{
 800425e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	619a      	str	r2, [r3, #24]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	f002 0201 	and.w	r2, r2, #1
 800426e:	9200      	str	r2, [sp, #0]
 8004270:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004278:	61da      	str	r2, [r3, #28]
 800427a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800427c:	4a07      	ldr	r2, [pc, #28]	; (800429c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004286:	6853      	ldr	r3, [r2, #4]
 8004288:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800428c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004292:	b002      	add	sp, #8
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	40010000 	.word	0x40010000

080042a0 <NMI_Handler>:
 80042a0:	4770      	bx	lr

080042a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042a2:	e7fe      	b.n	80042a2 <HardFault_Handler>

080042a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042a4:	e7fe      	b.n	80042a4 <MemManage_Handler>

080042a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042a6:	e7fe      	b.n	80042a6 <BusFault_Handler>

080042a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042a8:	e7fe      	b.n	80042a8 <UsageFault_Handler>

080042aa <SVC_Handler>:
 80042aa:	4770      	bx	lr

080042ac <DebugMon_Handler>:
 80042ac:	4770      	bx	lr

080042ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ae:	4770      	bx	lr

080042b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b0:	f7fc beea 	b.w	8001088 <HAL_IncTick>

080042b4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042b4:	4801      	ldr	r0, [pc, #4]	; (80042bc <DMA1_Channel1_IRQHandler+0x8>)
 80042b6:	f7fd ba53 	b.w	8001760 <HAL_DMA_IRQHandler>
 80042ba:	bf00      	nop
 80042bc:	200001c0 	.word	0x200001c0

080042c0 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042c0:	4801      	ldr	r0, [pc, #4]	; (80042c8 <TIM1_UP_IRQHandler+0x8>)
 80042c2:	f7fe bbed 	b.w	8002aa0 <HAL_TIM_IRQHandler>
 80042c6:	bf00      	nop
 80042c8:	20000324 	.word	0x20000324

080042cc <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80042cc:	4801      	ldr	r0, [pc, #4]	; (80042d4 <TIM4_IRQHandler+0x8>)
 80042ce:	f7fe bbe7 	b.w	8002aa0 <HAL_TIM_IRQHandler>
 80042d2:	bf00      	nop
 80042d4:	200002e4 	.word	0x200002e4

080042d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042d8:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042da:	4d08      	ldr	r5, [pc, #32]	; (80042fc <USART1_IRQHandler+0x24>)
  /* USER CODE BEGIN USART1_IRQn 1 */

  HAL_UART_Receive(&huart1, &uart_buffer[uart_rx_counter], 1, 10);
 80042dc:	4c08      	ldr	r4, [pc, #32]	; (8004300 <USART1_IRQHandler+0x28>)
  HAL_UART_IRQHandler(&huart1);
 80042de:	4628      	mov	r0, r5
 80042e0:	f7fe fffc 	bl	80032dc <HAL_UART_IRQHandler>
  HAL_UART_Receive(&huart1, &uart_buffer[uart_rx_counter], 1, 10);
 80042e4:	7821      	ldrb	r1, [r4, #0]
 80042e6:	4807      	ldr	r0, [pc, #28]	; (8004304 <USART1_IRQHandler+0x2c>)
 80042e8:	230a      	movs	r3, #10
 80042ea:	4401      	add	r1, r0
 80042ec:	2201      	movs	r2, #1
 80042ee:	4628      	mov	r0, r5
 80042f0:	f7fe ff54 	bl	800319c <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart1, &uart_buffer[uart_rx_counter], 1, 10);

  ++uart_rx_counter;
 80042f4:	7823      	ldrb	r3, [r4, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	7023      	strb	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	20000364 	.word	0x20000364
 8004300:	20000124 	.word	0x20000124
 8004304:	200000c0 	.word	0x200000c0

08004308 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004308:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <SystemInit+0x40>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	4a0d      	ldr	r2, [pc, #52]	; (800434c <SystemInit+0x44>)
 8004316:	400a      	ands	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004320:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004324:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800432c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004334:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004336:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800433a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800433c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <SystemInit+0x48>)
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	f8ff0000 	.word	0xf8ff0000
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004356:	2210      	movs	r2, #16
 8004358:	2100      	movs	r1, #0
 800435a:	a802      	add	r0, sp, #8
 800435c:	f000 f9a6 	bl	80046ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 320;
 8004360:	f44f 72a0 	mov.w	r2, #320	; 0x140
  htim1.Instance = TIM1;
 8004364:	4814      	ldr	r0, [pc, #80]	; (80043b8 <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 320;
 8004366:	4915      	ldr	r1, [pc, #84]	; (80043bc <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004368:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 320;
 800436a:	e880 0006 	stmia.w	r0, {r1, r2}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 32000;
 800436e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	9301      	str	r3, [sp, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004376:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 32000;
 8004378:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800437a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800437c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800437e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004380:	f7fe fc68 	bl	8002c54 <HAL_TIM_Base_Init>
 8004384:	b108      	cbz	r0, 800438a <MX_TIM1_Init+0x36>
  {
    Error_Handler();
 8004386:	f7ff ff67 	bl	8004258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800438a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800438e:	a902      	add	r1, sp, #8
 8004390:	4809      	ldr	r0, [pc, #36]	; (80043b8 <MX_TIM1_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004392:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004394:	f7fe fd2a 	bl	8002dec <HAL_TIM_ConfigClockSource>
 8004398:	b108      	cbz	r0, 800439e <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 800439a:	f7ff ff5d 	bl	8004258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800439e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043a0:	4669      	mov	r1, sp
 80043a2:	4805      	ldr	r0, [pc, #20]	; (80043b8 <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043a8:	f7fe fdde 	bl	8002f68 <HAL_TIMEx_MasterConfigSynchronization>
 80043ac:	b108      	cbz	r0, 80043b2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80043ae:	f7ff ff53 	bl	8004258 <Error_Handler>
  }

}
 80043b2:	b007      	add	sp, #28
 80043b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80043b8:	20000324 	.word	0x20000324
 80043bc:	40012c00 	.word	0x40012c00

080043c0 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043c0:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 80043c2:	6803      	ldr	r3, [r0, #0]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <HAL_TIM_Base_MspInit+0x5c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d114      	bne.n	80043f4 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <HAL_TIM_Base_MspInit+0x60>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80043cc:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043d4:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80043d6:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043d8:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80043da:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80043e4:	f7fd f8ae 	bl	8001544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80043e8:	2019      	movs	r0, #25
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80043ea:	f7fd f8df 	bl	80015ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80043ee:	b003      	add	sp, #12
 80043f0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 80043f4:	4a0b      	ldr	r2, [pc, #44]	; (8004424 <HAL_TIM_Base_MspInit+0x64>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d1f9      	bne.n	80043ee <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80043fc:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	f042 0204 	orr.w	r2, r2, #4
 8004404:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004406:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004408:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800440a:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004414:	f7fd f896 	bl	8001544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004418:	201e      	movs	r0, #30
 800441a:	e7e6      	b.n	80043ea <HAL_TIM_Base_MspInit+0x2a>
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40021000 	.word	0x40021000
 8004424:	40000800 	.word	0x40000800

08004428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004428:	b510      	push	{r4, lr}
 800442a:	4604      	mov	r4, r0
 800442c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800442e:	2210      	movs	r2, #16
 8004430:	2100      	movs	r1, #0
 8004432:	a802      	add	r0, sp, #8
 8004434:	f000 f93a 	bl	80046ac <memset>
  if(timHandle->Instance==TIM4)
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	4b0c      	ldr	r3, [pc, #48]	; (800446c <HAL_TIM_MspPostInit+0x44>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d113      	bne.n	8004468 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004440:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004444:	699a      	ldr	r2, [r3, #24]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004446:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004448:	f042 0208 	orr.w	r2, r2, #8
 800444c:	619a      	str	r2, [r3, #24]
 800444e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004450:	4807      	ldr	r0, [pc, #28]	; (8004470 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800445a:	2340      	movs	r3, #64	; 0x40
 800445c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445e:	2302      	movs	r3, #2
 8004460:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004462:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004464:	f7fd fa10 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004468:	b006      	add	sp, #24
 800446a:	bd10      	pop	{r4, pc}
 800446c:	40000800 	.word	0x40000800
 8004470:	40010c00 	.word	0x40010c00

08004474 <MX_TIM4_Init>:
{
 8004474:	b510      	push	{r4, lr}
 8004476:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004478:	2210      	movs	r2, #16
 800447a:	2100      	movs	r1, #0
 800447c:	a803      	add	r0, sp, #12
 800447e:	f000 f915 	bl	80046ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004482:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004484:	221c      	movs	r2, #28
 8004486:	4621      	mov	r1, r4
 8004488:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800448c:	9401      	str	r4, [sp, #4]
 800448e:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004490:	f000 f90c 	bl	80046ac <memset>
  htim4.Init.Prescaler = 64;
 8004494:	2340      	movs	r3, #64	; 0x40
  htim4.Instance = TIM4;
 8004496:	481e      	ldr	r0, [pc, #120]	; (8004510 <MX_TIM4_Init+0x9c>)
  htim4.Init.Prescaler = 64;
 8004498:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <MX_TIM4_Init+0xa0>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800449a:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 64;
 800449c:	e880 000c 	stmia.w	r0, {r2, r3}
  htim4.Init.Period = 20000;
 80044a0:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a4:	6104      	str	r4, [r0, #16]
  htim4.Init.Period = 20000;
 80044a6:	60c3      	str	r3, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a8:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044aa:	f7fe fbd3 	bl	8002c54 <HAL_TIM_Base_Init>
 80044ae:	b108      	cbz	r0, 80044b4 <MX_TIM4_Init+0x40>
    Error_Handler();
 80044b0:	f7ff fed2 	bl	8004258 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044b8:	a903      	add	r1, sp, #12
 80044ba:	4815      	ldr	r0, [pc, #84]	; (8004510 <MX_TIM4_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044bc:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044be:	f7fe fc95 	bl	8002dec <HAL_TIM_ConfigClockSource>
 80044c2:	b108      	cbz	r0, 80044c8 <MX_TIM4_Init+0x54>
    Error_Handler();
 80044c4:	f7ff fec8 	bl	8004258 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80044c8:	4811      	ldr	r0, [pc, #68]	; (8004510 <MX_TIM4_Init+0x9c>)
 80044ca:	f7fe fbdd 	bl	8002c88 <HAL_TIM_PWM_Init>
 80044ce:	b108      	cbz	r0, 80044d4 <MX_TIM4_Init+0x60>
    Error_Handler();
 80044d0:	f7ff fec2 	bl	8004258 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044d4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044d6:	a901      	add	r1, sp, #4
 80044d8:	480d      	ldr	r0, [pc, #52]	; (8004510 <MX_TIM4_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044da:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044dc:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044de:	f7fe fd43 	bl	8002f68 <HAL_TIMEx_MasterConfigSynchronization>
 80044e2:	b108      	cbz	r0, 80044e8 <MX_TIM4_Init+0x74>
    Error_Handler();
 80044e4:	f7ff feb8 	bl	8004258 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044e8:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044ea:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ec:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 1000;
 80044ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044f2:	a907      	add	r1, sp, #28
 80044f4:	4806      	ldr	r0, [pc, #24]	; (8004510 <MX_TIM4_Init+0x9c>)
  sConfigOC.Pulse = 1000;
 80044f6:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044f8:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044fa:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044fc:	f7fe fc0a 	bl	8002d14 <HAL_TIM_PWM_ConfigChannel>
 8004500:	b108      	cbz	r0, 8004506 <MX_TIM4_Init+0x92>
    Error_Handler();
 8004502:	f7ff fea9 	bl	8004258 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8004506:	4802      	ldr	r0, [pc, #8]	; (8004510 <MX_TIM4_Init+0x9c>)
 8004508:	f7ff ff8e 	bl	8004428 <HAL_TIM_MspPostInit>
}
 800450c:	b00e      	add	sp, #56	; 0x38
 800450e:	bd10      	pop	{r4, pc}
 8004510:	200002e4 	.word	0x200002e4
 8004514:	40000800 	.word	0x40000800

08004518 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004518:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800451a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 800451e:	480a      	ldr	r0, [pc, #40]	; (8004548 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004522:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8004524:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004528:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800452a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800452c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800452e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004530:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004532:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004534:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004536:	f7fe fda7 	bl	8003088 <HAL_UART_Init>
 800453a:	b118      	cbz	r0, 8004544 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800453c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004540:	f7ff be8a 	b.w	8004258 <Error_Handler>
 8004544:	bd08      	pop	{r3, pc}
 8004546:	bf00      	nop
 8004548:	20000364 	.word	0x20000364
 800454c:	40013800 	.word	0x40013800

08004550 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004550:	b510      	push	{r4, lr}
 8004552:	4604      	mov	r4, r0
 8004554:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004556:	2210      	movs	r2, #16
 8004558:	2100      	movs	r1, #0
 800455a:	a802      	add	r0, sp, #8
 800455c:	f000 f8a6 	bl	80046ac <memset>
  if(uartHandle->Instance==USART1)
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <HAL_UART_MspInit+0x80>)
 8004564:	429a      	cmp	r2, r3
 8004566:	d130      	bne.n	80045ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004568:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800456c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800456e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8004570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004574:	619a      	str	r2, [r3, #24]
 8004576:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004578:	4816      	ldr	r0, [pc, #88]	; (80045d4 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800457a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800457e:	9200      	str	r2, [sp, #0]
 8004580:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004582:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004584:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004586:	f042 0204 	orr.w	r2, r2, #4
 800458a:	619a      	str	r2, [r3, #24]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800459a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045a0:	2303      	movs	r3, #3
 80045a2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a4:	f7fd f970 	bl	8001888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ac:	a902      	add	r1, sp, #8
 80045ae:	4809      	ldr	r0, [pc, #36]	; (80045d4 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045b2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b6:	f7fd f967 	bl	8001888 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80045ba:	2025      	movs	r0, #37	; 0x25
 80045bc:	4622      	mov	r2, r4
 80045be:	4621      	mov	r1, r4
 80045c0:	f7fc ffc0 	bl	8001544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80045c4:	2025      	movs	r0, #37	; 0x25
 80045c6:	f7fc fff1 	bl	80015ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80045ca:	b006      	add	sp, #24
 80045cc:	bd10      	pop	{r4, pc}
 80045ce:	bf00      	nop
 80045d0:	40013800 	.word	0x40013800
 80045d4:	40010800 	.word	0x40010800

080045d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80045d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80045da:	e003      	b.n	80045e4 <LoopCopyDataInit>

080045dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80045de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80045e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80045e2:	3104      	adds	r1, #4

080045e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80045e4:	480a      	ldr	r0, [pc, #40]	; (8004610 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80045e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80045ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80045ec:	d3f6      	bcc.n	80045dc <CopyDataInit>
  ldr r2, =_sbss
 80045ee:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80045f0:	e002      	b.n	80045f8 <LoopFillZerobss>

080045f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80045f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80045f4:	f842 3b04 	str.w	r3, [r2], #4

080045f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80045f8:	4b08      	ldr	r3, [pc, #32]	; (800461c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80045fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80045fc:	d3f9      	bcc.n	80045f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80045fe:	f7ff fe83 	bl	8004308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004602:	f000 f815 	bl	8004630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004606:	f7ff fd5d 	bl	80040c4 <main>
  bx lr
 800460a:	4770      	bx	lr
  ldr r3, =_sidata
 800460c:	08004d6c 	.word	0x08004d6c
  ldr r0, =_sdata
 8004610:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004614:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8004618:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 800461c:	200003a4 	.word	0x200003a4

08004620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004620:	e7fe      	b.n	8004620 <ADC1_2_IRQHandler>
	...

08004624 <__errno>:
 8004624:	4b01      	ldr	r3, [pc, #4]	; (800462c <__errno+0x8>)
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20000028 	.word	0x20000028

08004630 <__libc_init_array>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	2500      	movs	r5, #0
 8004634:	4e0c      	ldr	r6, [pc, #48]	; (8004668 <__libc_init_array+0x38>)
 8004636:	4c0d      	ldr	r4, [pc, #52]	; (800466c <__libc_init_array+0x3c>)
 8004638:	1ba4      	subs	r4, r4, r6
 800463a:	10a4      	asrs	r4, r4, #2
 800463c:	42a5      	cmp	r5, r4
 800463e:	d109      	bne.n	8004654 <__libc_init_array+0x24>
 8004640:	f000 fb0c 	bl	8004c5c <_init>
 8004644:	2500      	movs	r5, #0
 8004646:	4e0a      	ldr	r6, [pc, #40]	; (8004670 <__libc_init_array+0x40>)
 8004648:	4c0a      	ldr	r4, [pc, #40]	; (8004674 <__libc_init_array+0x44>)
 800464a:	1ba4      	subs	r4, r4, r6
 800464c:	10a4      	asrs	r4, r4, #2
 800464e:	42a5      	cmp	r5, r4
 8004650:	d105      	bne.n	800465e <__libc_init_array+0x2e>
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004658:	4798      	blx	r3
 800465a:	3501      	adds	r5, #1
 800465c:	e7ee      	b.n	800463c <__libc_init_array+0xc>
 800465e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004662:	4798      	blx	r3
 8004664:	3501      	adds	r5, #1
 8004666:	e7f2      	b.n	800464e <__libc_init_array+0x1e>
 8004668:	08004d64 	.word	0x08004d64
 800466c:	08004d64 	.word	0x08004d64
 8004670:	08004d64 	.word	0x08004d64
 8004674:	08004d68 	.word	0x08004d68

08004678 <__itoa>:
 8004678:	1e93      	subs	r3, r2, #2
 800467a:	2b22      	cmp	r3, #34	; 0x22
 800467c:	b510      	push	{r4, lr}
 800467e:	460c      	mov	r4, r1
 8004680:	d904      	bls.n	800468c <__itoa+0x14>
 8004682:	2300      	movs	r3, #0
 8004684:	461c      	mov	r4, r3
 8004686:	700b      	strb	r3, [r1, #0]
 8004688:	4620      	mov	r0, r4
 800468a:	bd10      	pop	{r4, pc}
 800468c:	2a0a      	cmp	r2, #10
 800468e:	d109      	bne.n	80046a4 <__itoa+0x2c>
 8004690:	2800      	cmp	r0, #0
 8004692:	da07      	bge.n	80046a4 <__itoa+0x2c>
 8004694:	232d      	movs	r3, #45	; 0x2d
 8004696:	700b      	strb	r3, [r1, #0]
 8004698:	2101      	movs	r1, #1
 800469a:	4240      	negs	r0, r0
 800469c:	4421      	add	r1, r4
 800469e:	f000 f815 	bl	80046cc <__utoa>
 80046a2:	e7f1      	b.n	8004688 <__itoa+0x10>
 80046a4:	2100      	movs	r1, #0
 80046a6:	e7f9      	b.n	800469c <__itoa+0x24>

080046a8 <itoa>:
 80046a8:	f7ff bfe6 	b.w	8004678 <__itoa>

080046ac <memset>:
 80046ac:	4603      	mov	r3, r0
 80046ae:	4402      	add	r2, r0
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d100      	bne.n	80046b6 <memset+0xa>
 80046b4:	4770      	bx	lr
 80046b6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ba:	e7f9      	b.n	80046b0 <memset+0x4>

080046bc <strcpy>:
 80046bc:	4603      	mov	r3, r0
 80046be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046c2:	f803 2b01 	strb.w	r2, [r3], #1
 80046c6:	2a00      	cmp	r2, #0
 80046c8:	d1f9      	bne.n	80046be <strcpy+0x2>
 80046ca:	4770      	bx	lr

080046cc <__utoa>:
 80046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ce:	b08b      	sub	sp, #44	; 0x2c
 80046d0:	4603      	mov	r3, r0
 80046d2:	460f      	mov	r7, r1
 80046d4:	466d      	mov	r5, sp
 80046d6:	4c1c      	ldr	r4, [pc, #112]	; (8004748 <__utoa+0x7c>)
 80046d8:	f104 0e20 	add.w	lr, r4, #32
 80046dc:	462e      	mov	r6, r5
 80046de:	6820      	ldr	r0, [r4, #0]
 80046e0:	6861      	ldr	r1, [r4, #4]
 80046e2:	3408      	adds	r4, #8
 80046e4:	c603      	stmia	r6!, {r0, r1}
 80046e6:	4574      	cmp	r4, lr
 80046e8:	4635      	mov	r5, r6
 80046ea:	d1f7      	bne.n	80046dc <__utoa+0x10>
 80046ec:	7921      	ldrb	r1, [r4, #4]
 80046ee:	6820      	ldr	r0, [r4, #0]
 80046f0:	7131      	strb	r1, [r6, #4]
 80046f2:	1e91      	subs	r1, r2, #2
 80046f4:	2922      	cmp	r1, #34	; 0x22
 80046f6:	6030      	str	r0, [r6, #0]
 80046f8:	f04f 0100 	mov.w	r1, #0
 80046fc:	d904      	bls.n	8004708 <__utoa+0x3c>
 80046fe:	7039      	strb	r1, [r7, #0]
 8004700:	460f      	mov	r7, r1
 8004702:	4638      	mov	r0, r7
 8004704:	b00b      	add	sp, #44	; 0x2c
 8004706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004708:	1e78      	subs	r0, r7, #1
 800470a:	4606      	mov	r6, r0
 800470c:	fbb3 f5f2 	udiv	r5, r3, r2
 8004710:	fb02 3315 	mls	r3, r2, r5, r3
 8004714:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004718:	4473      	add	r3, lr
 800471a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800471e:	1c4c      	adds	r4, r1, #1
 8004720:	f806 3f01 	strb.w	r3, [r6, #1]!
 8004724:	462b      	mov	r3, r5
 8004726:	b965      	cbnz	r5, 8004742 <__utoa+0x76>
 8004728:	553d      	strb	r5, [r7, r4]
 800472a:	187a      	adds	r2, r7, r1
 800472c:	1acc      	subs	r4, r1, r3
 800472e:	42a3      	cmp	r3, r4
 8004730:	dae7      	bge.n	8004702 <__utoa+0x36>
 8004732:	7844      	ldrb	r4, [r0, #1]
 8004734:	7815      	ldrb	r5, [r2, #0]
 8004736:	3301      	adds	r3, #1
 8004738:	f800 5f01 	strb.w	r5, [r0, #1]!
 800473c:	f802 4901 	strb.w	r4, [r2], #-1
 8004740:	e7f4      	b.n	800472c <__utoa+0x60>
 8004742:	4621      	mov	r1, r4
 8004744:	e7e2      	b.n	800470c <__utoa+0x40>
 8004746:	bf00      	nop
 8004748:	08004d14 	.word	0x08004d14

0800474c <atanf>:
 800474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004750:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004754:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8004758:	4604      	mov	r4, r0
 800475a:	4607      	mov	r7, r0
 800475c:	db0e      	blt.n	800477c <atanf+0x30>
 800475e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004762:	dd04      	ble.n	800476e <atanf+0x22>
 8004764:	4601      	mov	r1, r0
 8004766:	f7fc f945 	bl	80009f4 <__addsf3>
 800476a:	4604      	mov	r4, r0
 800476c:	e003      	b.n	8004776 <atanf+0x2a>
 800476e:	2800      	cmp	r0, #0
 8004770:	f300 80d2 	bgt.w	8004918 <atanf+0x1cc>
 8004774:	4c69      	ldr	r4, [pc, #420]	; (800491c <atanf+0x1d0>)
 8004776:	4620      	mov	r0, r4
 8004778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800477c:	4b68      	ldr	r3, [pc, #416]	; (8004920 <atanf+0x1d4>)
 800477e:	429d      	cmp	r5, r3
 8004780:	dc0e      	bgt.n	80047a0 <atanf+0x54>
 8004782:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8004786:	da08      	bge.n	800479a <atanf+0x4e>
 8004788:	4966      	ldr	r1, [pc, #408]	; (8004924 <atanf+0x1d8>)
 800478a:	f7fc f933 	bl	80009f4 <__addsf3>
 800478e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004792:	f7fc fbf3 	bl	8000f7c <__aeabi_fcmpgt>
 8004796:	2800      	cmp	r0, #0
 8004798:	d1ed      	bne.n	8004776 <atanf+0x2a>
 800479a:	f04f 36ff 	mov.w	r6, #4294967295
 800479e:	e01c      	b.n	80047da <atanf+0x8e>
 80047a0:	f000 f8e4 	bl	800496c <fabsf>
 80047a4:	4b60      	ldr	r3, [pc, #384]	; (8004928 <atanf+0x1dc>)
 80047a6:	4604      	mov	r4, r0
 80047a8:	429d      	cmp	r5, r3
 80047aa:	dc7c      	bgt.n	80048a6 <atanf+0x15a>
 80047ac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80047b0:	429d      	cmp	r5, r3
 80047b2:	dc67      	bgt.n	8004884 <atanf+0x138>
 80047b4:	4601      	mov	r1, r0
 80047b6:	f7fc f91d 	bl	80009f4 <__addsf3>
 80047ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80047be:	f7fc f917 	bl	80009f0 <__aeabi_fsub>
 80047c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80047c6:	4605      	mov	r5, r0
 80047c8:	4620      	mov	r0, r4
 80047ca:	f7fc f913 	bl	80009f4 <__addsf3>
 80047ce:	4601      	mov	r1, r0
 80047d0:	4628      	mov	r0, r5
 80047d2:	f7fc facb 	bl	8000d6c <__aeabi_fdiv>
 80047d6:	2600      	movs	r6, #0
 80047d8:	4604      	mov	r4, r0
 80047da:	4621      	mov	r1, r4
 80047dc:	4620      	mov	r0, r4
 80047de:	f7fc fa11 	bl	8000c04 <__aeabi_fmul>
 80047e2:	4601      	mov	r1, r0
 80047e4:	4680      	mov	r8, r0
 80047e6:	f7fc fa0d 	bl	8000c04 <__aeabi_fmul>
 80047ea:	4605      	mov	r5, r0
 80047ec:	494f      	ldr	r1, [pc, #316]	; (800492c <atanf+0x1e0>)
 80047ee:	f7fc fa09 	bl	8000c04 <__aeabi_fmul>
 80047f2:	494f      	ldr	r1, [pc, #316]	; (8004930 <atanf+0x1e4>)
 80047f4:	f7fc f8fe 	bl	80009f4 <__addsf3>
 80047f8:	4629      	mov	r1, r5
 80047fa:	f7fc fa03 	bl	8000c04 <__aeabi_fmul>
 80047fe:	494d      	ldr	r1, [pc, #308]	; (8004934 <atanf+0x1e8>)
 8004800:	f7fc f8f8 	bl	80009f4 <__addsf3>
 8004804:	4629      	mov	r1, r5
 8004806:	f7fc f9fd 	bl	8000c04 <__aeabi_fmul>
 800480a:	494b      	ldr	r1, [pc, #300]	; (8004938 <atanf+0x1ec>)
 800480c:	f7fc f8f2 	bl	80009f4 <__addsf3>
 8004810:	4629      	mov	r1, r5
 8004812:	f7fc f9f7 	bl	8000c04 <__aeabi_fmul>
 8004816:	4949      	ldr	r1, [pc, #292]	; (800493c <atanf+0x1f0>)
 8004818:	f7fc f8ec 	bl	80009f4 <__addsf3>
 800481c:	4629      	mov	r1, r5
 800481e:	f7fc f9f1 	bl	8000c04 <__aeabi_fmul>
 8004822:	4947      	ldr	r1, [pc, #284]	; (8004940 <atanf+0x1f4>)
 8004824:	f7fc f8e6 	bl	80009f4 <__addsf3>
 8004828:	4641      	mov	r1, r8
 800482a:	f7fc f9eb 	bl	8000c04 <__aeabi_fmul>
 800482e:	4945      	ldr	r1, [pc, #276]	; (8004944 <atanf+0x1f8>)
 8004830:	4680      	mov	r8, r0
 8004832:	4628      	mov	r0, r5
 8004834:	f7fc f9e6 	bl	8000c04 <__aeabi_fmul>
 8004838:	4943      	ldr	r1, [pc, #268]	; (8004948 <atanf+0x1fc>)
 800483a:	f7fc f8d9 	bl	80009f0 <__aeabi_fsub>
 800483e:	4629      	mov	r1, r5
 8004840:	f7fc f9e0 	bl	8000c04 <__aeabi_fmul>
 8004844:	4941      	ldr	r1, [pc, #260]	; (800494c <atanf+0x200>)
 8004846:	f7fc f8d3 	bl	80009f0 <__aeabi_fsub>
 800484a:	4629      	mov	r1, r5
 800484c:	f7fc f9da 	bl	8000c04 <__aeabi_fmul>
 8004850:	493f      	ldr	r1, [pc, #252]	; (8004950 <atanf+0x204>)
 8004852:	f7fc f8cd 	bl	80009f0 <__aeabi_fsub>
 8004856:	4629      	mov	r1, r5
 8004858:	f7fc f9d4 	bl	8000c04 <__aeabi_fmul>
 800485c:	493d      	ldr	r1, [pc, #244]	; (8004954 <atanf+0x208>)
 800485e:	f7fc f8c7 	bl	80009f0 <__aeabi_fsub>
 8004862:	4629      	mov	r1, r5
 8004864:	f7fc f9ce 	bl	8000c04 <__aeabi_fmul>
 8004868:	1c73      	adds	r3, r6, #1
 800486a:	4601      	mov	r1, r0
 800486c:	4640      	mov	r0, r8
 800486e:	d139      	bne.n	80048e4 <atanf+0x198>
 8004870:	f7fc f8c0 	bl	80009f4 <__addsf3>
 8004874:	4621      	mov	r1, r4
 8004876:	f7fc f9c5 	bl	8000c04 <__aeabi_fmul>
 800487a:	4601      	mov	r1, r0
 800487c:	4620      	mov	r0, r4
 800487e:	f7fc f8b7 	bl	80009f0 <__aeabi_fsub>
 8004882:	e772      	b.n	800476a <atanf+0x1e>
 8004884:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004888:	f7fc f8b2 	bl	80009f0 <__aeabi_fsub>
 800488c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004890:	4605      	mov	r5, r0
 8004892:	4620      	mov	r0, r4
 8004894:	f7fc f8ae 	bl	80009f4 <__addsf3>
 8004898:	4601      	mov	r1, r0
 800489a:	4628      	mov	r0, r5
 800489c:	f7fc fa66 	bl	8000d6c <__aeabi_fdiv>
 80048a0:	2601      	movs	r6, #1
 80048a2:	4604      	mov	r4, r0
 80048a4:	e799      	b.n	80047da <atanf+0x8e>
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <atanf+0x20c>)
 80048a8:	429d      	cmp	r5, r3
 80048aa:	dc14      	bgt.n	80048d6 <atanf+0x18a>
 80048ac:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80048b0:	f7fc f89e 	bl	80009f0 <__aeabi_fsub>
 80048b4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80048b8:	4605      	mov	r5, r0
 80048ba:	4620      	mov	r0, r4
 80048bc:	f7fc f9a2 	bl	8000c04 <__aeabi_fmul>
 80048c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80048c4:	f7fc f896 	bl	80009f4 <__addsf3>
 80048c8:	4601      	mov	r1, r0
 80048ca:	4628      	mov	r0, r5
 80048cc:	f7fc fa4e 	bl	8000d6c <__aeabi_fdiv>
 80048d0:	2602      	movs	r6, #2
 80048d2:	4604      	mov	r4, r0
 80048d4:	e781      	b.n	80047da <atanf+0x8e>
 80048d6:	4601      	mov	r1, r0
 80048d8:	4820      	ldr	r0, [pc, #128]	; (800495c <atanf+0x210>)
 80048da:	f7fc fa47 	bl	8000d6c <__aeabi_fdiv>
 80048de:	2603      	movs	r6, #3
 80048e0:	4604      	mov	r4, r0
 80048e2:	e77a      	b.n	80047da <atanf+0x8e>
 80048e4:	f7fc f886 	bl	80009f4 <__addsf3>
 80048e8:	4621      	mov	r1, r4
 80048ea:	f7fc f98b 	bl	8000c04 <__aeabi_fmul>
 80048ee:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <atanf+0x214>)
 80048f0:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80048f4:	f7fc f87c 	bl	80009f0 <__aeabi_fsub>
 80048f8:	4621      	mov	r1, r4
 80048fa:	f7fc f879 	bl	80009f0 <__aeabi_fsub>
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <atanf+0x218>)
 8004900:	4601      	mov	r1, r0
 8004902:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004906:	f7fc f873 	bl	80009f0 <__aeabi_fsub>
 800490a:	2f00      	cmp	r7, #0
 800490c:	4604      	mov	r4, r0
 800490e:	f6bf af32 	bge.w	8004776 <atanf+0x2a>
 8004912:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8004916:	e72e      	b.n	8004776 <atanf+0x2a>
 8004918:	4c13      	ldr	r4, [pc, #76]	; (8004968 <atanf+0x21c>)
 800491a:	e72c      	b.n	8004776 <atanf+0x2a>
 800491c:	bfc90fdb 	.word	0xbfc90fdb
 8004920:	3edfffff 	.word	0x3edfffff
 8004924:	7149f2ca 	.word	0x7149f2ca
 8004928:	3f97ffff 	.word	0x3f97ffff
 800492c:	3c8569d7 	.word	0x3c8569d7
 8004930:	3d4bda59 	.word	0x3d4bda59
 8004934:	3d886b35 	.word	0x3d886b35
 8004938:	3dba2e6e 	.word	0x3dba2e6e
 800493c:	3e124925 	.word	0x3e124925
 8004940:	3eaaaaab 	.word	0x3eaaaaab
 8004944:	bd15a221 	.word	0xbd15a221
 8004948:	3d6ef16b 	.word	0x3d6ef16b
 800494c:	3d9d8795 	.word	0x3d9d8795
 8004950:	3de38e38 	.word	0x3de38e38
 8004954:	3e4ccccd 	.word	0x3e4ccccd
 8004958:	401bffff 	.word	0x401bffff
 800495c:	bf800000 	.word	0xbf800000
 8004960:	08004d4c 	.word	0x08004d4c
 8004964:	08004d3c 	.word	0x08004d3c
 8004968:	3fc90fdb 	.word	0x3fc90fdb

0800496c <fabsf>:
 800496c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004970:	4770      	bx	lr
	...

08004974 <hypotf>:
 8004974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004978:	b08a      	sub	sp, #40	; 0x28
 800497a:	4607      	mov	r7, r0
 800497c:	460e      	mov	r6, r1
 800497e:	f000 f851 	bl	8004a24 <__ieee754_hypotf>
 8004982:	4d24      	ldr	r5, [pc, #144]	; (8004a14 <hypotf+0xa0>)
 8004984:	4604      	mov	r4, r0
 8004986:	f995 3000 	ldrsb.w	r3, [r5]
 800498a:	3301      	adds	r3, #1
 800498c:	d033      	beq.n	80049f6 <hypotf+0x82>
 800498e:	f000 f95d 	bl	8004c4c <finitef>
 8004992:	4680      	mov	r8, r0
 8004994:	2800      	cmp	r0, #0
 8004996:	d12e      	bne.n	80049f6 <hypotf+0x82>
 8004998:	4638      	mov	r0, r7
 800499a:	f000 f957 	bl	8004c4c <finitef>
 800499e:	b350      	cbz	r0, 80049f6 <hypotf+0x82>
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f953 	bl	8004c4c <finitef>
 80049a6:	b330      	cbz	r0, 80049f6 <hypotf+0x82>
 80049a8:	2303      	movs	r3, #3
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <hypotf+0xa4>)
 80049ae:	4638      	mov	r0, r7
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	f8cd 8020 	str.w	r8, [sp, #32]
 80049b6:	f7fb fd39 	bl	800042c <__aeabi_f2d>
 80049ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049be:	4630      	mov	r0, r6
 80049c0:	f7fb fd34 	bl	800042c <__aeabi_f2d>
 80049c4:	f995 3000 	ldrsb.w	r3, [r5]
 80049c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049cc:	b9bb      	cbnz	r3, 80049fe <hypotf+0x8a>
 80049ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <hypotf+0xa8>)
 80049d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049d8:	4668      	mov	r0, sp
 80049da:	f000 f935 	bl	8004c48 <matherr>
 80049de:	b1a0      	cbz	r0, 8004a0a <hypotf+0x96>
 80049e0:	9b08      	ldr	r3, [sp, #32]
 80049e2:	b11b      	cbz	r3, 80049ec <hypotf+0x78>
 80049e4:	f7ff fe1e 	bl	8004624 <__errno>
 80049e8:	9b08      	ldr	r3, [sp, #32]
 80049ea:	6003      	str	r3, [r0, #0]
 80049ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049f0:	f7fb ffaa 	bl	8000948 <__aeabi_d2f>
 80049f4:	4604      	mov	r4, r0
 80049f6:	4620      	mov	r0, r4
 80049f8:	b00a      	add	sp, #40	; 0x28
 80049fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049fe:	2000      	movs	r0, #0
 8004a00:	4907      	ldr	r1, [pc, #28]	; (8004a20 <hypotf+0xac>)
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a08:	d1e6      	bne.n	80049d8 <hypotf+0x64>
 8004a0a:	f7ff fe0b 	bl	8004624 <__errno>
 8004a0e:	2322      	movs	r3, #34	; 0x22
 8004a10:	6003      	str	r3, [r0, #0]
 8004a12:	e7e5      	b.n	80049e0 <hypotf+0x6c>
 8004a14:	2000008c 	.word	0x2000008c
 8004a18:	08004d5c 	.word	0x08004d5c
 8004a1c:	47efffff 	.word	0x47efffff
 8004a20:	7ff00000 	.word	0x7ff00000

08004a24 <__ieee754_hypotf>:
 8004a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a28:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004a2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004a30:	42b4      	cmp	r4, r6
 8004a32:	bfbe      	ittt	lt
 8004a34:	4623      	movlt	r3, r4
 8004a36:	4634      	movlt	r4, r6
 8004a38:	461e      	movlt	r6, r3
 8004a3a:	1ba3      	subs	r3, r4, r6
 8004a3c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004a40:	4625      	mov	r5, r4
 8004a42:	4637      	mov	r7, r6
 8004a44:	dd05      	ble.n	8004a52 <__ieee754_hypotf+0x2e>
 8004a46:	4631      	mov	r1, r6
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7fb ffd3 	bl	80009f4 <__addsf3>
 8004a4e:	4605      	mov	r5, r0
 8004a50:	e010      	b.n	8004a74 <__ieee754_hypotf+0x50>
 8004a52:	f1b4 4fb1 	cmp.w	r4, #1484783616	; 0x58800000
 8004a56:	dd6b      	ble.n	8004b30 <__ieee754_hypotf+0x10c>
 8004a58:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004a5c:	db10      	blt.n	8004a80 <__ieee754_hypotf+0x5c>
 8004a5e:	d00c      	beq.n	8004a7a <__ieee754_hypotf+0x56>
 8004a60:	4631      	mov	r1, r6
 8004a62:	4620      	mov	r0, r4
 8004a64:	f7fb ffc6 	bl	80009f4 <__addsf3>
 8004a68:	4605      	mov	r5, r0
 8004a6a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004a6e:	d101      	bne.n	8004a74 <__ieee754_hypotf+0x50>
 8004a70:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 8004a74:	4628      	mov	r0, r5
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7a:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 8004a7e:	e7f4      	b.n	8004a6a <__ieee754_hypotf+0x46>
 8004a80:	f104 445e 	add.w	r4, r4, #3724541952	; 0xde000000
 8004a84:	f106 465e 	add.w	r6, r6, #3724541952	; 0xde000000
 8004a88:	4625      	mov	r5, r4
 8004a8a:	4637      	mov	r7, r6
 8004a8c:	f04f 0844 	mov.w	r8, #68	; 0x44
 8004a90:	f1b6 5f1a 	cmp.w	r6, #645922816	; 0x26800000
 8004a94:	da12      	bge.n	8004abc <__ieee754_hypotf+0x98>
 8004a96:	2e00      	cmp	r6, #0
 8004a98:	d0ec      	beq.n	8004a74 <__ieee754_hypotf+0x50>
 8004a9a:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8004a9e:	da4a      	bge.n	8004b36 <__ieee754_hypotf+0x112>
 8004aa0:	f04f 41fd 	mov.w	r1, #2122317824	; 0x7e800000
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	f7fc f8ad 	bl	8000c04 <__aeabi_fmul>
 8004aaa:	f04f 41fd 	mov.w	r1, #2122317824	; 0x7e800000
 8004aae:	4607      	mov	r7, r0
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7fc f8a7 	bl	8000c04 <__aeabi_fmul>
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	f1a8 087e 	sub.w	r8, r8, #126	; 0x7e
 8004abc:	4639      	mov	r1, r7
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f7fb ff96 	bl	80009f0 <__aeabi_fsub>
 8004ac4:	4601      	mov	r1, r0
 8004ac6:	4681      	mov	r9, r0
 8004ac8:	4638      	mov	r0, r7
 8004aca:	f7fc fa39 	bl	8000f40 <__aeabi_fcmplt>
 8004ace:	4b34      	ldr	r3, [pc, #208]	; (8004ba0 <__ieee754_hypotf+0x17c>)
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d039      	beq.n	8004b48 <__ieee754_hypotf+0x124>
 8004ad4:	401c      	ands	r4, r3
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7fc f893 	bl	8000c04 <__aeabi_fmul>
 8004ade:	4639      	mov	r1, r7
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 8004ae6:	f7fc f88d 	bl	8000c04 <__aeabi_fmul>
 8004aea:	4621      	mov	r1, r4
 8004aec:	4607      	mov	r7, r0
 8004aee:	4628      	mov	r0, r5
 8004af0:	f7fb ff7e 	bl	80009f0 <__aeabi_fsub>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4681      	mov	r9, r0
 8004af8:	4628      	mov	r0, r5
 8004afa:	f7fb ff7b 	bl	80009f4 <__addsf3>
 8004afe:	4601      	mov	r1, r0
 8004b00:	4648      	mov	r0, r9
 8004b02:	f7fc f87f 	bl	8000c04 <__aeabi_fmul>
 8004b06:	4601      	mov	r1, r0
 8004b08:	4638      	mov	r0, r7
 8004b0a:	f7fb ff71 	bl	80009f0 <__aeabi_fsub>
 8004b0e:	4601      	mov	r1, r0
 8004b10:	4630      	mov	r0, r6
 8004b12:	f7fb ff6d 	bl	80009f0 <__aeabi_fsub>
 8004b16:	f000 f845 	bl	8004ba4 <__ieee754_sqrtf>
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	f1b8 0f00 	cmp.w	r8, #0
 8004b20:	d0a8      	beq.n	8004a74 <__ieee754_hypotf+0x50>
 8004b22:	ea4f 51c8 	mov.w	r1, r8, lsl #23
 8004b26:	f101 517e 	add.w	r1, r1, #1065353216	; 0x3f800000
 8004b2a:	f7fc f86b 	bl	8000c04 <__aeabi_fmul>
 8004b2e:	e78e      	b.n	8004a4e <__ieee754_hypotf+0x2a>
 8004b30:	f04f 0800 	mov.w	r8, #0
 8004b34:	e7ac      	b.n	8004a90 <__ieee754_hypotf+0x6c>
 8004b36:	f104 5408 	add.w	r4, r4, #570425344	; 0x22000000
 8004b3a:	f106 5608 	add.w	r6, r6, #570425344	; 0x22000000
 8004b3e:	f1a8 0844 	sub.w	r8, r8, #68	; 0x44
 8004b42:	4625      	mov	r5, r4
 8004b44:	4637      	mov	r7, r6
 8004b46:	e7b9      	b.n	8004abc <__ieee754_hypotf+0x98>
 8004b48:	401e      	ands	r6, r3
 8004b4a:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
 8004b4e:	4621      	mov	r1, r4
 8004b50:	4630      	mov	r0, r6
 8004b52:	f7fc f857 	bl	8000c04 <__aeabi_fmul>
 8004b56:	4649      	mov	r1, r9
 8004b58:	4682      	mov	sl, r0
 8004b5a:	f109 4000 	add.w	r0, r9, #2147483648	; 0x80000000
 8004b5e:	f7fc f851 	bl	8000c04 <__aeabi_fmul>
 8004b62:	4629      	mov	r1, r5
 8004b64:	4681      	mov	r9, r0
 8004b66:	4628      	mov	r0, r5
 8004b68:	f7fb ff44 	bl	80009f4 <__addsf3>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	f7fb ff3f 	bl	80009f0 <__aeabi_fsub>
 8004b72:	4639      	mov	r1, r7
 8004b74:	f7fc f846 	bl	8000c04 <__aeabi_fmul>
 8004b78:	4631      	mov	r1, r6
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f7fb ff37 	bl	80009f0 <__aeabi_fsub>
 8004b82:	4621      	mov	r1, r4
 8004b84:	f7fc f83e 	bl	8000c04 <__aeabi_fmul>
 8004b88:	4601      	mov	r1, r0
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f7fb ff32 	bl	80009f4 <__addsf3>
 8004b90:	4601      	mov	r1, r0
 8004b92:	4648      	mov	r0, r9
 8004b94:	f7fb ff2c 	bl	80009f0 <__aeabi_fsub>
 8004b98:	4601      	mov	r1, r0
 8004b9a:	4650      	mov	r0, sl
 8004b9c:	e7b9      	b.n	8004b12 <__ieee754_hypotf+0xee>
 8004b9e:	bf00      	nop
 8004ba0:	fffff000 	.word	0xfffff000

08004ba4 <__ieee754_sqrtf>:
 8004ba4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8004ba8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	d309      	bcc.n	8004bc8 <__ieee754_sqrtf+0x24>
 8004bb4:	4601      	mov	r1, r0
 8004bb6:	f7fc f825 	bl	8000c04 <__aeabi_fmul>
 8004bba:	4601      	mov	r1, r0
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7fb ff19 	bl	80009f4 <__addsf3>
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
 8004bc8:	2a00      	cmp	r2, #0
 8004bca:	d0fb      	beq.n	8004bc4 <__ieee754_sqrtf+0x20>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	da06      	bge.n	8004bde <__ieee754_sqrtf+0x3a>
 8004bd0:	4601      	mov	r1, r0
 8004bd2:	f7fb ff0d 	bl	80009f0 <__aeabi_fsub>
 8004bd6:	4601      	mov	r1, r0
 8004bd8:	f7fc f8c8 	bl	8000d6c <__aeabi_fdiv>
 8004bdc:	e7f1      	b.n	8004bc2 <__ieee754_sqrtf+0x1e>
 8004bde:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004be2:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8004be6:	d204      	bcs.n	8004bf2 <__ieee754_sqrtf+0x4e>
 8004be8:	2200      	movs	r2, #0
 8004bea:	0219      	lsls	r1, r3, #8
 8004bec:	d529      	bpl.n	8004c42 <__ieee754_sqrtf+0x9e>
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	1aa4      	subs	r4, r4, r2
 8004bf2:	3c7f      	subs	r4, #127	; 0x7f
 8004bf4:	07e2      	lsls	r2, r4, #31
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	ea4f 0164 	mov.w	r1, r4, asr #1
 8004bfe:	4616      	mov	r6, r2
 8004c00:	f04f 0419 	mov.w	r4, #25
 8004c04:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004c08:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c10:	bf48      	it	mi
 8004c12:	005b      	lslmi	r3, r3, #1
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	1835      	adds	r5, r6, r0
 8004c18:	429d      	cmp	r5, r3
 8004c1a:	bfde      	ittt	le
 8004c1c:	182e      	addle	r6, r5, r0
 8004c1e:	1b5b      	suble	r3, r3, r5
 8004c20:	1812      	addle	r2, r2, r0
 8004c22:	3c01      	subs	r4, #1
 8004c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004c28:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004c2c:	d1f3      	bne.n	8004c16 <__ieee754_sqrtf+0x72>
 8004c2e:	b113      	cbz	r3, 8004c36 <__ieee754_sqrtf+0x92>
 8004c30:	3201      	adds	r2, #1
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	1054      	asrs	r4, r2, #1
 8004c38:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8004c3c:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8004c40:	e7c0      	b.n	8004bc4 <__ieee754_sqrtf+0x20>
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	3201      	adds	r2, #1
 8004c46:	e7d0      	b.n	8004bea <__ieee754_sqrtf+0x46>

08004c48 <matherr>:
 8004c48:	2000      	movs	r0, #0
 8004c4a:	4770      	bx	lr

08004c4c <finitef>:
 8004c4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c50:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004c54:	bfac      	ite	ge
 8004c56:	2000      	movge	r0, #0
 8004c58:	2001      	movlt	r0, #1
 8004c5a:	4770      	bx	lr

08004c5c <_init>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr

08004c68 <_fini>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr
