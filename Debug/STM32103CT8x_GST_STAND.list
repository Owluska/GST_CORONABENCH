
STM32103CT8x_GST_STAND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000000  08004fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000544  2000009c  08005074  0002009c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005e0  08005074  000205e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016928  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000366b  00000000  00000000  000369ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b487  00000000  00000000  0003a058  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e80  00000000  00000000  000454e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001618  00000000  00000000  00046360  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008f02  00000000  00000000  00047978  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000052a2  00000000  00000000  0005087a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00055b1c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000031d4  00000000  00000000  00055b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000009c 	.word	0x2000009c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e5c 	.word	0x08004e5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a0 	.word	0x200000a0
 800014c:	08004e5c 	.word	0x08004e5c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f092 0f00 	teq	r2, #0
 800045e:	bf14      	ite	ne
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 7460 	mov.w	r4, #896	; 0x380
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e720      	b.n	80002b8 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_ul2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f04f 0500 	mov.w	r5, #0
 8000486:	e00a      	b.n	800049e <__aeabi_l2d+0x16>

08000488 <__aeabi_l2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000496:	d502      	bpl.n	800049e <__aeabi_l2d+0x16>
 8000498:	4240      	negs	r0, r0
 800049a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004aa:	f43f aedc 	beq.w	8000266 <__adddf3+0xe6>
 80004ae:	f04f 0203 	mov.w	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004c6:	f1c2 0320 	rsb	r3, r2, #32
 80004ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004d6:	ea40 000e 	orr.w	r0, r0, lr
 80004da:	fa21 f102 	lsr.w	r1, r1, r2
 80004de:	4414      	add	r4, r2
 80004e0:	e6c1      	b.n	8000266 <__adddf3+0xe6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dmul>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f2:	bf1d      	ittte	ne
 80004f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f8:	ea94 0f0c 	teqne	r4, ip
 80004fc:	ea95 0f0c 	teqne	r5, ip
 8000500:	f000 f8de 	bleq	80006c0 <__aeabi_dmul+0x1dc>
 8000504:	442c      	add	r4, r5
 8000506:	ea81 0603 	eor.w	r6, r1, r3
 800050a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800050e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000516:	bf18      	it	ne
 8000518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800051c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000524:	d038      	beq.n	8000598 <__aeabi_dmul+0xb4>
 8000526:	fba0 ce02 	umull	ip, lr, r0, r2
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000536:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053a:	f04f 0600 	mov.w	r6, #0
 800053e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000542:	f09c 0f00 	teq	ip, #0
 8000546:	bf18      	it	ne
 8000548:	f04e 0e01 	orrne.w	lr, lr, #1
 800054c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000558:	d204      	bcs.n	8000564 <__aeabi_dmul+0x80>
 800055a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800055e:	416d      	adcs	r5, r5
 8000560:	eb46 0606 	adc.w	r6, r6, r6
 8000564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800056c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800057c:	bf88      	it	hi
 800057e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000582:	d81e      	bhi.n	80005c2 <__aeabi_dmul+0xde>
 8000584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800059c:	ea46 0101 	orr.w	r1, r6, r1
 80005a0:	ea40 0002 	orr.w	r0, r0, r2
 80005a4:	ea81 0103 	eor.w	r1, r1, r3
 80005a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005ac:	bfc2      	ittt	gt
 80005ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	popgt	{r4, r5, r6, pc}
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f04f 0e00 	mov.w	lr, #0
 80005c0:	3c01      	subs	r4, #1
 80005c2:	f300 80ab 	bgt.w	800071c <__aeabi_dmul+0x238>
 80005c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ca:	bfde      	ittt	le
 80005cc:	2000      	movle	r0, #0
 80005ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd70      	pople	{r4, r5, r6, pc}
 80005d4:	f1c4 0400 	rsb	r4, r4, #0
 80005d8:	3c20      	subs	r4, #32
 80005da:	da35      	bge.n	8000648 <__aeabi_dmul+0x164>
 80005dc:	340c      	adds	r4, #12
 80005de:	dc1b      	bgt.n	8000618 <__aeabi_dmul+0x134>
 80005e0:	f104 0414 	add.w	r4, r4, #20
 80005e4:	f1c4 0520 	rsb	r5, r4, #32
 80005e8:	fa00 f305 	lsl.w	r3, r0, r5
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f205 	lsl.w	r2, r1, r5
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000604:	fa21 f604 	lsr.w	r6, r1, r4
 8000608:	eb42 0106 	adc.w	r1, r2, r6
 800060c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000610:	bf08      	it	eq
 8000612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f1c4 040c 	rsb	r4, r4, #12
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f304 	lsl.w	r3, r0, r4
 8000624:	fa20 f005 	lsr.w	r0, r0, r5
 8000628:	fa01 f204 	lsl.w	r2, r1, r4
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000638:	f141 0100 	adc.w	r1, r1, #0
 800063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000640:	bf08      	it	eq
 8000642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f205 	lsl.w	r2, r0, r5
 8000650:	ea4e 0e02 	orr.w	lr, lr, r2
 8000654:	fa20 f304 	lsr.w	r3, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea43 0302 	orr.w	r3, r3, r2
 8000660:	fa21 f004 	lsr.w	r0, r1, r4
 8000664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000668:	fa21 f204 	lsr.w	r2, r1, r4
 800066c:	ea20 0002 	bic.w	r0, r0, r2
 8000670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f094 0f00 	teq	r4, #0
 8000684:	d10f      	bne.n	80006a6 <__aeabi_dmul+0x1c2>
 8000686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068a:	0040      	lsls	r0, r0, #1
 800068c:	eb41 0101 	adc.w	r1, r1, r1
 8000690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3c01      	subeq	r4, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1a6>
 800069a:	ea41 0106 	orr.w	r1, r1, r6
 800069e:	f095 0f00 	teq	r5, #0
 80006a2:	bf18      	it	ne
 80006a4:	4770      	bxne	lr
 80006a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	eb43 0303 	adc.w	r3, r3, r3
 80006b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b4:	bf08      	it	eq
 80006b6:	3d01      	subeq	r5, #1
 80006b8:	d0f7      	beq.n	80006aa <__aeabi_dmul+0x1c6>
 80006ba:	ea43 0306 	orr.w	r3, r3, r6
 80006be:	4770      	bx	lr
 80006c0:	ea94 0f0c 	teq	r4, ip
 80006c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c8:	bf18      	it	ne
 80006ca:	ea95 0f0c 	teqne	r5, ip
 80006ce:	d00c      	beq.n	80006ea <__aeabi_dmul+0x206>
 80006d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d4:	bf18      	it	ne
 80006d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006da:	d1d1      	bne.n	8000680 <__aeabi_dmul+0x19c>
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ee:	bf06      	itte	eq
 80006f0:	4610      	moveq	r0, r2
 80006f2:	4619      	moveq	r1, r3
 80006f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f8:	d019      	beq.n	800072e <__aeabi_dmul+0x24a>
 80006fa:	ea94 0f0c 	teq	r4, ip
 80006fe:	d102      	bne.n	8000706 <__aeabi_dmul+0x222>
 8000700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000704:	d113      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000706:	ea95 0f0c 	teq	r5, ip
 800070a:	d105      	bne.n	8000718 <__aeabi_dmul+0x234>
 800070c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000710:	bf1c      	itt	ne
 8000712:	4610      	movne	r0, r2
 8000714:	4619      	movne	r1, r3
 8000716:	d10a      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000736:	bd70      	pop	{r4, r5, r6, pc}

08000738 <__aeabi_ddiv>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000746:	bf1d      	ittte	ne
 8000748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800074c:	ea94 0f0c 	teqne	r4, ip
 8000750:	ea95 0f0c 	teqne	r5, ip
 8000754:	f000 f8a7 	bleq	80008a6 <__aeabi_ddiv+0x16e>
 8000758:	eba4 0405 	sub.w	r4, r4, r5
 800075c:	ea81 0e03 	eor.w	lr, r1, r3
 8000760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000768:	f000 8088 	beq.w	800087c <__aeabi_ddiv+0x144>
 800076c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800077c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800078c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000790:	429d      	cmp	r5, r3
 8000792:	bf08      	it	eq
 8000794:	4296      	cmpeq	r6, r2
 8000796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800079e:	d202      	bcs.n	80007a6 <__aeabi_ddiv+0x6e>
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	1ab6      	subs	r6, r6, r2
 80007a8:	eb65 0503 	sbc.w	r5, r5, r3
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000814:	ea55 0e06 	orrs.w	lr, r5, r6
 8000818:	d018      	beq.n	800084c <__aeabi_ddiv+0x114>
 800081a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800081e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800082e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000836:	d1c0      	bne.n	80007ba <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	d10b      	bne.n	8000856 <__aeabi_ddiv+0x11e>
 800083e:	ea41 0100 	orr.w	r1, r1, r0
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084a:	e7b6      	b.n	80007ba <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	bf04      	itt	eq
 8000852:	4301      	orreq	r1, r0
 8000854:	2000      	moveq	r0, #0
 8000856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085a:	bf88      	it	hi
 800085c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000860:	f63f aeaf 	bhi.w	80005c2 <__aeabi_dmul+0xde>
 8000864:	ebb5 0c03 	subs.w	ip, r5, r3
 8000868:	bf04      	itt	eq
 800086a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800086e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000872:	f150 0000 	adcs.w	r0, r0, #0
 8000876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000888:	bfc2      	ittt	gt
 800088a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800088e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000892:	bd70      	popgt	{r4, r5, r6, pc}
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000898:	f04f 0e00 	mov.w	lr, #0
 800089c:	3c01      	subs	r4, #1
 800089e:	e690      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a0:	ea45 0e06 	orr.w	lr, r5, r6
 80008a4:	e68d      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008aa:	ea94 0f0c 	teq	r4, ip
 80008ae:	bf08      	it	eq
 80008b0:	ea95 0f0c 	teqeq	r5, ip
 80008b4:	f43f af3b 	beq.w	800072e <__aeabi_dmul+0x24a>
 80008b8:	ea94 0f0c 	teq	r4, ip
 80008bc:	d10a      	bne.n	80008d4 <__aeabi_ddiv+0x19c>
 80008be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c2:	f47f af34 	bne.w	800072e <__aeabi_dmul+0x24a>
 80008c6:	ea95 0f0c 	teq	r5, ip
 80008ca:	f47f af25 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e72c      	b.n	800072e <__aeabi_dmul+0x24a>
 80008d4:	ea95 0f0c 	teq	r5, ip
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x1b0>
 80008da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008de:	f43f aefd 	beq.w	80006dc <__aeabi_dmul+0x1f8>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e722      	b.n	800072e <__aeabi_dmul+0x24a>
 80008e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ec:	bf18      	it	ne
 80008ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f2:	f47f aec5 	bne.w	8000680 <__aeabi_dmul+0x19c>
 80008f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fa:	f47f af0d 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000902:	f47f aeeb 	bne.w	80006dc <__aeabi_dmul+0x1f8>
 8000906:	e712      	b.n	800072e <__aeabi_dmul+0x24a>

08000908 <__aeabi_d2f>:
 8000908:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800090c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000910:	bf24      	itt	cs
 8000912:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000916:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091a:	d90d      	bls.n	8000938 <__aeabi_d2f+0x30>
 800091c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000920:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000924:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000928:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800092c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000930:	bf08      	it	eq
 8000932:	f020 0001 	biceq.w	r0, r0, #1
 8000936:	4770      	bx	lr
 8000938:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800093c:	d121      	bne.n	8000982 <__aeabi_d2f+0x7a>
 800093e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000942:	bfbc      	itt	lt
 8000944:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000948:	4770      	bxlt	lr
 800094a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000952:	f1c2 0218 	rsb	r2, r2, #24
 8000956:	f1c2 0c20 	rsb	ip, r2, #32
 800095a:	fa10 f30c 	lsls.w	r3, r0, ip
 800095e:	fa20 f002 	lsr.w	r0, r0, r2
 8000962:	bf18      	it	ne
 8000964:	f040 0001 	orrne.w	r0, r0, #1
 8000968:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800096c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000970:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000974:	ea40 000c 	orr.w	r0, r0, ip
 8000978:	fa23 f302 	lsr.w	r3, r3, r2
 800097c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000980:	e7cc      	b.n	800091c <__aeabi_d2f+0x14>
 8000982:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000986:	d107      	bne.n	8000998 <__aeabi_d2f+0x90>
 8000988:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800098c:	bf1e      	ittt	ne
 800098e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000992:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000996:	4770      	bxne	lr
 8000998:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800099c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_frsub>:
 80009a8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009ac:	e002      	b.n	80009b4 <__addsf3>
 80009ae:	bf00      	nop

080009b0 <__aeabi_fsub>:
 80009b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b4 <__addsf3>:
 80009b4:	0042      	lsls	r2, r0, #1
 80009b6:	bf1f      	itttt	ne
 80009b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009bc:	ea92 0f03 	teqne	r2, r3
 80009c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009c8:	d06a      	beq.n	8000aa0 <__addsf3+0xec>
 80009ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d2:	bfc1      	itttt	gt
 80009d4:	18d2      	addgt	r2, r2, r3
 80009d6:	4041      	eorgt	r1, r0
 80009d8:	4048      	eorgt	r0, r1
 80009da:	4041      	eorgt	r1, r0
 80009dc:	bfb8      	it	lt
 80009de:	425b      	neglt	r3, r3
 80009e0:	2b19      	cmp	r3, #25
 80009e2:	bf88      	it	hi
 80009e4:	4770      	bxhi	lr
 80009e6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f2:	bf18      	it	ne
 80009f4:	4240      	negne	r0, r0
 80009f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a02:	bf18      	it	ne
 8000a04:	4249      	negne	r1, r1
 8000a06:	ea92 0f03 	teq	r2, r3
 8000a0a:	d03f      	beq.n	8000a8c <__addsf3+0xd8>
 8000a0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a10:	fa41 fc03 	asr.w	ip, r1, r3
 8000a14:	eb10 000c 	adds.w	r0, r0, ip
 8000a18:	f1c3 0320 	rsb	r3, r3, #32
 8000a1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a24:	d502      	bpl.n	8000a2c <__addsf3+0x78>
 8000a26:	4249      	negs	r1, r1
 8000a28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a30:	d313      	bcc.n	8000a5a <__addsf3+0xa6>
 8000a32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a36:	d306      	bcc.n	8000a46 <__addsf3+0x92>
 8000a38:	0840      	lsrs	r0, r0, #1
 8000a3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a3e:	f102 0201 	add.w	r2, r2, #1
 8000a42:	2afe      	cmp	r2, #254	; 0xfe
 8000a44:	d251      	bcs.n	8000aea <__addsf3+0x136>
 8000a46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a4e:	bf08      	it	eq
 8000a50:	f020 0001 	biceq.w	r0, r0, #1
 8000a54:	ea40 0003 	orr.w	r0, r0, r3
 8000a58:	4770      	bx	lr
 8000a5a:	0049      	lsls	r1, r1, #1
 8000a5c:	eb40 0000 	adc.w	r0, r0, r0
 8000a60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a64:	f1a2 0201 	sub.w	r2, r2, #1
 8000a68:	d1ed      	bne.n	8000a46 <__addsf3+0x92>
 8000a6a:	fab0 fc80 	clz	ip, r0
 8000a6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a72:	ebb2 020c 	subs.w	r2, r2, ip
 8000a76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7a:	bfaa      	itet	ge
 8000a7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a80:	4252      	neglt	r2, r2
 8000a82:	4318      	orrge	r0, r3
 8000a84:	bfbc      	itt	lt
 8000a86:	40d0      	lsrlt	r0, r2
 8000a88:	4318      	orrlt	r0, r3
 8000a8a:	4770      	bx	lr
 8000a8c:	f092 0f00 	teq	r2, #0
 8000a90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a94:	bf06      	itte	eq
 8000a96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9a:	3201      	addeq	r2, #1
 8000a9c:	3b01      	subne	r3, #1
 8000a9e:	e7b5      	b.n	8000a0c <__addsf3+0x58>
 8000aa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aa8:	bf18      	it	ne
 8000aaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aae:	d021      	beq.n	8000af4 <__addsf3+0x140>
 8000ab0:	ea92 0f03 	teq	r2, r3
 8000ab4:	d004      	beq.n	8000ac0 <__addsf3+0x10c>
 8000ab6:	f092 0f00 	teq	r2, #0
 8000aba:	bf08      	it	eq
 8000abc:	4608      	moveq	r0, r1
 8000abe:	4770      	bx	lr
 8000ac0:	ea90 0f01 	teq	r0, r1
 8000ac4:	bf1c      	itt	ne
 8000ac6:	2000      	movne	r0, #0
 8000ac8:	4770      	bxne	lr
 8000aca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ace:	d104      	bne.n	8000ada <__addsf3+0x126>
 8000ad0:	0040      	lsls	r0, r0, #1
 8000ad2:	bf28      	it	cs
 8000ad4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ad8:	4770      	bx	lr
 8000ada:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ade:	bf3c      	itt	cc
 8000ae0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae4:	4770      	bxcc	lr
 8000ae6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	4770      	bx	lr
 8000af4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000af8:	bf16      	itet	ne
 8000afa:	4608      	movne	r0, r1
 8000afc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b00:	4601      	movne	r1, r0
 8000b02:	0242      	lsls	r2, r0, #9
 8000b04:	bf06      	itte	eq
 8000b06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0a:	ea90 0f01 	teqeq	r0, r1
 8000b0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_ui2f>:
 8000b14:	f04f 0300 	mov.w	r3, #0
 8000b18:	e004      	b.n	8000b24 <__aeabi_i2f+0x8>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_i2f>:
 8000b1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b20:	bf48      	it	mi
 8000b22:	4240      	negmi	r0, r0
 8000b24:	ea5f 0c00 	movs.w	ip, r0
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b30:	4601      	mov	r1, r0
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	e01c      	b.n	8000b72 <__aeabi_l2f+0x2a>

08000b38 <__aeabi_ul2f>:
 8000b38:	ea50 0201 	orrs.w	r2, r0, r1
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	e00a      	b.n	8000b5c <__aeabi_l2f+0x14>
 8000b46:	bf00      	nop

08000b48 <__aeabi_l2f>:
 8000b48:	ea50 0201 	orrs.w	r2, r0, r1
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__aeabi_l2f+0x14>
 8000b56:	4240      	negs	r0, r0
 8000b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b5c:	ea5f 0c01 	movs.w	ip, r1
 8000b60:	bf02      	ittt	eq
 8000b62:	4684      	moveq	ip, r0
 8000b64:	4601      	moveq	r1, r0
 8000b66:	2000      	moveq	r0, #0
 8000b68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b76:	fabc f28c 	clz	r2, ip
 8000b7a:	3a08      	subs	r2, #8
 8000b7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b80:	db10      	blt.n	8000ba4 <__aeabi_l2f+0x5c>
 8000b82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b86:	4463      	add	r3, ip
 8000b88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b94:	fa20 f202 	lsr.w	r2, r0, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ba2:	4770      	bx	lr
 8000ba4:	f102 0220 	add.w	r2, r2, #32
 8000ba8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bac:	f1c2 0220 	rsb	r2, r2, #32
 8000bb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000bb8:	eb43 0002 	adc.w	r0, r3, r2
 8000bbc:	bf08      	it	eq
 8000bbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc2:	4770      	bx	lr

08000bc4 <__aeabi_fmul>:
 8000bc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bcc:	bf1e      	ittt	ne
 8000bce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bd2:	ea92 0f0c 	teqne	r2, ip
 8000bd6:	ea93 0f0c 	teqne	r3, ip
 8000bda:	d06f      	beq.n	8000cbc <__aeabi_fmul+0xf8>
 8000bdc:	441a      	add	r2, r3
 8000bde:	ea80 0c01 	eor.w	ip, r0, r1
 8000be2:	0240      	lsls	r0, r0, #9
 8000be4:	bf18      	it	ne
 8000be6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bea:	d01e      	beq.n	8000c2a <__aeabi_fmul+0x66>
 8000bec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bf8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c04:	bf3e      	ittt	cc
 8000c06:	0049      	lslcc	r1, r1, #1
 8000c08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c0c:	005b      	lslcc	r3, r3, #1
 8000c0e:	ea40 0001 	orr.w	r0, r0, r1
 8000c12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c16:	2afd      	cmp	r2, #253	; 0xfd
 8000c18:	d81d      	bhi.n	8000c56 <__aeabi_fmul+0x92>
 8000c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	4770      	bx	lr
 8000c2a:	f090 0f00 	teq	r0, #0
 8000c2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c32:	bf08      	it	eq
 8000c34:	0249      	lsleq	r1, r1, #9
 8000c36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c3e:	3a7f      	subs	r2, #127	; 0x7f
 8000c40:	bfc2      	ittt	gt
 8000c42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c4a:	4770      	bxgt	lr
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	3a01      	subs	r2, #1
 8000c56:	dc5d      	bgt.n	8000d14 <__aeabi_fmul+0x150>
 8000c58:	f112 0f19 	cmn.w	r2, #25
 8000c5c:	bfdc      	itt	le
 8000c5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c62:	4770      	bxle	lr
 8000c64:	f1c2 0200 	rsb	r2, r2, #0
 8000c68:	0041      	lsls	r1, r0, #1
 8000c6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c6e:	f1c2 0220 	rsb	r2, r2, #32
 8000c72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c7a:	f140 0000 	adc.w	r0, r0, #0
 8000c7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c82:	bf08      	it	eq
 8000c84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c88:	4770      	bx	lr
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c92:	bf02      	ittt	eq
 8000c94:	0040      	lsleq	r0, r0, #1
 8000c96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c9a:	3a01      	subeq	r2, #1
 8000c9c:	d0f9      	beq.n	8000c92 <__aeabi_fmul+0xce>
 8000c9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ca2:	f093 0f00 	teq	r3, #0
 8000ca6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000caa:	bf02      	ittt	eq
 8000cac:	0049      	lsleq	r1, r1, #1
 8000cae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cb2:	3b01      	subeq	r3, #1
 8000cb4:	d0f9      	beq.n	8000caa <__aeabi_fmul+0xe6>
 8000cb6:	ea41 010c 	orr.w	r1, r1, ip
 8000cba:	e78f      	b.n	8000bdc <__aeabi_fmul+0x18>
 8000cbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc0:	ea92 0f0c 	teq	r2, ip
 8000cc4:	bf18      	it	ne
 8000cc6:	ea93 0f0c 	teqne	r3, ip
 8000cca:	d00a      	beq.n	8000ce2 <__aeabi_fmul+0x11e>
 8000ccc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd0:	bf18      	it	ne
 8000cd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cd6:	d1d8      	bne.n	8000c8a <__aeabi_fmul+0xc6>
 8000cd8:	ea80 0001 	eor.w	r0, r0, r1
 8000cdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ce0:	4770      	bx	lr
 8000ce2:	f090 0f00 	teq	r0, #0
 8000ce6:	bf17      	itett	ne
 8000ce8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cec:	4608      	moveq	r0, r1
 8000cee:	f091 0f00 	teqne	r1, #0
 8000cf2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cf6:	d014      	beq.n	8000d22 <__aeabi_fmul+0x15e>
 8000cf8:	ea92 0f0c 	teq	r2, ip
 8000cfc:	d101      	bne.n	8000d02 <__aeabi_fmul+0x13e>
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	d10f      	bne.n	8000d22 <__aeabi_fmul+0x15e>
 8000d02:	ea93 0f0c 	teq	r3, ip
 8000d06:	d103      	bne.n	8000d10 <__aeabi_fmul+0x14c>
 8000d08:	024b      	lsls	r3, r1, #9
 8000d0a:	bf18      	it	ne
 8000d0c:	4608      	movne	r0, r1
 8000d0e:	d108      	bne.n	8000d22 <__aeabi_fmul+0x15e>
 8000d10:	ea80 0001 	eor.w	r0, r0, r1
 8000d14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d20:	4770      	bx	lr
 8000d22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d2a:	4770      	bx	lr

08000d2c <__aeabi_fdiv>:
 8000d2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d34:	bf1e      	ittt	ne
 8000d36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3a:	ea92 0f0c 	teqne	r2, ip
 8000d3e:	ea93 0f0c 	teqne	r3, ip
 8000d42:	d069      	beq.n	8000e18 <__aeabi_fdiv+0xec>
 8000d44:	eba2 0203 	sub.w	r2, r2, r3
 8000d48:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4c:	0249      	lsls	r1, r1, #9
 8000d4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d52:	d037      	beq.n	8000dc4 <__aeabi_fdiv+0x98>
 8000d54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d64:	428b      	cmp	r3, r1
 8000d66:	bf38      	it	cc
 8000d68:	005b      	lslcc	r3, r3, #1
 8000d6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d72:	428b      	cmp	r3, r1
 8000d74:	bf24      	itt	cs
 8000d76:	1a5b      	subcs	r3, r3, r1
 8000d78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d8e:	bf24      	itt	cs
 8000d90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d9c:	bf24      	itt	cs
 8000d9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000da2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	bf18      	it	ne
 8000daa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dae:	d1e0      	bne.n	8000d72 <__aeabi_fdiv+0x46>
 8000db0:	2afd      	cmp	r2, #253	; 0xfd
 8000db2:	f63f af50 	bhi.w	8000c56 <__aeabi_fmul+0x92>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dbc:	bf08      	it	eq
 8000dbe:	f020 0001 	biceq.w	r0, r0, #1
 8000dc2:	4770      	bx	lr
 8000dc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dcc:	327f      	adds	r2, #127	; 0x7f
 8000dce:	bfc2      	ittt	gt
 8000dd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd8:	4770      	bxgt	lr
 8000dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	3a01      	subs	r2, #1
 8000de4:	e737      	b.n	8000c56 <__aeabi_fmul+0x92>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0040      	lsleq	r0, r0, #1
 8000df2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df6:	3a01      	subeq	r2, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fdiv+0xc2>
 8000dfa:	ea40 000c 	orr.w	r0, r0, ip
 8000dfe:	f093 0f00 	teq	r3, #0
 8000e02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	bf02      	ittt	eq
 8000e08:	0049      	lsleq	r1, r1, #1
 8000e0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0e:	3b01      	subeq	r3, #1
 8000e10:	d0f9      	beq.n	8000e06 <__aeabi_fdiv+0xda>
 8000e12:	ea41 010c 	orr.w	r1, r1, ip
 8000e16:	e795      	b.n	8000d44 <__aeabi_fdiv+0x18>
 8000e18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e1c:	ea92 0f0c 	teq	r2, ip
 8000e20:	d108      	bne.n	8000e34 <__aeabi_fdiv+0x108>
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	f47f af7d 	bne.w	8000d22 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	f47f af70 	bne.w	8000d10 <__aeabi_fmul+0x14c>
 8000e30:	4608      	mov	r0, r1
 8000e32:	e776      	b.n	8000d22 <__aeabi_fmul+0x15e>
 8000e34:	ea93 0f0c 	teq	r3, ip
 8000e38:	d104      	bne.n	8000e44 <__aeabi_fdiv+0x118>
 8000e3a:	024b      	lsls	r3, r1, #9
 8000e3c:	f43f af4c 	beq.w	8000cd8 <__aeabi_fmul+0x114>
 8000e40:	4608      	mov	r0, r1
 8000e42:	e76e      	b.n	8000d22 <__aeabi_fmul+0x15e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1ca      	bne.n	8000de6 <__aeabi_fdiv+0xba>
 8000e50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e54:	f47f af5c 	bne.w	8000d10 <__aeabi_fmul+0x14c>
 8000e58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e5c:	f47f af3c 	bne.w	8000cd8 <__aeabi_fmul+0x114>
 8000e60:	e75f      	b.n	8000d22 <__aeabi_fmul+0x15e>
 8000e62:	bf00      	nop

08000e64 <__gesf2>:
 8000e64:	f04f 3cff 	mov.w	ip, #4294967295
 8000e68:	e006      	b.n	8000e78 <__cmpsf2+0x4>
 8000e6a:	bf00      	nop

08000e6c <__lesf2>:
 8000e6c:	f04f 0c01 	mov.w	ip, #1
 8000e70:	e002      	b.n	8000e78 <__cmpsf2+0x4>
 8000e72:	bf00      	nop

08000e74 <__cmpsf2>:
 8000e74:	f04f 0c01 	mov.w	ip, #1
 8000e78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e88:	bf18      	it	ne
 8000e8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e8e:	d011      	beq.n	8000eb4 <__cmpsf2+0x40>
 8000e90:	b001      	add	sp, #4
 8000e92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e96:	bf18      	it	ne
 8000e98:	ea90 0f01 	teqne	r0, r1
 8000e9c:	bf58      	it	pl
 8000e9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ea2:	bf88      	it	hi
 8000ea4:	17c8      	asrhi	r0, r1, #31
 8000ea6:	bf38      	it	cc
 8000ea8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eac:	bf18      	it	ne
 8000eae:	f040 0001 	orrne.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb8:	d102      	bne.n	8000ec0 <__cmpsf2+0x4c>
 8000eba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ebe:	d105      	bne.n	8000ecc <__cmpsf2+0x58>
 8000ec0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ec4:	d1e4      	bne.n	8000e90 <__cmpsf2+0x1c>
 8000ec6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eca:	d0e1      	beq.n	8000e90 <__cmpsf2+0x1c>
 8000ecc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_cfrcmple>:
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	4661      	mov	r1, ip
 8000eda:	e7ff      	b.n	8000edc <__aeabi_cfcmpeq>

08000edc <__aeabi_cfcmpeq>:
 8000edc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ede:	f7ff ffc9 	bl	8000e74 <__cmpsf2>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	bf48      	it	mi
 8000ee6:	f110 0f00 	cmnmi.w	r0, #0
 8000eea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000eec <__aeabi_fcmpeq>:
 8000eec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef0:	f7ff fff4 	bl	8000edc <__aeabi_cfcmpeq>
 8000ef4:	bf0c      	ite	eq
 8000ef6:	2001      	moveq	r0, #1
 8000ef8:	2000      	movne	r0, #0
 8000efa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efe:	bf00      	nop

08000f00 <__aeabi_fcmplt>:
 8000f00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f04:	f7ff ffea 	bl	8000edc <__aeabi_cfcmpeq>
 8000f08:	bf34      	ite	cc
 8000f0a:	2001      	movcc	r0, #1
 8000f0c:	2000      	movcs	r0, #0
 8000f0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f12:	bf00      	nop

08000f14 <__aeabi_fcmple>:
 8000f14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f18:	f7ff ffe0 	bl	8000edc <__aeabi_cfcmpeq>
 8000f1c:	bf94      	ite	ls
 8000f1e:	2001      	movls	r0, #1
 8000f20:	2000      	movhi	r0, #0
 8000f22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f26:	bf00      	nop

08000f28 <__aeabi_fcmpge>:
 8000f28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f2c:	f7ff ffd2 	bl	8000ed4 <__aeabi_cfrcmple>
 8000f30:	bf94      	ite	ls
 8000f32:	2001      	movls	r0, #1
 8000f34:	2000      	movhi	r0, #0
 8000f36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3a:	bf00      	nop

08000f3c <__aeabi_fcmpgt>:
 8000f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f40:	f7ff ffc8 	bl	8000ed4 <__aeabi_cfrcmple>
 8000f44:	bf34      	ite	cc
 8000f46:	2001      	movcc	r0, #1
 8000f48:	2000      	movcs	r0, #0
 8000f4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4e:	bf00      	nop

08000f50 <__aeabi_f2iz>:
 8000f50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f54:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f58:	d30f      	bcc.n	8000f7a <__aeabi_f2iz+0x2a>
 8000f5a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f62:	d90d      	bls.n	8000f80 <__aeabi_f2iz+0x30>
 8000f64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f6c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f70:	fa23 f002 	lsr.w	r0, r3, r2
 8000f74:	bf18      	it	ne
 8000f76:	4240      	negne	r0, r0
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr
 8000f80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f84:	d101      	bne.n	8000f8a <__aeabi_f2iz+0x3a>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	d105      	bne.n	8000f96 <__aeabi_f2iz+0x46>
 8000f8a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f8e:	bf08      	it	eq
 8000f90:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f94:	4770      	bx	lr
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4770      	bx	lr

08000f9c <__aeabi_f2uiz>:
 8000f9c:	0042      	lsls	r2, r0, #1
 8000f9e:	d20e      	bcs.n	8000fbe <__aeabi_f2uiz+0x22>
 8000fa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa4:	d30b      	bcc.n	8000fbe <__aeabi_f2uiz+0x22>
 8000fa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000faa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fae:	d409      	bmi.n	8000fc4 <__aeabi_f2uiz+0x28>
 8000fb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2uiz+0x32>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d102      	bne.n	8000fd4 <__aeabi_f2uiz+0x38>
 8000fce:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd2:	4770      	bx	lr
 8000fd4:	f04f 0000 	mov.w	r0, #0
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_InitTick+0x3c>)
{
 8000fe0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe2:	7818      	ldrb	r0, [r3, #0]
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fec:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_InitTick+0x40>)
 8000fee:	6810      	ldr	r0, [r2, #0]
 8000ff0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff4:	f000 fac8 	bl	8001588 <HAL_SYSTICK_Config>
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	b958      	cbnz	r0, 8001014 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffc:	2d0f      	cmp	r5, #15
 8000ffe:	d809      	bhi.n	8001014 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	4602      	mov	r2, r0
 8001002:	4629      	mov	r1, r5
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 fa7c 	bl	8001504 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_InitTick+0x44>)
 800100e:	4620      	mov	r0, r4
 8001010:	601d      	str	r5, [r3, #0]
 8001012:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001014:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000030 	.word	0x20000030
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x20>)
{
 8001026:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	f000 fa55 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff ffd0 	bl	8000fdc <HAL_InitTick>
  HAL_MspInit();
 800103c:	f003 fa0e 	bl	800445c <HAL_MspInit>
}
 8001040:	2000      	movs	r0, #0
 8001042:	bd08      	pop	{r3, pc}
 8001044:	40022000 	.word	0x40022000

08001048 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001048:	4a03      	ldr	r2, [pc, #12]	; (8001058 <HAL_IncTick+0x10>)
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <HAL_IncTick+0x14>)
 800104c:	6811      	ldr	r1, [r2, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	440b      	add	r3, r1
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000025c 	.word	0x2000025c
 800105c:	20000000 	.word	0x20000000

08001060 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001060:	4b01      	ldr	r3, [pc, #4]	; (8001068 <HAL_GetTick+0x8>)
 8001062:	6818      	ldr	r0, [r3, #0]
}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000025c 	.word	0x2000025c

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff fff6 	bl	8001060 <HAL_GetTick>
 8001074:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001078:	bf1e      	ittt	ne
 800107a:	4b04      	ldrne	r3, [pc, #16]	; (800108c <HAL_Delay+0x20>)
 800107c:	781b      	ldrbne	r3, [r3, #0]
 800107e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	1b40      	subs	r0, r0, r5
 8001086:	4284      	cmp	r4, r0
 8001088:	d8fa      	bhi.n	8001080 <HAL_Delay+0x14>
  {
  }
}
 800108a:	bd38      	pop	{r3, r4, r5, pc}
 800108c:	20000000 	.word	0x20000000

08001090 <HAL_ADC_ConvCpltCallback>:
 8001090:	4770      	bx	lr

08001092 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001092:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001094:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001098:	f012 0f50 	tst.w	r2, #80	; 0x50
 800109c:	d11b      	bne.n	80010d6 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800109e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	6892      	ldr	r2, [r2, #8]
 80010aa:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80010ae:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80010b2:	d10c      	bne.n	80010ce <ADC_DMAConvCplt+0x3c>
 80010b4:	7b1a      	ldrb	r2, [r3, #12]
 80010b6:	b952      	cbnz	r2, 80010ce <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c2:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010c4:	bf5e      	ittt	pl
 80010c6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80010c8:	f042 0201 	orrpl.w	r2, r2, #1
 80010cc:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffde 	bl	8001090 <HAL_ADC_ConvCpltCallback>
 80010d4:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010d6:	6a1b      	ldr	r3, [r3, #32]
  }
}
 80010d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4718      	bx	r3

080010e0 <HAL_ADC_ConvHalfCpltCallback>:
 80010e0:	4770      	bx	lr

080010e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80010e2:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80010e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80010e6:	f7ff fffb 	bl	80010e0 <HAL_ADC_ConvHalfCpltCallback>
 80010ea:	bd08      	pop	{r3, pc}

080010ec <HAL_ADC_ErrorCallback>:
{
 80010ec:	4770      	bx	lr

080010ee <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80010f0:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001102:	f7ff fff3 	bl	80010ec <HAL_ADC_ErrorCallback>
 8001106:	bd08      	pop	{r3, pc}

08001108 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001108:	2300      	movs	r3, #0
{ 
 800110a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800110c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800110e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001112:	2b01      	cmp	r3, #1
 8001114:	d074      	beq.n	8001200 <HAL_ADC_ConfigChannel+0xf8>
 8001116:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001118:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800111a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800111e:	2d06      	cmp	r5, #6
 8001120:	6802      	ldr	r2, [r0, #0]
 8001122:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001126:	680c      	ldr	r4, [r1, #0]
 8001128:	d825      	bhi.n	8001176 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800112a:	442b      	add	r3, r5
 800112c:	251f      	movs	r5, #31
 800112e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001130:	3b05      	subs	r3, #5
 8001132:	409d      	lsls	r5, r3
 8001134:	ea26 0505 	bic.w	r5, r6, r5
 8001138:	fa04 f303 	lsl.w	r3, r4, r3
 800113c:	432b      	orrs	r3, r5
 800113e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001140:	2c09      	cmp	r4, #9
 8001142:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001146:	688d      	ldr	r5, [r1, #8]
 8001148:	d92f      	bls.n	80011aa <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800114a:	2607      	movs	r6, #7
 800114c:	4423      	add	r3, r4
 800114e:	68d1      	ldr	r1, [r2, #12]
 8001150:	3b1e      	subs	r3, #30
 8001152:	409e      	lsls	r6, r3
 8001154:	ea21 0106 	bic.w	r1, r1, r6
 8001158:	fa05 f303 	lsl.w	r3, r5, r3
 800115c:	430b      	orrs	r3, r1
 800115e:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001160:	f1a4 0310 	sub.w	r3, r4, #16
 8001164:	2b01      	cmp	r3, #1
 8001166:	d92b      	bls.n	80011c0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001168:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800116a:	2200      	movs	r2, #0
 800116c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8001170:	4618      	mov	r0, r3
 8001172:	b002      	add	sp, #8
 8001174:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001176:	2d0c      	cmp	r5, #12
 8001178:	d80b      	bhi.n	8001192 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800117a:	442b      	add	r3, r5
 800117c:	251f      	movs	r5, #31
 800117e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001180:	3b23      	subs	r3, #35	; 0x23
 8001182:	409d      	lsls	r5, r3
 8001184:	ea26 0505 	bic.w	r5, r6, r5
 8001188:	fa04 f303 	lsl.w	r3, r4, r3
 800118c:	432b      	orrs	r3, r5
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	e7d6      	b.n	8001140 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001192:	442b      	add	r3, r5
 8001194:	251f      	movs	r5, #31
 8001196:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001198:	3b41      	subs	r3, #65	; 0x41
 800119a:	409d      	lsls	r5, r3
 800119c:	ea26 0505 	bic.w	r5, r6, r5
 80011a0:	fa04 f303 	lsl.w	r3, r4, r3
 80011a4:	432b      	orrs	r3, r5
 80011a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011a8:	e7ca      	b.n	8001140 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011aa:	2607      	movs	r6, #7
 80011ac:	6911      	ldr	r1, [r2, #16]
 80011ae:	4423      	add	r3, r4
 80011b0:	409e      	lsls	r6, r3
 80011b2:	ea21 0106 	bic.w	r1, r1, r6
 80011b6:	fa05 f303 	lsl.w	r3, r5, r3
 80011ba:	430b      	orrs	r3, r1
 80011bc:	6113      	str	r3, [r2, #16]
 80011be:	e7cf      	b.n	8001160 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_ADC_ConfigChannel+0xfc>)
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d116      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011c6:	6893      	ldr	r3, [r2, #8]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	d4cd      	bmi.n	8001168 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011cc:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011ce:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011d4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011d6:	d1c7      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_ADC_ConfigChannel+0x100>)
 80011da:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_ADC_ConfigChannel+0x104>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	fbb3 f2f2 	udiv	r2, r3, r2
 80011e2:	230a      	movs	r3, #10
 80011e4:	4353      	muls	r3, r2
            wait_loop_index--;
 80011e6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80011e8:	9b01      	ldr	r3, [sp, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0bc      	beq.n	8001168 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80011ee:	9b01      	ldr	r3, [sp, #4]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	e7f8      	b.n	80011e6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011f6:	f043 0320 	orr.w	r3, r3, #32
 80011fa:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e7b4      	b.n	800116a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001200:	2302      	movs	r3, #2
 8001202:	e7b5      	b.n	8001170 <HAL_ADC_ConfigChannel+0x68>
 8001204:	40012400 	.word	0x40012400
 8001208:	20000030 	.word	0x20000030
 800120c:	000f4240 	.word	0x000f4240

08001210 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001210:	2300      	movs	r3, #0
{
 8001212:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001214:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001216:	6803      	ldr	r3, [r0, #0]
{
 8001218:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	07d2      	lsls	r2, r2, #31
 800121e:	d502      	bpl.n	8001226 <ADC_Enable+0x16>
  return HAL_OK;
 8001220:	2000      	movs	r0, #0
}
 8001222:	b002      	add	sp, #8
 8001224:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <ADC_Enable+0x68>)
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <ADC_Enable+0x6c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001238:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800123a:	9b01      	ldr	r3, [sp, #4]
 800123c:	b9c3      	cbnz	r3, 8001270 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800123e:	f7ff ff0f 	bl	8001060 <HAL_GetTick>
 8001242:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	689d      	ldr	r5, [r3, #8]
 8001248:	f015 0501 	ands.w	r5, r5, #1
 800124c:	d1e8      	bne.n	8001220 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800124e:	f7ff ff07 	bl	8001060 <HAL_GetTick>
 8001252:	1b80      	subs	r0, r0, r6
 8001254:	2802      	cmp	r0, #2
 8001256:	d9f5      	bls.n	8001244 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001258:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800125a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001264:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001266:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800126e:	e7d8      	b.n	8001222 <ADC_Enable+0x12>
      wait_loop_index--;
 8001270:	9b01      	ldr	r3, [sp, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	e7e0      	b.n	8001238 <ADC_Enable+0x28>
 8001276:	bf00      	nop
 8001278:	20000030 	.word	0x20000030
 800127c:	000f4240 	.word	0x000f4240

08001280 <HAL_ADC_Start_DMA>:
{
 8001280:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8001284:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001286:	4b40      	ldr	r3, [pc, #256]	; (8001388 <HAL_ADC_Start_DMA+0x108>)
 8001288:	6802      	ldr	r2, [r0, #0]
{
 800128a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800128c:	429a      	cmp	r2, r3
{
 800128e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001290:	d002      	beq.n	8001298 <HAL_ADC_Start_DMA+0x18>
 8001292:	493e      	ldr	r1, [pc, #248]	; (800138c <HAL_ADC_Start_DMA+0x10c>)
 8001294:	428a      	cmp	r2, r1
 8001296:	d103      	bne.n	80012a0 <HAL_ADC_Start_DMA+0x20>
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800129e:	d16e      	bne.n	800137e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80012a0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d06c      	beq.n	8001382 <HAL_ADC_Start_DMA+0x102>
 80012a8:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80012aa:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80012ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80012b0:	f7ff ffae 	bl	8001210 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80012b4:	4606      	mov	r6, r0
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d15d      	bne.n	8001376 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80012ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012bc:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80012be:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012c2:	4b32      	ldr	r3, [pc, #200]	; (800138c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80012c4:	f020 0001 	bic.w	r0, r0, #1
 80012c8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012cc:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80012ce:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012d0:	d104      	bne.n	80012dc <HAL_ADC_Start_DMA+0x5c>
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <HAL_ADC_Start_DMA+0x108>)
 80012d4:	6853      	ldr	r3, [r2, #4]
 80012d6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80012da:	d13e      	bne.n	800135a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012e2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012e4:	684b      	ldr	r3, [r1, #4]
 80012e6:	055a      	lsls	r2, r3, #21
 80012e8:	d505      	bpl.n	80012f6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012f8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012fa:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012fe:	bf18      	it	ne
 8001300:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001302:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001304:	bf18      	it	ne
 8001306:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800130a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800130c:	2300      	movs	r3, #0
 800130e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001314:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001316:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_ADC_Start_DMA+0x114>)
 800131a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_ADC_Start_DMA+0x118>)
 800131e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001320:	f06f 0302 	mvn.w	r3, #2
 8001324:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001328:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001334:	4643      	mov	r3, r8
 8001336:	f000 f96d 	bl	8001614 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001342:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	bf0c      	ite	eq
 800134a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800134e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001352:	609a      	str	r2, [r3, #8]
}
 8001354:	4630      	mov	r0, r6
 8001356:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800135a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800135c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001360:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001362:	6853      	ldr	r3, [r2, #4]
 8001364:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001366:	bf41      	itttt	mi
 8001368:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800136a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800136e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001372:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001374:	e7bf      	b.n	80012f6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001376:	2300      	movs	r3, #0
 8001378:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800137c:	e7ea      	b.n	8001354 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800137e:	2601      	movs	r6, #1
 8001380:	e7e8      	b.n	8001354 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001382:	2602      	movs	r6, #2
 8001384:	e7e6      	b.n	8001354 <HAL_ADC_Start_DMA+0xd4>
 8001386:	bf00      	nop
 8001388:	40012400 	.word	0x40012400
 800138c:	40012800 	.word	0x40012800
 8001390:	08001093 	.word	0x08001093
 8001394:	080010e3 	.word	0x080010e3
 8001398:	080010ef 	.word	0x080010ef

0800139c <ADC_ConversionStop_Disable>:
{
 800139c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800139e:	6803      	ldr	r3, [r0, #0]
{
 80013a0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	07d2      	lsls	r2, r2, #31
 80013a6:	d401      	bmi.n	80013ac <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80013a8:	2000      	movs	r0, #0
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80013b4:	f7ff fe54 	bl	8001060 <HAL_GetTick>
 80013b8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	07db      	lsls	r3, r3, #31
 80013c0:	d5f2      	bpl.n	80013a8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013c2:	f7ff fe4d 	bl	8001060 <HAL_GetTick>
 80013c6:	1b40      	subs	r0, r0, r5
 80013c8:	2802      	cmp	r0, #2
 80013ca:	d9f6      	bls.n	80013ba <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013de:	bd38      	pop	{r3, r4, r5, pc}

080013e0 <HAL_ADC_Init>:
{
 80013e0:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80013e2:	4604      	mov	r4, r0
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d071      	beq.n	80014cc <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013ea:	b923      	cbnz	r3, 80013f6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80013ec:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80013ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80013f2:	f002 fafb 	bl	80039ec <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff ffd0 	bl	800139c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013fe:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001404:	d164      	bne.n	80014d0 <HAL_ADC_Init+0xf0>
 8001406:	2800      	cmp	r0, #0
 8001408:	d162      	bne.n	80014d0 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800140a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800140c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001410:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001412:	f023 0302 	bic.w	r3, r3, #2
 8001416:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800141a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800141c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800141e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001420:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001422:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001426:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800142a:	d038      	beq.n	800149e <HAL_ADC_Init+0xbe>
 800142c:	2901      	cmp	r1, #1
 800142e:	bf14      	ite	ne
 8001430:	4606      	movne	r6, r0
 8001432:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001436:	7d25      	ldrb	r5, [r4, #20]
 8001438:	2d01      	cmp	r5, #1
 800143a:	d107      	bne.n	800144c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800143c:	2b00      	cmp	r3, #0
 800143e:	d130      	bne.n	80014a2 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001440:	69a3      	ldr	r3, [r4, #24]
 8001442:	3b01      	subs	r3, #1
 8001444:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001448:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800144c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800144e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001452:	685d      	ldr	r5, [r3, #4]
 8001454:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001458:	ea45 0506 	orr.w	r5, r5, r6
 800145c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800145e:	689e      	ldr	r6, [r3, #8]
 8001460:	4d1d      	ldr	r5, [pc, #116]	; (80014d8 <HAL_ADC_Init+0xf8>)
 8001462:	ea05 0506 	and.w	r5, r5, r6
 8001466:	ea45 0502 	orr.w	r5, r5, r2
 800146a:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800146c:	d001      	beq.n	8001472 <HAL_ADC_Init+0x92>
 800146e:	2901      	cmp	r1, #1
 8001470:	d120      	bne.n	80014b4 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001472:	6921      	ldr	r1, [r4, #16]
 8001474:	3901      	subs	r1, #1
 8001476:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001478:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800147a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800147e:	4329      	orrs	r1, r5
 8001480:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001482:	6899      	ldr	r1, [r3, #8]
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_ADC_Init+0xfc>)
 8001486:	400b      	ands	r3, r1
 8001488:	429a      	cmp	r2, r3
 800148a:	d115      	bne.n	80014b8 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 800148c:	2300      	movs	r3, #0
 800148e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	62a3      	str	r3, [r4, #40]	; 0x28
 800149c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800149e:	460e      	mov	r6, r1
 80014a0:	e7c9      	b.n	8001436 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014b2:	e7cb      	b.n	800144c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80014b4:	2100      	movs	r1, #0
 80014b6:	e7df      	b.n	8001478 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80014b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014ba:	f023 0312 	bic.w	r3, r3, #18
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80014cc:	2001      	movs	r0, #1
}
 80014ce:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80014d6:	e7f9      	b.n	80014cc <HAL_ADC_Init+0xec>
 80014d8:	ffe1f7fd 	.word	0xffe1f7fd
 80014dc:	ff1f0efe 	.word	0xff1f0efe

080014e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	0c1b      	lsrs	r3, r3, #16
 80014f2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80014fa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80014fc:	60d3      	str	r3, [r2, #12]
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001506:	b530      	push	{r4, r5, lr}
 8001508:	68dc      	ldr	r4, [r3, #12]
 800150a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	2b04      	cmp	r3, #4
 8001516:	bf28      	it	cs
 8001518:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001520:	bf98      	it	ls
 8001522:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	fa05 f303 	lsl.w	r3, r5, r3
 8001528:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152c:	bf88      	it	hi
 800152e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4019      	ands	r1, r3
 8001532:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	fa05 f404 	lsl.w	r4, r5, r4
 8001538:	3c01      	subs	r4, #1
 800153a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800153c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153e:	ea42 0201 	orr.w	r2, r2, r1
 8001542:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	bfa9      	itett	ge
 8001548:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	4b06      	ldrlt	r3, [pc, #24]	; (8001568 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	b2d2      	uxtbge	r2, r2
 8001550:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	bfbb      	ittet	lt
 8001556:	f000 000f 	andlt.w	r0, r0, #15
 800155a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	541a      	strblt	r2, [r3, r0]
 8001562:	bd30      	pop	{r4, r5, pc}
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	e000ed14 	.word	0xe000ed14

0800156c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800156c:	2800      	cmp	r0, #0
 800156e:	db08      	blt.n	8001582 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001570:	2301      	movs	r3, #1
 8001572:	0942      	lsrs	r2, r0, #5
 8001574:	f000 001f 	and.w	r0, r0, #31
 8001578:	fa03 f000 	lsl.w	r0, r3, r0
 800157c:	4b01      	ldr	r3, [pc, #4]	; (8001584 <HAL_NVIC_EnableIRQ+0x18>)
 800157e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100

08001588 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	3801      	subs	r0, #1
 800158a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800158e:	d20a      	bcs.n	80015a6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015b6:	b330      	cbz	r0, 8001606 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015b8:	2214      	movs	r2, #20
 80015ba:	6801      	ldr	r1, [r0, #0]
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015be:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015c0:	440b      	add	r3, r1
 80015c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80015cc:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80015ce:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80015d0:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015d2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80015d6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015da:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015de:	4323      	orrs	r3, r4
 80015e0:	6904      	ldr	r4, [r0, #16]
 80015e2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e4:	6944      	ldr	r4, [r0, #20]
 80015e6:	4323      	orrs	r3, r4
 80015e8:	6984      	ldr	r4, [r0, #24]
 80015ea:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ec:	69c4      	ldr	r4, [r0, #28]
 80015ee:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80015f0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015f2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015f4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f6:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80015f8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fc:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015fe:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001602:	4618      	mov	r0, r3
 8001604:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001606:	2001      	movs	r0, #1
}
 8001608:	bd10      	pop	{r4, pc}
 800160a:	bf00      	nop
 800160c:	bffdfff8 	.word	0xbffdfff8
 8001610:	40020000 	.word	0x40020000

08001614 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001616:	f890 4020 	ldrb.w	r4, [r0, #32]
 800161a:	2c01      	cmp	r4, #1
 800161c:	d035      	beq.n	800168a <HAL_DMA_Start_IT+0x76>
 800161e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001620:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001624:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001628:	42a5      	cmp	r5, r4
 800162a:	f04f 0600 	mov.w	r6, #0
 800162e:	f04f 0402 	mov.w	r4, #2
 8001632:	d128      	bne.n	8001686 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001634:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001638:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800163c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800163e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001640:	f026 0601 	bic.w	r6, r6, #1
 8001644:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001646:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001648:	40bd      	lsls	r5, r7
 800164a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800164c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800164e:	6843      	ldr	r3, [r0, #4]
 8001650:	6805      	ldr	r5, [r0, #0]
 8001652:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001654:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001656:	bf0b      	itete	eq
 8001658:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800165a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800165c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800165e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001660:	b14b      	cbz	r3, 8001676 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001668:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800166a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800166c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	602b      	str	r3, [r5, #0]
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	f043 030a 	orr.w	r3, r3, #10
 8001684:	e7f0      	b.n	8001668 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001686:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800168a:	2002      	movs	r0, #2
}
 800168c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001690 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001690:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001694:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001696:	2b02      	cmp	r3, #2
 8001698:	d003      	beq.n	80016a2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169a:	2304      	movs	r3, #4
 800169c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800169e:	2001      	movs	r0, #1
 80016a0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a2:	6803      	ldr	r3, [r0, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	f022 020e 	bic.w	r2, r2, #14
 80016aa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016b4:	4a18      	ldr	r2, [pc, #96]	; (8001718 <HAL_DMA_Abort_IT+0x88>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d01f      	beq.n	80016fa <HAL_DMA_Abort_IT+0x6a>
 80016ba:	3214      	adds	r2, #20
 80016bc:	4293      	cmp	r3, r2
 80016be:	d01e      	beq.n	80016fe <HAL_DMA_Abort_IT+0x6e>
 80016c0:	3214      	adds	r2, #20
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01d      	beq.n	8001702 <HAL_DMA_Abort_IT+0x72>
 80016c6:	3214      	adds	r2, #20
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d01d      	beq.n	8001708 <HAL_DMA_Abort_IT+0x78>
 80016cc:	3214      	adds	r2, #20
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01d      	beq.n	800170e <HAL_DMA_Abort_IT+0x7e>
 80016d2:	3214      	adds	r2, #20
 80016d4:	4293      	cmp	r3, r2
 80016d6:	bf0c      	ite	eq
 80016d8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80016dc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80016e2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016e4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80016ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80016ee:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80016f2:	b17b      	cbz	r3, 8001714 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80016f4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80016f6:	4620      	mov	r0, r4
 80016f8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016fa:	2301      	movs	r3, #1
 80016fc:	e7f0      	b.n	80016e0 <HAL_DMA_Abort_IT+0x50>
 80016fe:	2310      	movs	r3, #16
 8001700:	e7ee      	b.n	80016e0 <HAL_DMA_Abort_IT+0x50>
 8001702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001706:	e7eb      	b.n	80016e0 <HAL_DMA_Abort_IT+0x50>
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	e7e8      	b.n	80016e0 <HAL_DMA_Abort_IT+0x50>
 800170e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001712:	e7e5      	b.n	80016e0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001714:	4618      	mov	r0, r3
}
 8001716:	bd10      	pop	{r4, pc}
 8001718:	40020008 	.word	0x40020008
 800171c:	40020000 	.word	0x40020000

08001720 <HAL_DMA_IRQHandler>:
{
 8001720:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001722:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001724:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001726:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001728:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800172a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800172c:	4095      	lsls	r5, r2
 800172e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001730:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001732:	d032      	beq.n	800179a <HAL_DMA_IRQHandler+0x7a>
 8001734:	074d      	lsls	r5, r1, #29
 8001736:	d530      	bpl.n	800179a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800173c:	bf5e      	ittt	pl
 800173e:	681a      	ldrpl	r2, [r3, #0]
 8001740:	f022 0204 	bicpl.w	r2, r2, #4
 8001744:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001746:	4a3e      	ldr	r2, [pc, #248]	; (8001840 <HAL_DMA_IRQHandler+0x120>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d019      	beq.n	8001780 <HAL_DMA_IRQHandler+0x60>
 800174c:	3214      	adds	r2, #20
 800174e:	4293      	cmp	r3, r2
 8001750:	d018      	beq.n	8001784 <HAL_DMA_IRQHandler+0x64>
 8001752:	3214      	adds	r2, #20
 8001754:	4293      	cmp	r3, r2
 8001756:	d017      	beq.n	8001788 <HAL_DMA_IRQHandler+0x68>
 8001758:	3214      	adds	r2, #20
 800175a:	4293      	cmp	r3, r2
 800175c:	d017      	beq.n	800178e <HAL_DMA_IRQHandler+0x6e>
 800175e:	3214      	adds	r2, #20
 8001760:	4293      	cmp	r3, r2
 8001762:	d017      	beq.n	8001794 <HAL_DMA_IRQHandler+0x74>
 8001764:	3214      	adds	r2, #20
 8001766:	4293      	cmp	r3, r2
 8001768:	bf0c      	ite	eq
 800176a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800176e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001772:	4a34      	ldr	r2, [pc, #208]	; (8001844 <HAL_DMA_IRQHandler+0x124>)
 8001774:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001776:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001778:	2b00      	cmp	r3, #0
 800177a:	d05e      	beq.n	800183a <HAL_DMA_IRQHandler+0x11a>
}
 800177c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800177e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001780:	2304      	movs	r3, #4
 8001782:	e7f6      	b.n	8001772 <HAL_DMA_IRQHandler+0x52>
 8001784:	2340      	movs	r3, #64	; 0x40
 8001786:	e7f4      	b.n	8001772 <HAL_DMA_IRQHandler+0x52>
 8001788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178c:	e7f1      	b.n	8001772 <HAL_DMA_IRQHandler+0x52>
 800178e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001792:	e7ee      	b.n	8001772 <HAL_DMA_IRQHandler+0x52>
 8001794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001798:	e7eb      	b.n	8001772 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800179a:	2502      	movs	r5, #2
 800179c:	4095      	lsls	r5, r2
 800179e:	4225      	tst	r5, r4
 80017a0:	d035      	beq.n	800180e <HAL_DMA_IRQHandler+0xee>
 80017a2:	078d      	lsls	r5, r1, #30
 80017a4:	d533      	bpl.n	800180e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	0694      	lsls	r4, r2, #26
 80017aa:	d406      	bmi.n	80017ba <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	f022 020a 	bic.w	r2, r2, #10
 80017b2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80017b4:	2201      	movs	r2, #1
 80017b6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017ba:	4a21      	ldr	r2, [pc, #132]	; (8001840 <HAL_DMA_IRQHandler+0x120>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d019      	beq.n	80017f4 <HAL_DMA_IRQHandler+0xd4>
 80017c0:	3214      	adds	r2, #20
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d018      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xd8>
 80017c6:	3214      	adds	r2, #20
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d017      	beq.n	80017fc <HAL_DMA_IRQHandler+0xdc>
 80017cc:	3214      	adds	r2, #20
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d017      	beq.n	8001802 <HAL_DMA_IRQHandler+0xe2>
 80017d2:	3214      	adds	r2, #20
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d017      	beq.n	8001808 <HAL_DMA_IRQHandler+0xe8>
 80017d8:	3214      	adds	r2, #20
 80017da:	4293      	cmp	r3, r2
 80017dc:	bf0c      	ite	eq
 80017de:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80017e2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_DMA_IRQHandler+0x124>)
 80017e8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80017ea:	2300      	movs	r3, #0
 80017ec:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80017f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80017f2:	e7c1      	b.n	8001778 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017f4:	2302      	movs	r3, #2
 80017f6:	e7f6      	b.n	80017e6 <HAL_DMA_IRQHandler+0xc6>
 80017f8:	2320      	movs	r3, #32
 80017fa:	e7f4      	b.n	80017e6 <HAL_DMA_IRQHandler+0xc6>
 80017fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001800:	e7f1      	b.n	80017e6 <HAL_DMA_IRQHandler+0xc6>
 8001802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001806:	e7ee      	b.n	80017e6 <HAL_DMA_IRQHandler+0xc6>
 8001808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180c:	e7eb      	b.n	80017e6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800180e:	2508      	movs	r5, #8
 8001810:	4095      	lsls	r5, r2
 8001812:	4225      	tst	r5, r4
 8001814:	d011      	beq.n	800183a <HAL_DMA_IRQHandler+0x11a>
 8001816:	0709      	lsls	r1, r1, #28
 8001818:	d50f      	bpl.n	800183a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	f021 010e 	bic.w	r1, r1, #14
 8001820:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001822:	2301      	movs	r3, #1
 8001824:	fa03 f202 	lsl.w	r2, r3, r2
 8001828:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800182a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800182c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001830:	2300      	movs	r3, #0
 8001832:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001836:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001838:	e79e      	b.n	8001778 <HAL_DMA_IRQHandler+0x58>
}
 800183a:	bc70      	pop	{r4, r5, r6}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40020008 	.word	0x40020008
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800184e:	4626      	mov	r6, r4
 8001850:	4b66      	ldr	r3, [pc, #408]	; (80019ec <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001852:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80019fc <HAL_GPIO_Init+0x1b4>
 8001856:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001a00 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185a:	680a      	ldr	r2, [r1, #0]
 800185c:	fa32 f506 	lsrs.w	r5, r2, r6
 8001860:	d102      	bne.n	8001868 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001862:	b003      	add	sp, #12
 8001864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001868:	f04f 0801 	mov.w	r8, #1
 800186c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001870:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001874:	4590      	cmp	r8, r2
 8001876:	d17f      	bne.n	8001978 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8001878:	684d      	ldr	r5, [r1, #4]
 800187a:	2d12      	cmp	r5, #18
 800187c:	f000 80aa 	beq.w	80019d4 <HAL_GPIO_Init+0x18c>
 8001880:	f200 8083 	bhi.w	800198a <HAL_GPIO_Init+0x142>
 8001884:	2d02      	cmp	r5, #2
 8001886:	f000 80a2 	beq.w	80019ce <HAL_GPIO_Init+0x186>
 800188a:	d877      	bhi.n	800197c <HAL_GPIO_Init+0x134>
 800188c:	2d00      	cmp	r5, #0
 800188e:	f000 8089 	beq.w	80019a4 <HAL_GPIO_Init+0x15c>
 8001892:	2d01      	cmp	r5, #1
 8001894:	f000 8099 	beq.w	80019ca <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001898:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800189c:	2aff      	cmp	r2, #255	; 0xff
 800189e:	bf93      	iteet	ls
 80018a0:	4682      	movls	sl, r0
 80018a2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80018a6:	3d08      	subhi	r5, #8
 80018a8:	f8d0 b000 	ldrls.w	fp, [r0]
 80018ac:	bf92      	itee	ls
 80018ae:	00b5      	lslls	r5, r6, #2
 80018b0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80018b4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b6:	fa09 f805 	lsl.w	r8, r9, r5
 80018ba:	ea2b 0808 	bic.w	r8, fp, r8
 80018be:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c2:	bf88      	it	hi
 80018c4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c8:	ea48 0505 	orr.w	r5, r8, r5
 80018cc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80018d4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80018d8:	d04e      	beq.n	8001978 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018da:	4d45      	ldr	r5, [pc, #276]	; (80019f0 <HAL_GPIO_Init+0x1a8>)
 80018dc:	4f44      	ldr	r7, [pc, #272]	; (80019f0 <HAL_GPIO_Init+0x1a8>)
 80018de:	69ad      	ldr	r5, [r5, #24]
 80018e0:	f026 0803 	bic.w	r8, r6, #3
 80018e4:	f045 0501 	orr.w	r5, r5, #1
 80018e8:	61bd      	str	r5, [r7, #24]
 80018ea:	69bd      	ldr	r5, [r7, #24]
 80018ec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80018f0:	f005 0501 	and.w	r5, r5, #1
 80018f4:	9501      	str	r5, [sp, #4]
 80018f6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018fa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018fe:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001900:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001904:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001908:	fa09 f90b 	lsl.w	r9, r9, fp
 800190c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001910:	4d38      	ldr	r5, [pc, #224]	; (80019f4 <HAL_GPIO_Init+0x1ac>)
 8001912:	42a8      	cmp	r0, r5
 8001914:	d063      	beq.n	80019de <HAL_GPIO_Init+0x196>
 8001916:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800191a:	42a8      	cmp	r0, r5
 800191c:	d061      	beq.n	80019e2 <HAL_GPIO_Init+0x19a>
 800191e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001922:	42a8      	cmp	r0, r5
 8001924:	d05f      	beq.n	80019e6 <HAL_GPIO_Init+0x19e>
 8001926:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800192a:	42a8      	cmp	r0, r5
 800192c:	bf0c      	ite	eq
 800192e:	2503      	moveq	r5, #3
 8001930:	2504      	movne	r5, #4
 8001932:	fa05 f50b 	lsl.w	r5, r5, fp
 8001936:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800193a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800193e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001940:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001944:	bf14      	ite	ne
 8001946:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001948:	4395      	biceq	r5, r2
 800194a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800194c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800194e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001952:	bf14      	ite	ne
 8001954:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001956:	4395      	biceq	r5, r2
 8001958:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800195a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001960:	bf14      	ite	ne
 8001962:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001964:	4395      	biceq	r5, r2
 8001966:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001968:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800196a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800196e:	bf14      	ite	ne
 8001970:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001972:	ea25 0202 	biceq.w	r2, r5, r2
 8001976:	60da      	str	r2, [r3, #12]
	position++;
 8001978:	3601      	adds	r6, #1
 800197a:	e76e      	b.n	800185a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800197c:	2d03      	cmp	r5, #3
 800197e:	d022      	beq.n	80019c6 <HAL_GPIO_Init+0x17e>
 8001980:	2d11      	cmp	r5, #17
 8001982:	d189      	bne.n	8001898 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001984:	68cc      	ldr	r4, [r1, #12]
 8001986:	3404      	adds	r4, #4
          break;
 8001988:	e786      	b.n	8001898 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800198a:	4f1b      	ldr	r7, [pc, #108]	; (80019f8 <HAL_GPIO_Init+0x1b0>)
 800198c:	42bd      	cmp	r5, r7
 800198e:	d009      	beq.n	80019a4 <HAL_GPIO_Init+0x15c>
 8001990:	d812      	bhi.n	80019b8 <HAL_GPIO_Init+0x170>
 8001992:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001a04 <HAL_GPIO_Init+0x1bc>
 8001996:	454d      	cmp	r5, r9
 8001998:	d004      	beq.n	80019a4 <HAL_GPIO_Init+0x15c>
 800199a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800199e:	454d      	cmp	r5, r9
 80019a0:	f47f af7a 	bne.w	8001898 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019a4:	688c      	ldr	r4, [r1, #8]
 80019a6:	b1c4      	cbz	r4, 80019da <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80019aa:	bf0c      	ite	eq
 80019ac:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80019b0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2408      	movs	r4, #8
 80019b6:	e76f      	b.n	8001898 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80019b8:	4575      	cmp	r5, lr
 80019ba:	d0f3      	beq.n	80019a4 <HAL_GPIO_Init+0x15c>
 80019bc:	4565      	cmp	r5, ip
 80019be:	d0f1      	beq.n	80019a4 <HAL_GPIO_Init+0x15c>
 80019c0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001a08 <HAL_GPIO_Init+0x1c0>
 80019c4:	e7eb      	b.n	800199e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c6:	2400      	movs	r4, #0
 80019c8:	e766      	b.n	8001898 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ca:	68cc      	ldr	r4, [r1, #12]
          break;
 80019cc:	e764      	b.n	8001898 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ce:	68cc      	ldr	r4, [r1, #12]
 80019d0:	3408      	adds	r4, #8
          break;
 80019d2:	e761      	b.n	8001898 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d4:	68cc      	ldr	r4, [r1, #12]
 80019d6:	340c      	adds	r4, #12
          break;
 80019d8:	e75e      	b.n	8001898 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019da:	2404      	movs	r4, #4
 80019dc:	e75c      	b.n	8001898 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019de:	2500      	movs	r5, #0
 80019e0:	e7a7      	b.n	8001932 <HAL_GPIO_Init+0xea>
 80019e2:	2501      	movs	r5, #1
 80019e4:	e7a5      	b.n	8001932 <HAL_GPIO_Init+0xea>
 80019e6:	2502      	movs	r5, #2
 80019e8:	e7a3      	b.n	8001932 <HAL_GPIO_Init+0xea>
 80019ea:	bf00      	nop
 80019ec:	40010400 	.word	0x40010400
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010800 	.word	0x40010800
 80019f8:	10210000 	.word	0x10210000
 80019fc:	10310000 	.word	0x10310000
 8001a00:	10320000 	.word	0x10320000
 8001a04:	10110000 	.word	0x10110000
 8001a08:	10220000 	.word	0x10220000

08001a0c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a0c:	6801      	ldr	r1, [r0, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	694b      	ldr	r3, [r1, #20]
 8001a12:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001a16:	d010      	beq.n	8001a3a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a18:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001a1c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a1e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a20:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a22:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a26:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a2a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001a36:	2001      	movs	r0, #1
 8001a38:	4770      	bx	lr
  }
  return HAL_OK;
 8001a3a:	4618      	mov	r0, r3
}
 8001a3c:	4770      	bx	lr

08001a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001a3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a42:	4604      	mov	r4, r0
 8001a44:	4617      	mov	r7, r2
 8001a46:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a48:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001a4c:	b28e      	uxth	r6, r1
 8001a4e:	6825      	ldr	r5, [r4, #0]
 8001a50:	f1b8 0f01 	cmp.w	r8, #1
 8001a54:	bf0c      	ite	eq
 8001a56:	696b      	ldreq	r3, [r5, #20]
 8001a58:	69ab      	ldrne	r3, [r5, #24]
 8001a5a:	ea36 0303 	bics.w	r3, r6, r3
 8001a5e:	bf14      	ite	ne
 8001a60:	2001      	movne	r0, #1
 8001a62:	2000      	moveq	r0, #0
 8001a64:	b908      	cbnz	r0, 8001a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a6a:	696b      	ldr	r3, [r5, #20]
 8001a6c:	055a      	lsls	r2, r3, #21
 8001a6e:	d516      	bpl.n	8001a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a72:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a78:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a7a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001a7e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a84:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a8e:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a92:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001a94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001a98:	2001      	movs	r0, #1
 8001a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	1c7b      	adds	r3, r7, #1
 8001aa0:	d0d5      	beq.n	8001a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa2:	f7ff fadd 	bl	8001060 <HAL_GetTick>
 8001aa6:	eba0 0009 	sub.w	r0, r0, r9
 8001aaa:	4287      	cmp	r7, r0
 8001aac:	d301      	bcc.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8001aae:	2f00      	cmp	r7, #0
 8001ab0:	d1cd      	bne.n	8001a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ab4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ab8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001abc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ac0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ac2:	f042 0220 	orr.w	r2, r2, #32
 8001ac6:	e7e4      	b.n	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08001ac8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4604      	mov	r4, r0
 8001acc:	460d      	mov	r5, r1
 8001ace:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	075b      	lsls	r3, r3, #29
 8001ad6:	d501      	bpl.n	8001adc <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001ad8:	2000      	movs	r0, #0
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001adc:	4620      	mov	r0, r4
 8001ade:	f7ff ff95 	bl	8001a0c <I2C_IsAcknowledgeFailed>
 8001ae2:	b9a8      	cbnz	r0, 8001b10 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001ae4:	1c6a      	adds	r2, r5, #1
 8001ae6:	d0f3      	beq.n	8001ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae8:	f7ff faba 	bl	8001060 <HAL_GetTick>
 8001aec:	1b80      	subs	r0, r0, r6
 8001aee:	4285      	cmp	r5, r0
 8001af0:	d301      	bcc.n	8001af6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001af2:	2d00      	cmp	r5, #0
 8001af4:	d1ec      	bne.n	8001ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001af6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001af8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001afa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001afc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b04:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b0a:	f042 0220 	orr.w	r2, r2, #32
 8001b0e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001b10:	2001      	movs	r0, #1
}
 8001b12:	bd70      	pop	{r4, r5, r6, pc}

08001b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	4604      	mov	r4, r0
 8001b18:	460d      	mov	r5, r1
 8001b1a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	6943      	ldr	r3, [r0, #20]
 8001b20:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001b24:	d001      	beq.n	8001b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001b26:	2000      	movs	r0, #0
}
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b2a:	6942      	ldr	r2, [r0, #20]
 8001b2c:	06d2      	lsls	r2, r2, #27
 8001b2e:	d50e      	bpl.n	8001b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b30:	f06f 0210 	mvn.w	r2, #16
 8001b34:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b36:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b38:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b3a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001b42:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b44:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b4e:	f7ff fa87 	bl	8001060 <HAL_GetTick>
 8001b52:	1b80      	subs	r0, r0, r6
 8001b54:	42a8      	cmp	r0, r5
 8001b56:	d801      	bhi.n	8001b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001b58:	2d00      	cmp	r5, #0
 8001b5a:	d1df      	bne.n	8001b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b5c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b5e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b60:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b62:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b6c:	f042 0220 	orr.w	r2, r2, #32
 8001b70:	e7e8      	b.n	8001b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001b72 <I2C_WaitOnFlagUntilTimeout>:
{
 8001b72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b76:	4604      	mov	r4, r0
 8001b78:	4690      	mov	r8, r2
 8001b7a:	461f      	mov	r7, r3
 8001b7c:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7e:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001b82:	b28d      	uxth	r5, r1
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	f1b9 0f01 	cmp.w	r9, #1
 8001b8a:	bf0c      	ite	eq
 8001b8c:	695b      	ldreq	r3, [r3, #20]
 8001b8e:	699b      	ldrne	r3, [r3, #24]
 8001b90:	ea35 0303 	bics.w	r3, r5, r3
 8001b94:	bf0c      	ite	eq
 8001b96:	2301      	moveq	r3, #1
 8001b98:	2300      	movne	r3, #0
 8001b9a:	4543      	cmp	r3, r8
 8001b9c:	d002      	beq.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001b9e:	2000      	movs	r0, #0
}
 8001ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001ba4:	1c7b      	adds	r3, r7, #1
 8001ba6:	d0ed      	beq.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba8:	f7ff fa5a 	bl	8001060 <HAL_GetTick>
 8001bac:	1b80      	subs	r0, r0, r6
 8001bae:	4287      	cmp	r7, r0
 8001bb0:	d301      	bcc.n	8001bb6 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001bb2:	2f00      	cmp	r7, #0
 8001bb4:	d1e6      	bne.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bb6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bb8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bba:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bbc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001bc6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001bd6 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001bd6:	b570      	push	{r4, r5, r6, lr}
 8001bd8:	4604      	mov	r4, r0
 8001bda:	460d      	mov	r5, r1
 8001bdc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	061b      	lsls	r3, r3, #24
 8001be4:	d501      	bpl.n	8001bea <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001be6:	2000      	movs	r0, #0
 8001be8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bea:	4620      	mov	r0, r4
 8001bec:	f7ff ff0e 	bl	8001a0c <I2C_IsAcknowledgeFailed>
 8001bf0:	b9a8      	cbnz	r0, 8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001bf2:	1c6a      	adds	r2, r5, #1
 8001bf4:	d0f3      	beq.n	8001bde <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7ff fa33 	bl	8001060 <HAL_GetTick>
 8001bfa:	1b80      	subs	r0, r0, r6
 8001bfc:	4285      	cmp	r5, r0
 8001bfe:	d301      	bcc.n	8001c04 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001c00:	2d00      	cmp	r5, #0
 8001c02:	d1ec      	bne.n	8001bde <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c04:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c06:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c08:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c0a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c12:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1
}
 8001c20:	bd70      	pop	{r4, r5, r6, pc}
	...

08001c24 <HAL_I2C_Init>:
{
 8001c24:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001c26:	4604      	mov	r4, r0
 8001c28:	b908      	cbnz	r0, 8001c2e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c36:	b91b      	cbnz	r3, 8001c40 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001c38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c3c:	f001 ff7a 	bl	8003b34 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c40:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001c42:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c48:	6813      	ldr	r3, [r2, #0]
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c50:	f000 fdf4 	bl	800283c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c54:	6865      	ldr	r5, [r4, #4]
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <HAL_I2C_Init+0x138>)
 8001c58:	429d      	cmp	r5, r3
 8001c5a:	d84d      	bhi.n	8001cf8 <HAL_I2C_Init+0xd4>
 8001c5c:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_I2C_Init+0x13c>)
 8001c5e:	4298      	cmp	r0, r3
 8001c60:	d9e3      	bls.n	8001c2a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001c62:	4940      	ldr	r1, [pc, #256]	; (8001d64 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c64:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c66:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c6a:	6853      	ldr	r3, [r2, #4]
 8001c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c74:	6a13      	ldr	r3, [r2, #32]
 8001c76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c7a:	3101      	adds	r1, #1
 8001c7c:	4319      	orrs	r1, r3
 8001c7e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c80:	69d1      	ldr	r1, [r2, #28]
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_I2C_Init+0x138>)
 8001c84:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001c88:	429d      	cmp	r5, r3
 8001c8a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c8e:	f100 30ff 	add.w	r0, r0, #4294967295
 8001c92:	d848      	bhi.n	8001d26 <HAL_I2C_Init+0x102>
 8001c94:	006d      	lsls	r5, r5, #1
 8001c96:	fbb0 f0f5 	udiv	r0, r0, r5
 8001c9a:	3001      	adds	r0, #1
 8001c9c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	bf38      	it	cc
 8001ca4:	2304      	movcc	r3, #4
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001caa:	6811      	ldr	r1, [r2, #0]
 8001cac:	6a20      	ldr	r0, [r4, #32]
 8001cae:	69e3      	ldr	r3, [r4, #28]
 8001cb0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cba:	6891      	ldr	r1, [r2, #8]
 8001cbc:	68e0      	ldr	r0, [r4, #12]
 8001cbe:	6923      	ldr	r3, [r4, #16]
 8001cc0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001cc4:	4303      	orrs	r3, r0
 8001cc6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cca:	430b      	orrs	r3, r1
 8001ccc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cce:	68d1      	ldr	r1, [r2, #12]
 8001cd0:	69a0      	ldr	r0, [r4, #24]
 8001cd2:	6963      	ldr	r3, [r4, #20]
 8001cd4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cd8:	4303      	orrs	r3, r0
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001cde:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce0:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cea:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cf0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_I2C_Init+0x144>)
 8001cfa:	4298      	cmp	r0, r3
 8001cfc:	d995      	bls.n	8001c2a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001cfe:	4e19      	ldr	r6, [pc, #100]	; (8001d64 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d00:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001d04:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d08:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d0a:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0c:	6853      	ldr	r3, [r2, #4]
 8001d0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d12:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d14:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d18:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d1a:	6a13      	ldr	r3, [r2, #32]
 8001d1c:	fbb1 f1f6 	udiv	r1, r1, r6
 8001d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d24:	e7a9      	b.n	8001c7a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d26:	68a3      	ldr	r3, [r4, #8]
 8001d28:	b953      	cbnz	r3, 8001d40 <HAL_I2C_Init+0x11c>
 8001d2a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001d2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d32:	1c43      	adds	r3, r0, #1
 8001d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d38:	b16b      	cbz	r3, 8001d56 <HAL_I2C_Init+0x132>
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3e:	e7b2      	b.n	8001ca6 <HAL_I2C_Init+0x82>
 8001d40:	2319      	movs	r3, #25
 8001d42:	436b      	muls	r3, r5
 8001d44:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d48:	1c43      	adds	r3, r0, #1
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	b113      	cbz	r3, 8001d56 <HAL_I2C_Init+0x132>
 8001d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d54:	e7a7      	b.n	8001ca6 <HAL_I2C_Init+0x82>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e7a5      	b.n	8001ca6 <HAL_I2C_Init+0x82>
 8001d5a:	bf00      	nop
 8001d5c:	000186a0 	.word	0x000186a0
 8001d60:	001e847f 	.word	0x001e847f
 8001d64:	000f4240 	.word	0x000f4240
 8001d68:	003d08ff 	.word	0x003d08ff

08001d6c <HAL_I2C_Master_Transmit>:
{
 8001d6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001d70:	4604      	mov	r4, r0
 8001d72:	461f      	mov	r7, r3
 8001d74:	460d      	mov	r5, r1
 8001d76:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff f972 	bl	8001060 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001d80:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d004      	beq.n	8001d90 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001d86:	2502      	movs	r5, #2
}
 8001d88:	4628      	mov	r0, r5
 8001d8a:	b004      	add	sp, #16
 8001d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d90:	9000      	str	r0, [sp, #0]
 8001d92:	2319      	movs	r3, #25
 8001d94:	2201      	movs	r2, #1
 8001d96:	4958      	ldr	r1, [pc, #352]	; (8001ef8 <HAL_I2C_Master_Transmit+0x18c>)
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff feea 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d1f1      	bne.n	8001d86 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001da2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d0ed      	beq.n	8001d86 <HAL_I2C_Master_Transmit+0x1a>
 8001daa:	2301      	movs	r3, #1
 8001dac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001db6:	bf5e      	ittt	pl
 8001db8:	681a      	ldrpl	r2, [r3, #0]
 8001dba:	f042 0201 	orrpl.w	r2, r2, #1
 8001dbe:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dc8:	2221      	movs	r2, #33	; 0x21
 8001dca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dce:	2210      	movs	r2, #16
 8001dd0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001dd8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001ddc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001de0:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de2:	4a46      	ldr	r2, [pc, #280]	; (8001efc <HAL_I2C_Master_Transmit+0x190>)
 8001de4:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001de6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001de8:	2a08      	cmp	r2, #8
 8001dea:	d004      	beq.n	8001df6 <HAL_I2C_Master_Transmit+0x8a>
 8001dec:	2a01      	cmp	r2, #1
 8001dee:	d002      	beq.n	8001df6 <HAL_I2C_Master_Transmit+0x8a>
 8001df0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001df4:	d104      	bne.n	8001e00 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e002      	b.n	8001e06 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e02:	2a12      	cmp	r2, #18
 8001e04:	d0f7      	beq.n	8001df6 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e06:	9600      	str	r6, [sp, #0]
 8001e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff feae 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 8001e16:	b108      	cbz	r0, 8001e1c <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8001e18:	2501      	movs	r5, #1
 8001e1a:	e7b5      	b.n	8001d88 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1c:	6923      	ldr	r3, [r4, #16]
 8001e1e:	6822      	ldr	r2, [r4, #0]
 8001e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e24:	d113      	bne.n	8001e4e <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e26:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001e2a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e2c:	4633      	mov	r3, r6
 8001e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e30:	4933      	ldr	r1, [pc, #204]	; (8001f00 <HAL_I2C_Master_Transmit+0x194>)
 8001e32:	4620      	mov	r0, r4
 8001e34:	f7ff fe03 	bl	8001a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e38:	4605      	mov	r5, r0
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	d1ec      	bne.n	8001e18 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	9003      	str	r0, [sp, #12]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	9203      	str	r2, [sp, #12]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	9303      	str	r3, [sp, #12]
 8001e4a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001e4c:	e044      	b.n	8001ed8 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e4e:	11eb      	asrs	r3, r5, #7
 8001e50:	f003 0306 	and.w	r3, r3, #6
 8001e54:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001e58:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e5a:	492a      	ldr	r1, [pc, #168]	; (8001f04 <HAL_I2C_Master_Transmit+0x198>)
 8001e5c:	4633      	mov	r3, r6
 8001e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff fdec 	bl	8001a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d1d6      	bne.n	8001e18 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	b2ed      	uxtb	r5, r5
 8001e6e:	611d      	str	r5, [r3, #16]
 8001e70:	e7dc      	b.n	8001e2c <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e72:	4632      	mov	r2, r6
 8001e74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e76:	4620      	mov	r0, r4
 8001e78:	f7ff fead 	bl	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e7c:	b140      	cbz	r0, 8001e90 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e80:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e82:	bf01      	itttt	eq
 8001e84:	6822      	ldreq	r2, [r4, #0]
 8001e86:	6813      	ldreq	r3, [r2, #0]
 8001e88:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001e8c:	6013      	streq	r3, [r2, #0]
 8001e8e:	e7c3      	b.n	8001e18 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e92:	6820      	ldr	r0, [r4, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001e9a:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001e9c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ea0:	3a01      	subs	r2, #1
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ea6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ea8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001eaa:	1e51      	subs	r1, r2, #1
 8001eac:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eae:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001eb0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eb2:	d50a      	bpl.n	8001eca <HAL_I2C_Master_Transmit+0x15e>
 8001eb4:	b149      	cbz	r1, 8001eca <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb6:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8001eb8:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eba:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001ebc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001ebe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001ec0:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001ec8:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eca:	4632      	mov	r2, r6
 8001ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7ff fdfa 	bl	8001ac8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d1d2      	bne.n	8001e7e <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8001ed8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1c9      	bne.n	8001e72 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ede:	6821      	ldr	r1, [r4, #0]
 8001ee0:	680a      	ldr	r2, [r1, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001eea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001ef6:	e747      	b.n	8001d88 <HAL_I2C_Master_Transmit+0x1c>
 8001ef8:	00100002 	.word	0x00100002
 8001efc:	ffff0000 	.word	0xffff0000
 8001f00:	00010002 	.word	0x00010002
 8001f04:	00010008 	.word	0x00010008

08001f08 <HAL_I2C_Master_Receive>:
{
 8001f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	4698      	mov	r8, r3
 8001f12:	460f      	mov	r7, r1
 8001f14:	4691      	mov	r9, r2
 8001f16:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff f8a2 	bl	8001060 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001f20:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d004      	beq.n	8001f30 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001f26:	2702      	movs	r7, #2
}
 8001f28:	4638      	mov	r0, r7
 8001f2a:	b009      	add	sp, #36	; 0x24
 8001f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f30:	9000      	str	r0, [sp, #0]
 8001f32:	2319      	movs	r3, #25
 8001f34:	2201      	movs	r2, #1
 8001f36:	499c      	ldr	r1, [pc, #624]	; (80021a8 <HAL_I2C_Master_Receive+0x2a0>)
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7ff fe1a 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d1f1      	bne.n	8001f26 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001f42:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d0ed      	beq.n	8001f26 <HAL_I2C_Master_Receive+0x1e>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001f56:	bf5e      	ittt	pl
 8001f58:	681a      	ldrpl	r2, [r3, #0]
 8001f5a:	f042 0201 	orrpl.w	r2, r2, #1
 8001f5e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f66:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f68:	2222      	movs	r2, #34	; 0x22
 8001f6a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f6e:	2210      	movs	r2, #16
 8001f70:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f74:	2200      	movs	r2, #0
 8001f76:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001f78:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001f7e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001f82:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f84:	4a89      	ldr	r2, [pc, #548]	; (80021ac <HAL_I2C_Master_Receive+0x2a4>)
 8001f86:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8a:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f8c:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001f92:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f94:	d004      	beq.n	8001fa0 <HAL_I2C_Master_Receive+0x98>
 8001f96:	2a01      	cmp	r2, #1
 8001f98:	d002      	beq.n	8001fa0 <HAL_I2C_Master_Receive+0x98>
 8001f9a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001f9e:	d104      	bne.n	8001faa <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e002      	b.n	8001fb0 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001faa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fac:	2a11      	cmp	r2, #17
 8001fae:	d0f7      	beq.n	8001fa0 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb0:	9500      	str	r5, [sp, #0]
 8001fb2:	4633      	mov	r3, r6
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f7ff fdd9 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	b108      	cbz	r0, 8001fc6 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8001fc2:	2701      	movs	r7, #1
 8001fc4:	e7b0      	b.n	8001f28 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc6:	6923      	ldr	r3, [r4, #16]
 8001fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	d143      	bne.n	8002058 <HAL_I2C_Master_Receive+0x150>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fd0:	f047 0701 	orr.w	r7, r7, #1
 8001fd4:	b2ff      	uxtb	r7, r7
 8001fd6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fd8:	462b      	mov	r3, r5
 8001fda:	4632      	mov	r2, r6
 8001fdc:	4974      	ldr	r1, [pc, #464]	; (80021b0 <HAL_I2C_Master_Receive+0x2a8>)
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff fd2d 	bl	8001a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fe4:	4607      	mov	r7, r0
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d1eb      	bne.n	8001fc2 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8001fea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	2a00      	cmp	r2, #0
 8001ff0:	d066      	beq.n	80020c0 <HAL_I2C_Master_Receive+0x1b8>
    else if (hi2c->XferSize == 1U)
 8001ff2:	2a01      	cmp	r2, #1
 8001ff4:	d177      	bne.n	80020e6 <HAL_I2C_Master_Receive+0x1de>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffe:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	9704      	str	r7, [sp, #16]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	9204      	str	r2, [sp, #16]
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	9204      	str	r2, [sp, #16]
 800200c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002014:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002016:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002018:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80021b8 <HAL_I2C_Master_Receive+0x2b0>
    while (hi2c->XferSize > 0U)
 800201c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d058      	beq.n	80020d4 <HAL_I2C_Master_Receive+0x1cc>
      if (hi2c->XferSize <= 3U)
 8002022:	2b03      	cmp	r3, #3
 8002024:	f200 80ca 	bhi.w	80021bc <HAL_I2C_Master_Receive+0x2b4>
        if (hi2c->XferSize == 1U)
 8002028:	2b01      	cmp	r3, #1
 800202a:	d178      	bne.n	800211e <HAL_I2C_Master_Receive+0x216>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202c:	462a      	mov	r2, r5
 800202e:	4631      	mov	r1, r6
 8002030:	4620      	mov	r0, r4
 8002032:	f7ff fd6f 	bl	8001b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002036:	2800      	cmp	r0, #0
 8002038:	d1c3      	bne.n	8001fc2 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203a:	6822      	ldr	r2, [r4, #0]
 800203c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800203e:	6912      	ldr	r2, [r2, #16]
 8002040:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002048:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800204e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002050:	3b01      	subs	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002056:	e7e1      	b.n	800201c <HAL_I2C_Master_Receive+0x114>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002058:	ea4f 18e7 	mov.w	r8, r7, asr #7
 800205c:	f008 0806 	and.w	r8, r8, #6
 8002060:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002064:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002066:	4953      	ldr	r1, [pc, #332]	; (80021b4 <HAL_I2C_Master_Receive+0x2ac>)
 8002068:	462b      	mov	r3, r5
 800206a:	4632      	mov	r2, r6
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff fce6 	bl	8001a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002072:	2800      	cmp	r0, #0
 8002074:	d1a5      	bne.n	8001fc2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	b2ff      	uxtb	r7, r7
 800207a:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800207c:	4632      	mov	r2, r6
 800207e:	462b      	mov	r3, r5
 8002080:	494b      	ldr	r1, [pc, #300]	; (80021b0 <HAL_I2C_Master_Receive+0x2a8>)
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff fcdb 	bl	8001a3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002088:	4602      	mov	r2, r0
 800208a:	2800      	cmp	r0, #0
 800208c:	d199      	bne.n	8001fc2 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	9007      	str	r0, [sp, #28]
 8002092:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002094:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002096:	9107      	str	r1, [sp, #28]
 8002098:	6999      	ldr	r1, [r3, #24]
 800209a:	9107      	str	r1, [sp, #28]
 800209c:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80020a4:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020a6:	9500      	str	r5, [sp, #0]
 80020a8:	4633      	mov	r3, r6
 80020aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ae:	f7ff fd60 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d185      	bne.n	8001fc2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020b6:	6822      	ldr	r2, [r4, #0]
 80020b8:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80020bc:	6113      	str	r3, [r2, #16]
 80020be:	e78b      	b.n	8001fd8 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c0:	9703      	str	r7, [sp, #12]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	9203      	str	r2, [sp, #12]
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	9203      	str	r2, [sp, #12]
 80020ca:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	2320      	movs	r3, #32
 80020d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020da:	2300      	movs	r3, #0
 80020dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80020e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80020e4:	e720      	b.n	8001f28 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 80020e6:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e8:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80020ea:	d10e      	bne.n	800210a <HAL_I2C_Master_Receive+0x202>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020f2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	9705      	str	r7, [sp, #20]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	9205      	str	r2, [sp, #20]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	9205      	str	r2, [sp, #20]
 8002100:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002108:	e784      	b.n	8002014 <HAL_I2C_Master_Receive+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800210a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800210e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002110:	9706      	str	r7, [sp, #24]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	9206      	str	r2, [sp, #24]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	9306      	str	r3, [sp, #24]
 800211a:	9b06      	ldr	r3, [sp, #24]
 800211c:	e77c      	b.n	8002018 <HAL_I2C_Master_Receive+0x110>
        else if (hi2c->XferSize == 2U)
 800211e:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002120:	9500      	str	r5, [sp, #0]
 8002122:	4633      	mov	r3, r6
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4641      	mov	r1, r8
 800212a:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800212c:	d119      	bne.n	8002162 <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800212e:	f7ff fd20 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 8002132:	2800      	cmp	r0, #0
 8002134:	f47f af45 	bne.w	8001fc2 <HAL_I2C_Master_Receive+0xba>
 8002138:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002142:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002148:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800214a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800214c:	3301      	adds	r3, #1
 800214e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002150:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002152:	3b01      	subs	r3, #1
 8002154:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002156:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002158:	3b01      	subs	r3, #1
 800215a:	b29b      	uxth	r3, r3
 800215c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800215e:	b662      	cpsie	i
 8002160:	e76b      	b.n	800203a <HAL_I2C_Master_Receive+0x132>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002162:	f7ff fd06 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 8002166:	4602      	mov	r2, r0
 8002168:	2800      	cmp	r0, #0
 800216a:	f47f af2a 	bne.w	8001fc2 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216e:	6821      	ldr	r1, [r4, #0]
 8002170:	680b      	ldr	r3, [r1, #0]
 8002172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002176:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002178:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217a:	6821      	ldr	r1, [r4, #0]
 800217c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800217e:	6909      	ldr	r1, [r1, #16]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002180:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002182:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8002184:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002186:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8002188:	3301      	adds	r3, #1
 800218a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800218c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800218e:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8002190:	3b01      	subs	r3, #1
 8002192:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002194:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002196:	3b01      	subs	r3, #1
 8002198:	b29b      	uxth	r3, r3
 800219a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800219c:	4633      	mov	r3, r6
 800219e:	f7ff fce8 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d0c9      	beq.n	800213a <HAL_I2C_Master_Receive+0x232>
 80021a6:	e70c      	b.n	8001fc2 <HAL_I2C_Master_Receive+0xba>
 80021a8:	00100002 	.word	0x00100002
 80021ac:	ffff0000 	.word	0xffff0000
 80021b0:	00010002 	.word	0x00010002
 80021b4:	00010008 	.word	0x00010008
 80021b8:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021bc:	462a      	mov	r2, r5
 80021be:	4631      	mov	r1, r6
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff fca7 	bl	8001b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021c6:	2800      	cmp	r0, #0
 80021c8:	f47f aefb 	bne.w	8001fc2 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021cc:	6822      	ldr	r2, [r4, #0]
 80021ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021d0:	6912      	ldr	r2, [r2, #16]
 80021d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021d6:	1c53      	adds	r3, r2, #1
 80021d8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80021da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021dc:	3b01      	subs	r3, #1
 80021de:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80021e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	6959      	ldr	r1, [r3, #20]
 80021ec:	0749      	lsls	r1, r1, #29
 80021ee:	f57f af15 	bpl.w	800201c <HAL_I2C_Master_Receive+0x114>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	7053      	strb	r3, [r2, #1]
 80021f6:	e724      	b.n	8002042 <HAL_I2C_Master_Receive+0x13a>

080021f8 <HAL_I2C_IsDeviceReady>:
{
 80021f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021fc:	4604      	mov	r4, r0
 80021fe:	b085      	sub	sp, #20
 8002200:	4698      	mov	r8, r3
 8002202:	4689      	mov	r9, r1
 8002204:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8002206:	f7fe ff2b 	bl	8001060 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800220e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002210:	2b20      	cmp	r3, #32
 8002212:	d003      	beq.n	800221c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002214:	2002      	movs	r0, #2
}
 8002216:	b005      	add	sp, #20
 8002218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800221c:	9000      	str	r0, [sp, #0]
 800221e:	2319      	movs	r3, #25
 8002220:	2201      	movs	r2, #1
 8002222:	4949      	ldr	r1, [pc, #292]	; (8002348 <HAL_I2C_IsDeviceReady+0x150>)
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff fca4 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 800222a:	2800      	cmp	r0, #0
 800222c:	d1f2      	bne.n	8002214 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 800222e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d0ee      	beq.n	8002214 <HAL_I2C_IsDeviceReady+0x1c>
 8002236:	2301      	movs	r3, #1
 8002238:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800223c:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 800223e:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002240:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002242:	f8df b104 	ldr.w	fp, [pc, #260]	; 8002348 <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002246:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002248:	bf58      	it	pl
 800224a:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800224c:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8002250:	bf5c      	itt	pl
 8002252:	f042 0201 	orrpl.w	r2, r2, #1
 8002256:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	2324      	movs	r3, #36	; 0x24
 8002262:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002266:	2300      	movs	r3, #0
 8002268:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800226a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800226e:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002270:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002272:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002276:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002278:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002280:	9500      	str	r5, [sp, #0]
 8002282:	4643      	mov	r3, r8
 8002284:	2200      	movs	r2, #0
 8002286:	f7ff fc74 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 800228a:	b108      	cbz	r0, 8002290 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 800228c:	2001      	movs	r0, #1
 800228e:	e7c2      	b.n	8002216 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002290:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002292:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002294:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8002298:	f7fe fee2 	bl	8001060 <HAL_GetTick>
 800229c:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022a2:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022a4:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022a8:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022ac:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80022b0:	29a0      	cmp	r1, #160	; 0xa0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_IsDeviceReady+0xc0>
 80022b4:	b902      	cbnz	r2, 80022b8 <HAL_I2C_IsDeviceReady+0xc0>
 80022b6:	b303      	cbz	r3, 80022fa <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022ba:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022cc:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022ce:	d026      	beq.n	800231e <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d0:	2200      	movs	r2, #0
 80022d2:	9203      	str	r2, [sp, #12]
 80022d4:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d6:	491c      	ldr	r1, [pc, #112]	; (8002348 <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d8:	9203      	str	r2, [sp, #12]
 80022da:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022dc:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	9303      	str	r3, [sp, #12]
 80022e0:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e2:	9500      	str	r5, [sp, #0]
 80022e4:	2319      	movs	r3, #25
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7ff fc43 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1cd      	bne.n	800228c <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80022f4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80022f8:	e78d      	b.n	8002216 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022fa:	f7fe feb1 	bl	8001060 <HAL_GetTick>
 80022fe:	1b40      	subs	r0, r0, r5
 8002300:	4580      	cmp	r8, r0
 8002302:	d302      	bcc.n	800230a <HAL_I2C_IsDeviceReady+0x112>
 8002304:	f1b8 0f00 	cmp.w	r8, #0
 8002308:	d101      	bne.n	800230e <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800230a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002312:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002314:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002318:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800231c:	e7c6      	b.n	80022ac <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800231e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002322:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002324:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002326:	4620      	mov	r0, r4
 8002328:	9500      	str	r5, [sp, #0]
 800232a:	2319      	movs	r3, #25
 800232c:	2201      	movs	r2, #1
 800232e:	f7ff fc20 	bl	8001b72 <I2C_WaitOnFlagUntilTimeout>
 8002332:	2800      	cmp	r0, #0
 8002334:	d1aa      	bne.n	800228c <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 8002336:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8002338:	4557      	cmp	r7, sl
 800233a:	d399      	bcc.n	8002270 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 800233c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002340:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8002344:	e7a2      	b.n	800228c <HAL_I2C_IsDeviceReady+0x94>
 8002346:	bf00      	nop
 8002348:	00100002 	.word	0x00100002

0800234c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002350:	4605      	mov	r5, r0
 8002352:	b908      	cbnz	r0, 8002358 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002354:	2001      	movs	r0, #1
 8002356:	e03c      	b.n	80023d2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002358:	6803      	ldr	r3, [r0, #0]
 800235a:	07db      	lsls	r3, r3, #31
 800235c:	d410      	bmi.n	8002380 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	682b      	ldr	r3, [r5, #0]
 8002360:	079f      	lsls	r7, r3, #30
 8002362:	d45d      	bmi.n	8002420 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	0719      	lsls	r1, r3, #28
 8002368:	f100 8094 	bmi.w	8002494 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	075a      	lsls	r2, r3, #29
 8002370:	f100 80be 	bmi.w	80024f0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002374:	69e8      	ldr	r0, [r5, #28]
 8002376:	2800      	cmp	r0, #0
 8002378:	f040 812c 	bne.w	80025d4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800237c:	2000      	movs	r0, #0
 800237e:	e028      	b.n	80023d2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002380:	4c8f      	ldr	r4, [pc, #572]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002382:	6863      	ldr	r3, [r4, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b04      	cmp	r3, #4
 800238a:	d007      	beq.n	800239c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800238c:	6863      	ldr	r3, [r4, #4]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b08      	cmp	r3, #8
 8002394:	d109      	bne.n	80023aa <HAL_RCC_OscConfig+0x5e>
 8002396:	6863      	ldr	r3, [r4, #4]
 8002398:	03de      	lsls	r6, r3, #15
 800239a:	d506      	bpl.n	80023aa <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	039c      	lsls	r4, r3, #14
 80023a0:	d5dd      	bpl.n	800235e <HAL_RCC_OscConfig+0x12>
 80023a2:	686b      	ldr	r3, [r5, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1da      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
 80023a8:	e7d4      	b.n	8002354 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023aa:	686b      	ldr	r3, [r5, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d112      	bne.n	80023d8 <HAL_RCC_OscConfig+0x8c>
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023ba:	f7fe fe51 	bl	8001060 <HAL_GetTick>
 80023be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	0398      	lsls	r0, r3, #14
 80023c4:	d4cb      	bmi.n	800235e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c6:	f7fe fe4b 	bl	8001060 <HAL_GetTick>
 80023ca:	1b80      	subs	r0, r0, r6
 80023cc:	2864      	cmp	r0, #100	; 0x64
 80023ce:	d9f7      	bls.n	80023c0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80023d0:	2003      	movs	r0, #3
}
 80023d2:	b002      	add	sp, #8
 80023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d8:	b99b      	cbnz	r3, 8002402 <HAL_RCC_OscConfig+0xb6>
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e0:	6023      	str	r3, [r4, #0]
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023ea:	f7fe fe39 	bl	8001060 <HAL_GetTick>
 80023ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	0399      	lsls	r1, r3, #14
 80023f4:	d5b3      	bpl.n	800235e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f6:	f7fe fe33 	bl	8001060 <HAL_GetTick>
 80023fa:	1b80      	subs	r0, r0, r6
 80023fc:	2864      	cmp	r0, #100	; 0x64
 80023fe:	d9f7      	bls.n	80023f0 <HAL_RCC_OscConfig+0xa4>
 8002400:	e7e6      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	d103      	bne.n	8002412 <HAL_RCC_OscConfig+0xc6>
 800240a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240e:	6023      	str	r3, [r4, #0]
 8002410:	e7cf      	b.n	80023b2 <HAL_RCC_OscConfig+0x66>
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6023      	str	r3, [r4, #0]
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241e:	e7cb      	b.n	80023b8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002420:	4c67      	ldr	r4, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002422:	6863      	ldr	r3, [r4, #4]
 8002424:	f013 0f0c 	tst.w	r3, #12
 8002428:	d007      	beq.n	800243a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800242a:	6863      	ldr	r3, [r4, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d110      	bne.n	8002456 <HAL_RCC_OscConfig+0x10a>
 8002434:	6863      	ldr	r3, [r4, #4]
 8002436:	03da      	lsls	r2, r3, #15
 8002438:	d40d      	bmi.n	8002456 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	079b      	lsls	r3, r3, #30
 800243e:	d502      	bpl.n	8002446 <HAL_RCC_OscConfig+0xfa>
 8002440:	692b      	ldr	r3, [r5, #16]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d186      	bne.n	8002354 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	696a      	ldr	r2, [r5, #20]
 800244a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800244e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002452:	6023      	str	r3, [r4, #0]
 8002454:	e786      	b.n	8002364 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002456:	692a      	ldr	r2, [r5, #16]
 8002458:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <HAL_RCC_OscConfig+0x278>)
 800245a:	b16a      	cbz	r2, 8002478 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002460:	f7fe fdfe 	bl	8001060 <HAL_GetTick>
 8002464:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	079f      	lsls	r7, r3, #30
 800246a:	d4ec      	bmi.n	8002446 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fdf8 	bl	8001060 <HAL_GetTick>
 8002470:	1b80      	subs	r0, r0, r6
 8002472:	2802      	cmp	r0, #2
 8002474:	d9f7      	bls.n	8002466 <HAL_RCC_OscConfig+0x11a>
 8002476:	e7ab      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002478:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800247a:	f7fe fdf1 	bl	8001060 <HAL_GetTick>
 800247e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	0798      	lsls	r0, r3, #30
 8002484:	f57f af6e 	bpl.w	8002364 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002488:	f7fe fdea 	bl	8001060 <HAL_GetTick>
 800248c:	1b80      	subs	r0, r0, r6
 800248e:	2802      	cmp	r0, #2
 8002490:	d9f6      	bls.n	8002480 <HAL_RCC_OscConfig+0x134>
 8002492:	e79d      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002494:	69aa      	ldr	r2, [r5, #24]
 8002496:	4c4a      	ldr	r4, [pc, #296]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002498:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <HAL_RCC_OscConfig+0x27c>)
 800249a:	b1da      	cbz	r2, 80024d4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024a0:	f7fe fdde 	bl	8001060 <HAL_GetTick>
 80024a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024a8:	079b      	lsls	r3, r3, #30
 80024aa:	d50d      	bpl.n	80024c8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024b8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80024ba:	bf00      	nop
  }
  while (Delay --);
 80024bc:	9b01      	ldr	r3, [sp, #4]
 80024be:	1e5a      	subs	r2, r3, #1
 80024c0:	9201      	str	r2, [sp, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f9      	bne.n	80024ba <HAL_RCC_OscConfig+0x16e>
 80024c6:	e751      	b.n	800236c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c8:	f7fe fdca 	bl	8001060 <HAL_GetTick>
 80024cc:	1b80      	subs	r0, r0, r6
 80024ce:	2802      	cmp	r0, #2
 80024d0:	d9e9      	bls.n	80024a6 <HAL_RCC_OscConfig+0x15a>
 80024d2:	e77d      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80024d4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024d6:	f7fe fdc3 	bl	8001060 <HAL_GetTick>
 80024da:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024de:	079f      	lsls	r7, r3, #30
 80024e0:	f57f af44 	bpl.w	800236c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe fdbc 	bl	8001060 <HAL_GetTick>
 80024e8:	1b80      	subs	r0, r0, r6
 80024ea:	2802      	cmp	r0, #2
 80024ec:	d9f6      	bls.n	80024dc <HAL_RCC_OscConfig+0x190>
 80024ee:	e76f      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f0:	4c33      	ldr	r4, [pc, #204]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 80024f2:	69e3      	ldr	r3, [r4, #28]
 80024f4:	00d8      	lsls	r0, r3, #3
 80024f6:	d424      	bmi.n	8002542 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80024f8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	69e3      	ldr	r3, [r4, #28]
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	61e3      	str	r3, [r4, #28]
 8002502:	69e3      	ldr	r3, [r4, #28]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4e30      	ldr	r6, [pc, #192]	; (80025d0 <HAL_RCC_OscConfig+0x284>)
 800250e:	6833      	ldr	r3, [r6, #0]
 8002510:	05d9      	lsls	r1, r3, #23
 8002512:	d518      	bpl.n	8002546 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002514:	68eb      	ldr	r3, [r5, #12]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d126      	bne.n	8002568 <HAL_RCC_OscConfig+0x21c>
 800251a:	6a23      	ldr	r3, [r4, #32]
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002522:	f7fe fd9d 	bl	8001060 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800252a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	6a23      	ldr	r3, [r4, #32]
 800252e:	079b      	lsls	r3, r3, #30
 8002530:	d53f      	bpl.n	80025b2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8002532:	2f00      	cmp	r7, #0
 8002534:	f43f af1e 	beq.w	8002374 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002538:	69e3      	ldr	r3, [r4, #28]
 800253a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253e:	61e3      	str	r3, [r4, #28]
 8002540:	e718      	b.n	8002374 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2700      	movs	r7, #0
 8002544:	e7e2      	b.n	800250c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	6833      	ldr	r3, [r6, #0]
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800254e:	f7fe fd87 	bl	8001060 <HAL_GetTick>
 8002552:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	6833      	ldr	r3, [r6, #0]
 8002556:	05da      	lsls	r2, r3, #23
 8002558:	d4dc      	bmi.n	8002514 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe fd81 	bl	8001060 <HAL_GetTick>
 800255e:	eba0 0008 	sub.w	r0, r0, r8
 8002562:	2864      	cmp	r0, #100	; 0x64
 8002564:	d9f6      	bls.n	8002554 <HAL_RCC_OscConfig+0x208>
 8002566:	e733      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	b9ab      	cbnz	r3, 8002596 <HAL_RCC_OscConfig+0x24a>
 800256a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6223      	str	r3, [r4, #32]
 8002576:	6a23      	ldr	r3, [r4, #32]
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800257e:	f7fe fd6f 	bl	8001060 <HAL_GetTick>
 8002582:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	6a23      	ldr	r3, [r4, #32]
 8002586:	0798      	lsls	r0, r3, #30
 8002588:	d5d3      	bpl.n	8002532 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fd69 	bl	8001060 <HAL_GetTick>
 800258e:	1b80      	subs	r0, r0, r6
 8002590:	4540      	cmp	r0, r8
 8002592:	d9f7      	bls.n	8002584 <HAL_RCC_OscConfig+0x238>
 8002594:	e71c      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002596:	2b05      	cmp	r3, #5
 8002598:	6a23      	ldr	r3, [r4, #32]
 800259a:	d103      	bne.n	80025a4 <HAL_RCC_OscConfig+0x258>
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6223      	str	r3, [r4, #32]
 80025a2:	e7ba      	b.n	800251a <HAL_RCC_OscConfig+0x1ce>
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6223      	str	r3, [r4, #32]
 80025aa:	6a23      	ldr	r3, [r4, #32]
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	e7b6      	b.n	8002520 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fd55 	bl	8001060 <HAL_GetTick>
 80025b6:	eba0 0008 	sub.w	r0, r0, r8
 80025ba:	42b0      	cmp	r0, r6
 80025bc:	d9b6      	bls.n	800252c <HAL_RCC_OscConfig+0x1e0>
 80025be:	e707      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
 80025c0:	40021000 	.word	0x40021000
 80025c4:	42420000 	.word	0x42420000
 80025c8:	42420480 	.word	0x42420480
 80025cc:	20000030 	.word	0x20000030
 80025d0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_RCC_OscConfig+0x334>)
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	461c      	mov	r4, r3
 80025da:	f002 020c 	and.w	r2, r2, #12
 80025de:	2a08      	cmp	r2, #8
 80025e0:	d03d      	beq.n	800265e <HAL_RCC_OscConfig+0x312>
 80025e2:	2300      	movs	r3, #0
 80025e4:	4e27      	ldr	r6, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80025e8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ea:	d12b      	bne.n	8002644 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80025ec:	f7fe fd38 	bl	8001060 <HAL_GetTick>
 80025f0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	0199      	lsls	r1, r3, #6
 80025f6:	d41f      	bmi.n	8002638 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025f8:	6a2b      	ldr	r3, [r5, #32]
 80025fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002600:	6862      	ldr	r2, [r4, #4]
 8002602:	68a9      	ldr	r1, [r5, #8]
 8002604:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002608:	430a      	orrs	r2, r1
 800260a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800260e:	6862      	ldr	r2, [r4, #4]
 8002610:	430b      	orrs	r3, r1
 8002612:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002616:	4313      	orrs	r3, r2
 8002618:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800261a:	2301      	movs	r3, #1
 800261c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800261e:	f7fe fd1f 	bl	8001060 <HAL_GetTick>
 8002622:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	019a      	lsls	r2, r3, #6
 8002628:	f53f aea8 	bmi.w	800237c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fd18 	bl	8001060 <HAL_GetTick>
 8002630:	1b40      	subs	r0, r0, r5
 8002632:	2802      	cmp	r0, #2
 8002634:	d9f6      	bls.n	8002624 <HAL_RCC_OscConfig+0x2d8>
 8002636:	e6cb      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fd12 	bl	8001060 <HAL_GetTick>
 800263c:	1bc0      	subs	r0, r0, r7
 800263e:	2802      	cmp	r0, #2
 8002640:	d9d7      	bls.n	80025f2 <HAL_RCC_OscConfig+0x2a6>
 8002642:	e6c5      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002644:	f7fe fd0c 	bl	8001060 <HAL_GetTick>
 8002648:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	f57f ae95 	bpl.w	800237c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe fd05 	bl	8001060 <HAL_GetTick>
 8002656:	1b40      	subs	r0, r0, r5
 8002658:	2802      	cmp	r0, #2
 800265a:	d9f6      	bls.n	800264a <HAL_RCC_OscConfig+0x2fe>
 800265c:	e6b8      	b.n	80023d0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265e:	2801      	cmp	r0, #1
 8002660:	f43f aeb7 	beq.w	80023d2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8002664:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	6a2b      	ldr	r3, [r5, #32]
 8002668:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800266c:	429a      	cmp	r2, r3
 800266e:	f47f ae71 	bne.w	8002354 <HAL_RCC_OscConfig+0x8>
 8002672:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002674:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002678:	1ac0      	subs	r0, r0, r3
 800267a:	bf18      	it	ne
 800267c:	2001      	movne	r0, #1
 800267e:	e6a8      	b.n	80023d2 <HAL_RCC_OscConfig+0x86>
 8002680:	40021000 	.word	0x40021000
 8002684:	42420060 	.word	0x42420060

08002688 <HAL_RCC_GetSysClockFreq>:
{
 8002688:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800268c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800268e:	ac02      	add	r4, sp, #8
 8002690:	f103 0510 	add.w	r5, r3, #16
 8002694:	4622      	mov	r2, r4
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	3308      	adds	r3, #8
 800269c:	c203      	stmia	r2!, {r0, r1}
 800269e:	42ab      	cmp	r3, r5
 80026a0:	4614      	mov	r4, r2
 80026a2:	d1f7      	bne.n	8002694 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026a4:	2301      	movs	r3, #1
 80026a6:	f88d 3004 	strb.w	r3, [sp, #4]
 80026aa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80026ac:	4911      	ldr	r1, [pc, #68]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026ae:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80026b2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80026b4:	f003 020c 	and.w	r2, r3, #12
 80026b8:	2a08      	cmp	r2, #8
 80026ba:	d117      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026bc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80026c0:	a806      	add	r0, sp, #24
 80026c2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026c6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026ca:	d50c      	bpl.n	80026e6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026cc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ce:	480a      	ldr	r0, [pc, #40]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026d0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026d4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026d6:	aa06      	add	r2, sp, #24
 80026d8:	4413      	add	r3, r2
 80026da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026de:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80026e2:	b007      	add	sp, #28
 80026e4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <HAL_RCC_GetSysClockFreq+0x74>)
 80026e8:	4350      	muls	r0, r2
 80026ea:	e7fa      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80026ee:	e7f8      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x5a>
 80026f0:	08004e74 	.word	0x08004e74
 80026f4:	40021000 	.word	0x40021000
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	003d0900 	.word	0x003d0900

08002700 <HAL_RCC_ClockConfig>:
{
 8002700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002704:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002706:	4604      	mov	r4, r0
 8002708:	b910      	cbnz	r0, 8002710 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4a45      	ldr	r2, [pc, #276]	; (8002828 <HAL_RCC_ClockConfig+0x128>)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	428b      	cmp	r3, r1
 800271a:	d329      	bcc.n	8002770 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	6821      	ldr	r1, [r4, #0]
 800271e:	078e      	lsls	r6, r1, #30
 8002720:	d431      	bmi.n	8002786 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002722:	07ca      	lsls	r2, r1, #31
 8002724:	d444      	bmi.n	80027b0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002726:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_RCC_ClockConfig+0x128>)
 8002728:	6813      	ldr	r3, [r2, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	429d      	cmp	r5, r3
 8002730:	d367      	bcc.n	8002802 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002732:	6822      	ldr	r2, [r4, #0]
 8002734:	4d3d      	ldr	r5, [pc, #244]	; (800282c <HAL_RCC_ClockConfig+0x12c>)
 8002736:	f012 0f04 	tst.w	r2, #4
 800273a:	d16e      	bne.n	800281a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	0713      	lsls	r3, r2, #28
 800273e:	d506      	bpl.n	800274e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002740:	686b      	ldr	r3, [r5, #4]
 8002742:	6922      	ldr	r2, [r4, #16]
 8002744:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002748:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800274c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274e:	f7ff ff9b 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002752:	686b      	ldr	r3, [r5, #4]
 8002754:	4a36      	ldr	r2, [pc, #216]	; (8002830 <HAL_RCC_ClockConfig+0x130>)
 8002756:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	40d8      	lsrs	r0, r3
 800275e:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_RCC_ClockConfig+0x134>)
 8002760:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002762:	4b35      	ldr	r3, [pc, #212]	; (8002838 <HAL_RCC_ClockConfig+0x138>)
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	f7fe fc39 	bl	8000fdc <HAL_InitTick>
  return HAL_OK;
 800276a:	2000      	movs	r0, #0
 800276c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	f023 0307 	bic.w	r3, r3, #7
 8002776:	430b      	orrs	r3, r1
 8002778:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4299      	cmp	r1, r3
 8002782:	d1c2      	bne.n	800270a <HAL_RCC_ClockConfig+0xa>
 8002784:	e7ca      	b.n	800271c <HAL_RCC_ClockConfig+0x1c>
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800278c:	bf1e      	ittt	ne
 800278e:	685a      	ldrne	r2, [r3, #4]
 8002790:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002794:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	bf42      	ittt	mi
 800279a:	685a      	ldrmi	r2, [r3, #4]
 800279c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80027a0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	68a0      	ldr	r0, [r4, #8]
 80027a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027aa:	4302      	orrs	r2, r0
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	e7b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b0:	6862      	ldr	r2, [r4, #4]
 80027b2:	4e1e      	ldr	r6, [pc, #120]	; (800282c <HAL_RCC_ClockConfig+0x12c>)
 80027b4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b8:	d11b      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	d0a4      	beq.n	800270a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c0:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c6:	f023 0303 	bic.w	r3, r3, #3
 80027ca:	4313      	orrs	r3, r2
 80027cc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80027ce:	f7fe fc47 	bl	8001060 <HAL_GetTick>
 80027d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d4:	6873      	ldr	r3, [r6, #4]
 80027d6:	6862      	ldr	r2, [r4, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027e0:	d0a1      	beq.n	8002726 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e2:	f7fe fc3d 	bl	8001060 <HAL_GetTick>
 80027e6:	1bc0      	subs	r0, r0, r7
 80027e8:	4540      	cmp	r0, r8
 80027ea:	d9f3      	bls.n	80027d4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80027ec:	2003      	movs	r0, #3
}
 80027ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	2a02      	cmp	r2, #2
 80027f4:	d102      	bne.n	80027fc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027fa:	e7e0      	b.n	80027be <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	f013 0f02 	tst.w	r3, #2
 8002800:	e7dd      	b.n	80027be <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	6813      	ldr	r3, [r2, #0]
 8002804:	f023 0307 	bic.w	r3, r3, #7
 8002808:	432b      	orrs	r3, r5
 800280a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	429d      	cmp	r5, r3
 8002814:	f47f af79 	bne.w	800270a <HAL_RCC_ClockConfig+0xa>
 8002818:	e78b      	b.n	8002732 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281a:	686b      	ldr	r3, [r5, #4]
 800281c:	68e1      	ldr	r1, [r4, #12]
 800281e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002822:	430b      	orrs	r3, r1
 8002824:	606b      	str	r3, [r5, #4]
 8002826:	e789      	b.n	800273c <HAL_RCC_ClockConfig+0x3c>
 8002828:	40022000 	.word	0x40022000
 800282c:	40021000 	.word	0x40021000
 8002830:	08004f6b 	.word	0x08004f6b
 8002834:	20000030 	.word	0x20000030
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x14>)
 800283e:	4a05      	ldr	r2, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800284a:	6810      	ldr	r0, [r2, #0]
}
 800284c:	40d8      	lsrs	r0, r3
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	08004f7b 	.word	0x08004f7b
 8002858:	20000030 	.word	0x20000030

0800285c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x14>)
 800285e:	4a05      	ldr	r2, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	4a03      	ldr	r2, [pc, #12]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800286a:	6810      	ldr	r0, [r2, #0]
}
 800286c:	40d8      	lsrs	r0, r3
 800286e:	4770      	bx	lr
 8002870:	40021000 	.word	0x40021000
 8002874:	08004f7b 	.word	0x08004f7b
 8002878:	20000030 	.word	0x20000030

0800287c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800287c:	6803      	ldr	r3, [r0, #0]
{
 800287e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002882:	07d9      	lsls	r1, r3, #31
{
 8002884:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002886:	d520      	bpl.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002888:	4c35      	ldr	r4, [pc, #212]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800288a:	69e3      	ldr	r3, [r4, #28]
 800288c:	00da      	lsls	r2, r3, #3
 800288e:	d432      	bmi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002890:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	69e3      	ldr	r3, [r4, #28]
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002898:	61e3      	str	r3, [r4, #28]
 800289a:	69e3      	ldr	r3, [r4, #28]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4e2f      	ldr	r6, [pc, #188]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028a6:	6833      	ldr	r3, [r6, #0]
 80028a8:	05db      	lsls	r3, r3, #23
 80028aa:	d526      	bpl.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ac:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028b2:	d136      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b4:	6a23      	ldr	r3, [r4, #32]
 80028b6:	686a      	ldr	r2, [r5, #4]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	4313      	orrs	r3, r2
 80028be:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c0:	b11f      	cbz	r7, 80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	69e3      	ldr	r3, [r4, #28]
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ca:	6828      	ldr	r0, [r5, #0]
 80028cc:	0783      	lsls	r3, r0, #30
 80028ce:	d506      	bpl.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028d0:	4a23      	ldr	r2, [pc, #140]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80028d2:	68a9      	ldr	r1, [r5, #8]
 80028d4:	6853      	ldr	r3, [r2, #4]
 80028d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028da:	430b      	orrs	r3, r1
 80028dc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028de:	f010 0010 	ands.w	r0, r0, #16
 80028e2:	d01b      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e4:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80028e6:	68e9      	ldr	r1, [r5, #12]
 80028e8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028ea:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6053      	str	r3, [r2, #4]
 80028f4:	e012      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2700      	movs	r7, #0
 80028f8:	e7d4      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fa:	6833      	ldr	r3, [r6, #0]
 80028fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002900:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002902:	f7fe fbad 	bl	8001060 <HAL_GetTick>
 8002906:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	6833      	ldr	r3, [r6, #0]
 800290a:	05d8      	lsls	r0, r3, #23
 800290c:	d4ce      	bmi.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290e:	f7fe fba7 	bl	8001060 <HAL_GetTick>
 8002912:	eba0 0008 	sub.w	r0, r0, r8
 8002916:	2864      	cmp	r0, #100	; 0x64
 8002918:	d9f6      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800291a:	2003      	movs	r0, #3
}
 800291c:	b002      	add	sp, #8
 800291e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002922:	686a      	ldr	r2, [r5, #4]
 8002924:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002928:	4293      	cmp	r3, r2
 800292a:	d0c3      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800292c:	2001      	movs	r0, #1
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002930:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002932:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002934:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800293a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800293c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800293e:	07d9      	lsls	r1, r3, #31
 8002940:	d5b8      	bpl.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002942:	f7fe fb8d 	bl	8001060 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800294a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	6a23      	ldr	r3, [r4, #32]
 800294e:	079a      	lsls	r2, r3, #30
 8002950:	d4b0      	bmi.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fb85 	bl	8001060 <HAL_GetTick>
 8002956:	1b80      	subs	r0, r0, r6
 8002958:	4540      	cmp	r0, r8
 800295a:	d9f7      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800295c:	e7dd      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	42420440 	.word	0x42420440

0800296c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296c:	6a03      	ldr	r3, [r0, #32]
{
 800296e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002976:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002978:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800297a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800297c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800297e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002982:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002984:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002986:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800298a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800298c:	4d0a      	ldr	r5, [pc, #40]	; (80029b8 <TIM_OC1_SetConfig+0x4c>)
 800298e:	42a8      	cmp	r0, r5
 8002990:	d10b      	bne.n	80029aa <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002992:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002994:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002998:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800299a:	698e      	ldr	r6, [r1, #24]
 800299c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800299e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80029a2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80029a4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80029a8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ac:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029ae:	684a      	ldr	r2, [r1, #4]
 80029b0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b2:	6203      	str	r3, [r0, #32]
 80029b4:	bd70      	pop	{r4, r5, r6, pc}
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00

080029bc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029bc:	6a03      	ldr	r3, [r0, #32]
{
 80029be:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80029d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80029d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029de:	4d0b      	ldr	r5, [pc, #44]	; (8002a0c <TIM_OC3_SetConfig+0x50>)
 80029e0:	42a8      	cmp	r0, r5
 80029e2:	d10d      	bne.n	8002a00 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029e4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80029e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029ee:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029f0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029f2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029f6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80029f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029fc:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a00:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a02:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a04:	684a      	ldr	r2, [r1, #4]
 8002a06:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a08:	6203      	str	r3, [r0, #32]
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	40012c00 	.word	0x40012c00

08002a10 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a10:	6a03      	ldr	r3, [r0, #32]
{
 8002a12:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a1e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a22:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a2a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a30:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a34:	4d06      	ldr	r5, [pc, #24]	; (8002a50 <TIM_OC4_SetConfig+0x40>)
 8002a36:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a38:	bf02      	ittt	eq
 8002a3a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a3c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a40:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a44:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a46:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a48:	684a      	ldr	r2, [r1, #4]
 8002a4a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4c:	6203      	str	r3, [r0, #32]
 8002a4e:	bd30      	pop	{r4, r5, pc}
 8002a50:	40012c00 	.word	0x40012c00

08002a54 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	2302      	movs	r3, #2
 8002a56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a62:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002a64:	bf1e      	ittt	ne
 8002a66:	681a      	ldrne	r2, [r3, #0]
 8002a68:	f042 0201 	orrne.w	r2, r2, #1
 8002a6c:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002a74:	2000      	movs	r0, #0
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a78:	6803      	ldr	r3, [r0, #0]
}
 8002a7a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002a8c:	bf1e      	ittt	ne
 8002a8e:	681a      	ldrne	r2, [r3, #0]
 8002a90:	f042 0201 	orrne.w	r2, r2, #1
 8002a94:	601a      	strne	r2, [r3, #0]
}
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIM_PWM_MspInit>:
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIM_PeriodElapsedCallback>:
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_OC_DelayElapsedCallback>:
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_IC_CaptureCallback>:
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIM_TriggerCallback>:
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa4:	6803      	ldr	r3, [r0, #0]
{
 8002aa6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa8:	691a      	ldr	r2, [r3, #16]
{
 8002aaa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aac:	0791      	lsls	r1, r2, #30
 8002aae:	d50e      	bpl.n	8002ace <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	0792      	lsls	r2, r2, #30
 8002ab4:	d50b      	bpl.n	8002ace <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab6:	f06f 0202 	mvn.w	r2, #2
 8002aba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002abc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002abe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac2:	079b      	lsls	r3, r3, #30
 8002ac4:	d077      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	f7ff ffea 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	2300      	movs	r3, #0
 8002acc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	0750      	lsls	r0, r2, #29
 8002ad4:	d510      	bpl.n	8002af8 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	0751      	lsls	r1, r2, #29
 8002ada:	d50d      	bpl.n	8002af8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002adc:	f06f 0204 	mvn.w	r2, #4
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002aec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aee:	d068      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002af0:	f7ff ffd5 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af4:	2300      	movs	r3, #0
 8002af6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	0712      	lsls	r2, r2, #28
 8002afe:	d50f      	bpl.n	8002b20 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	0710      	lsls	r0, r2, #28
 8002b04:	d50c      	bpl.n	8002b20 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b06:	f06f 0208 	mvn.w	r2, #8
 8002b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b10:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b12:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002b14:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b16:	d05a      	beq.n	8002bce <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b18:	f7ff ffc1 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	06d2      	lsls	r2, r2, #27
 8002b26:	d510      	bpl.n	8002b4a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	06d0      	lsls	r0, r2, #27
 8002b2c:	d50d      	bpl.n	8002b4a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b2e:	f06f 0210 	mvn.w	r2, #16
 8002b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b34:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b36:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b38:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b3a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b40:	d04b      	beq.n	8002bda <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	f7ff ffac 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	2300      	movs	r3, #0
 8002b48:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	07d1      	lsls	r1, r2, #31
 8002b50:	d508      	bpl.n	8002b64 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	07d2      	lsls	r2, r2, #31
 8002b56:	d505      	bpl.n	8002b64 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b58:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b60:	f7ff ff9b 	bl	8002a9a <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	0610      	lsls	r0, r2, #24
 8002b6a:	d508      	bpl.n	8002b7e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	0611      	lsls	r1, r2, #24
 8002b70:	d505      	bpl.n	8002b7e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b72:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002b76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b7a:	f000 fa16 	bl	8002faa <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	0652      	lsls	r2, r2, #25
 8002b84:	d508      	bpl.n	8002b98 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	0650      	lsls	r0, r2, #25
 8002b8a:	d505      	bpl.n	8002b98 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002b90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b94:	f7ff ff85 	bl	8002aa2 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	0691      	lsls	r1, r2, #26
 8002b9e:	d522      	bpl.n	8002be6 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	0692      	lsls	r2, r2, #26
 8002ba4:	d51f      	bpl.n	8002be6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ba6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002baa:	4620      	mov	r0, r4
}
 8002bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002bb2:	f000 b9f9 	b.w	8002fa8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	f7ff ff71 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7ff ff70 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bc0:	e783      	b.n	8002aca <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	f7ff ff6b 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f7ff ff6a 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bcc:	e792      	b.n	8002af4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bce:	f7ff ff65 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7ff ff64 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bd8:	e7a0      	b.n	8002b1c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	f7ff ff5f 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bde:	4620      	mov	r0, r4
 8002be0:	f7ff ff5e 	bl	8002aa0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002be4:	e7af      	b.n	8002b46 <HAL_TIM_IRQHandler+0xa2>
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be8:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002bea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bec:	4290      	cmp	r0, r2
 8002bee:	d00a      	beq.n	8002c06 <TIM_Base_SetConfig+0x1e>
 8002bf0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002bf4:	d007      	beq.n	8002c06 <TIM_Base_SetConfig+0x1e>
 8002bf6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002bfa:	4290      	cmp	r0, r2
 8002bfc:	d003      	beq.n	8002c06 <TIM_Base_SetConfig+0x1e>
 8002bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c02:	4290      	cmp	r0, r2
 8002c04:	d115      	bne.n	8002c32 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002c06:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c0c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c0e:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <TIM_Base_SetConfig+0x6c>)
 8002c10:	4290      	cmp	r0, r2
 8002c12:	d00a      	beq.n	8002c2a <TIM_Base_SetConfig+0x42>
 8002c14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c18:	d007      	beq.n	8002c2a <TIM_Base_SetConfig+0x42>
 8002c1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c1e:	4290      	cmp	r0, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_Base_SetConfig+0x42>
 8002c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c26:	4290      	cmp	r0, r2
 8002c28:	d103      	bne.n	8002c32 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c32:	694a      	ldr	r2, [r1, #20]
 8002c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c38:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002c3a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c3c:	688b      	ldr	r3, [r1, #8]
 8002c3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c40:	680b      	ldr	r3, [r1, #0]
 8002c42:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <TIM_Base_SetConfig+0x6c>)
 8002c46:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002c48:	bf04      	itt	eq
 8002c4a:	690b      	ldreq	r3, [r1, #16]
 8002c4c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	6143      	str	r3, [r0, #20]
 8002c52:	4770      	bx	lr
 8002c54:	40012c00 	.word	0x40012c00

08002c58 <HAL_TIM_Base_Init>:
{
 8002c58:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	b1a0      	cbz	r0, 8002c88 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c66:	b91b      	cbnz	r3, 8002c70 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002c68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c6c:	f001 fca8 	bl	80045c0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c72:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c78:	1d21      	adds	r1, r4, #4
 8002c7a:	f7ff ffb5 	bl	8002be8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c7e:	2301      	movs	r3, #1
  return HAL_OK;
 8002c80:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002c82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c88:	2001      	movs	r0, #1
}
 8002c8a:	bd10      	pop	{r4, pc}

08002c8c <HAL_TIM_PWM_Init>:
{
 8002c8c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002c8e:	4604      	mov	r4, r0
 8002c90:	b1a0      	cbz	r0, 8002cbc <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c9a:	b91b      	cbnz	r3, 8002ca4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002c9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002ca0:	f7ff fefa 	bl	8002a98 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cac:	1d21      	adds	r1, r4, #4
 8002cae:	f7ff ff9b 	bl	8002be8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	2301      	movs	r3, #1
  return HAL_OK;
 8002cb4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002cb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002cba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cbc:	2001      	movs	r0, #1
}
 8002cbe:	bd10      	pop	{r4, pc}

08002cc0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc0:	6a03      	ldr	r3, [r0, #32]
{
 8002cc2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc4:	f023 0310 	bic.w	r3, r3, #16
 8002cc8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002cca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002ccc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002cce:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cd2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cda:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002cdc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ce0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ce4:	4d0b      	ldr	r5, [pc, #44]	; (8002d14 <TIM_OC2_SetConfig+0x54>)
 8002ce6:	42a8      	cmp	r0, r5
 8002ce8:	d10d      	bne.n	8002d06 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cea:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cf0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cf4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cf6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cf8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cfc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d02:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002d06:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d08:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d0a:	684a      	ldr	r2, [r1, #4]
 8002d0c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002d0e:	6203      	str	r3, [r0, #32]
 8002d10:	bd70      	pop	{r4, r5, r6, pc}
 8002d12:	bf00      	nop
 8002d14:	40012c00 	.word	0x40012c00

08002d18 <HAL_TIM_PWM_ConfigChannel>:
{
 8002d18:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002d1a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d1e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	f04f 0002 	mov.w	r0, #2
 8002d26:	d025      	beq.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002d28:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002d2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002d32:	2a0c      	cmp	r2, #12
 8002d34:	d818      	bhi.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002d36:	e8df f002 	tbb	[pc, r2]
 8002d3a:	1707      	.short	0x1707
 8002d3c:	171e1717 	.word	0x171e1717
 8002d40:	172f1717 	.word	0x172f1717
 8002d44:	1717      	.short	0x1717
 8002d46:	40          	.byte	0x40
 8002d47:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d48:	6820      	ldr	r0, [r4, #0]
 8002d4a:	f7ff fe0f 	bl	800296c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d4e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d50:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	f042 0208 	orr.w	r2, r2, #8
 8002d58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	f022 0204 	bic.w	r2, r2, #4
 8002d60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d66:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002d6a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002d70:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002d74:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d76:	6820      	ldr	r0, [r4, #0]
 8002d78:	f7ff ffa2 	bl	8002cc0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d7c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d7e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d96:	e7e6      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d98:	6820      	ldr	r0, [r4, #0]
 8002d9a:	f7ff fe0f 	bl	80029bc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d9e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002da0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002da2:	69da      	ldr	r2, [r3, #28]
 8002da4:	f042 0208 	orr.w	r2, r2, #8
 8002da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	f022 0204 	bic.w	r2, r2, #4
 8002db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db6:	61da      	str	r2, [r3, #28]
      break;
 8002db8:	e7d6      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dba:	6820      	ldr	r0, [r4, #0]
 8002dbc:	f7ff fe28 	bl	8002a10 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dc0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dc2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dda:	e7ec      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ddc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dde:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002dea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dec:	6083      	str	r3, [r0, #8]
 8002dee:	bd10      	pop	{r4, pc}

08002df0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002df0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002df4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002df6:	2b01      	cmp	r3, #1
{
 8002df8:	4604      	mov	r4, r0
 8002dfa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002dfe:	d019      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0x44>
 8002e00:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002e02:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002e06:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002e08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002e0c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002e16:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002e18:	680b      	ldr	r3, [r1, #0]
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d065      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0xfa>
 8002e1e:	d815      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x5c>
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d00c      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x4e>
 8002e24:	d807      	bhi.n	8002e36 <HAL_TIM_ConfigClockSource+0x46>
 8002e26:	b153      	cbz	r3, 8002e3e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002e28:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002e2a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002e30:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d001      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x4e>
 8002e3a:	2b30      	cmp	r3, #48	; 0x30
 8002e3c:	d1f4      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002e3e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e40:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	e01a      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002e4c:	2b60      	cmp	r3, #96	; 0x60
 8002e4e:	d034      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0xca>
 8002e50:	d819      	bhi.n	8002e86 <HAL_TIM_ConfigClockSource+0x96>
 8002e52:	2b50      	cmp	r3, #80	; 0x50
 8002e54:	d1e8      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e56:	684a      	ldr	r2, [r1, #4]
 8002e58:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002e5a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e5c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	f025 0501 	bic.w	r5, r5, #1
 8002e66:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e68:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002e6a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e70:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002e74:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e76:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002e78:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e7e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002e82:	6083      	str	r3, [r0, #8]
 8002e84:	e7d0      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002e86:	2b70      	cmp	r3, #112	; 0x70
 8002e88:	d00c      	beq.n	8002ea4 <HAL_TIM_ConfigClockSource+0xb4>
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	d1cb      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002e90:	68cb      	ldr	r3, [r1, #12]
 8002e92:	684a      	ldr	r2, [r1, #4]
 8002e94:	6889      	ldr	r1, [r1, #8]
 8002e96:	f7ff ffa1 	bl	8002ddc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e9a:	6822      	ldr	r2, [r4, #0]
 8002e9c:	6893      	ldr	r3, [r2, #8]
 8002e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea2:	e008      	b.n	8002eb6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002ea4:	68cb      	ldr	r3, [r1, #12]
 8002ea6:	684a      	ldr	r2, [r1, #4]
 8002ea8:	6889      	ldr	r1, [r1, #8]
 8002eaa:	f7ff ff97 	bl	8002ddc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eae:	6822      	ldr	r2, [r4, #0]
 8002eb0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eb2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb6:	6093      	str	r3, [r2, #8]
      break;
 8002eb8:	e7b6      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eba:	684d      	ldr	r5, [r1, #4]
 8002ebc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ebe:	6a01      	ldr	r1, [r0, #32]
 8002ec0:	f021 0110 	bic.w	r1, r1, #16
 8002ec4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002ec8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eca:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ed2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ed6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002eda:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002edc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002ede:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002ee8:	e7cb      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	684a      	ldr	r2, [r1, #4]
 8002eec:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002eee:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef6:	f025 0501 	bic.w	r5, r5, #1
 8002efa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002efe:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f04:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002f08:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f0a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f0c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f12:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002f16:	e7b4      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x92>

08002f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f18:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f1a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f1c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f1e:	f001 011f 	and.w	r1, r1, #31
 8002f22:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002f24:	ea23 0304 	bic.w	r3, r3, r4
 8002f28:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f2a:	6a03      	ldr	r3, [r0, #32]
 8002f2c:	408a      	lsls	r2, r1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	6202      	str	r2, [r0, #32]
 8002f32:	bd10      	pop	{r4, pc}

08002f34 <HAL_TIM_PWM_Start>:
{
 8002f34:	b510      	push	{r4, lr}
 8002f36:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f38:	2201      	movs	r2, #1
 8002f3a:	6800      	ldr	r0, [r0, #0]
 8002f3c:	f7ff ffec 	bl	8002f18 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <HAL_TIM_PWM_Start+0x34>)
}
 8002f44:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f46:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8002f48:	bf02      	ittt	eq
 8002f4a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002f4c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002f50:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002f5a:	bf1e      	ittt	ne
 8002f5c:	681a      	ldrne	r2, [r3, #0]
 8002f5e:	f042 0201 	orrne.w	r2, r2, #1
 8002f62:	601a      	strne	r2, [r3, #0]
}
 8002f64:	bd10      	pop	{r4, pc}
 8002f66:	bf00      	nop
 8002f68:	40012c00 	.word	0x40012c00

08002f6c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002f70:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	f04f 0302 	mov.w	r3, #2
 8002f78:	d014      	beq.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f7a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002f80:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f82:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f84:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f86:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f90:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f92:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f94:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f96:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002fa4:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002fa6:	bd30      	pop	{r4, r5, pc}

08002fa8 <HAL_TIMEx_CommutCallback>:
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002faa:	4770      	bx	lr

08002fac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fac:	6803      	ldr	r3, [r0, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fb4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002fc4:	4770      	bx	lr
	...

08002fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fcc:	6803      	ldr	r3, [r0, #0]
 8002fce:	68c1      	ldr	r1, [r0, #12]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	2419      	movs	r4, #25
 8002fd4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fdc:	6882      	ldr	r2, [r0, #8]
 8002fde:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002fe0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fe2:	4302      	orrs	r2, r0
 8002fe4:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002fe6:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002fea:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fee:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	69a9      	ldr	r1, [r5, #24]
 8002ff8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003000:	4a0d      	ldr	r2, [pc, #52]	; (8003038 <UART_SetConfig+0x70>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d114      	bne.n	8003030 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003006:	f7ff fc29 	bl	800285c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800300a:	4360      	muls	r0, r4
 800300c:	686c      	ldr	r4, [r5, #4]
 800300e:	2264      	movs	r2, #100	; 0x64
 8003010:	00a4      	lsls	r4, r4, #2
 8003012:	fbb0 f0f4 	udiv	r0, r0, r4
 8003016:	fbb0 f4f2 	udiv	r4, r0, r2
 800301a:	fb02 0314 	mls	r3, r2, r4, r0
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	3332      	adds	r3, #50	; 0x32
 8003022:	fbb3 f3f2 	udiv	r3, r3, r2
 8003026:	6829      	ldr	r1, [r5, #0]
 8003028:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800302c:	608b      	str	r3, [r1, #8]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003030:	f7ff fc04 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 8003034:	e7e9      	b.n	800300a <UART_SetConfig+0x42>
 8003036:	bf00      	nop
 8003038:	40013800 	.word	0x40013800

0800303c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	4604      	mov	r4, r0
 8003040:	460e      	mov	r6, r1
 8003042:	4617      	mov	r7, r2
 8003044:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003046:	6821      	ldr	r1, [r4, #0]
 8003048:	680b      	ldr	r3, [r1, #0]
 800304a:	ea36 0303 	bics.w	r3, r6, r3
 800304e:	d101      	bne.n	8003054 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003050:	2000      	movs	r0, #0
}
 8003052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003054:	1c6b      	adds	r3, r5, #1
 8003056:	d0f7      	beq.n	8003048 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003058:	b995      	cbnz	r5, 8003080 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800305c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003064:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800306e:	2320      	movs	r3, #32
 8003070:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003074:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003078:	2300      	movs	r3, #0
 800307a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003080:	f7fd ffee 	bl	8001060 <HAL_GetTick>
 8003084:	1bc0      	subs	r0, r0, r7
 8003086:	4285      	cmp	r5, r0
 8003088:	d2dd      	bcs.n	8003046 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800308a:	e7e6      	b.n	800305a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800308c <HAL_UART_Init>:
{
 800308c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800308e:	4604      	mov	r4, r0
 8003090:	b340      	cbz	r0, 80030e4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003092:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003096:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800309a:	b91b      	cbnz	r3, 80030a4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800309c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80030a0:	f001 fb56 	bl	8004750 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80030a4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80030a6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80030ac:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80030ae:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80030b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80030b6:	f7ff ff87 	bl	8002fc8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ba:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030bc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030cc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80030d6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80030e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030e4:	2001      	movs	r0, #1
}
 80030e6:	bd10      	pop	{r4, pc}

080030e8 <HAL_UART_Transmit>:
{
 80030e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ec:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80030ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80030f2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80030f4:	2b20      	cmp	r3, #32
{
 80030f6:	460d      	mov	r5, r1
 80030f8:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80030fa:	d14e      	bne.n	800319a <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d049      	beq.n	8003194 <HAL_UART_Transmit+0xac>
 8003100:	2a00      	cmp	r2, #0
 8003102:	d047      	beq.n	8003194 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003104:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003108:	2b01      	cmp	r3, #1
 800310a:	d046      	beq.n	800319a <HAL_UART_Transmit+0xb2>
 800310c:	2301      	movs	r3, #1
 800310e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	2300      	movs	r3, #0
 8003114:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003116:	2321      	movs	r3, #33	; 0x21
 8003118:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800311c:	f7fd ffa0 	bl	8001060 <HAL_GetTick>
 8003120:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003122:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003126:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800312a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800312c:	b29b      	uxth	r3, r3
 800312e:	b96b      	cbnz	r3, 800314c <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003130:	463b      	mov	r3, r7
 8003132:	4632      	mov	r2, r6
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	4620      	mov	r0, r4
 8003138:	f7ff ff80 	bl	800303c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800313c:	b9a8      	cbnz	r0, 800316a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800313e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003140:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003144:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800314c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003150:	3b01      	subs	r3, #1
 8003152:	b29b      	uxth	r3, r3
 8003154:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003156:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003158:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	4620      	mov	r0, r4
 8003160:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003162:	d10e      	bne.n	8003182 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003164:	f7ff ff6a 	bl	800303c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003168:	b110      	cbz	r0, 8003170 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800316a:	2003      	movs	r0, #3
 800316c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003170:	882b      	ldrh	r3, [r5, #0]
 8003172:	6822      	ldr	r2, [r4, #0]
 8003174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003178:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800317a:	6923      	ldr	r3, [r4, #16]
 800317c:	b943      	cbnz	r3, 8003190 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 800317e:	3502      	adds	r5, #2
 8003180:	e7d3      	b.n	800312a <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003182:	f7ff ff5b 	bl	800303c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003186:	2800      	cmp	r0, #0
 8003188:	d1ef      	bne.n	800316a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	782a      	ldrb	r2, [r5, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	3501      	adds	r5, #1
 8003192:	e7ca      	b.n	800312a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003194:	2001      	movs	r0, #1
 8003196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800319a:	2002      	movs	r0, #2
}
 800319c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031a0 <HAL_UART_Receive>:
{
 80031a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a4:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80031aa:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ac:	2b20      	cmp	r3, #32
{
 80031ae:	460d      	mov	r5, r1
 80031b0:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80031b2:	d151      	bne.n	8003258 <HAL_UART_Receive+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80031b4:	2900      	cmp	r1, #0
 80031b6:	d04c      	beq.n	8003252 <HAL_UART_Receive+0xb2>
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d04a      	beq.n	8003252 <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 80031bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d049      	beq.n	8003258 <HAL_UART_Receive+0xb8>
 80031c4:	2301      	movs	r3, #1
 80031c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ce:	2322      	movs	r3, #34	; 0x22
 80031d0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80031d4:	f7fd ff44 	bl	8001060 <HAL_GetTick>
 80031d8:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 80031da:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80031de:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80031e2:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80031e4:	b280      	uxth	r0, r0
 80031e6:	b930      	cbnz	r0, 80031f6 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 80031e8:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80031ea:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 80031ee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 80031f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 80031f6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031f8:	4632      	mov	r2, r6
      huart->RxXferCount--;
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003200:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	2120      	movs	r1, #32
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003208:	4620      	mov	r0, r4
 800320a:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800320c:	d112      	bne.n	8003234 <HAL_UART_Receive+0x94>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	f7ff ff15 	bl	800303c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003212:	b110      	cbz	r0, 800321a <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8003214:	2003      	movs	r0, #3
 8003216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800321a:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800321c:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800321e:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003220:	b922      	cbnz	r2, 800322c <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003226:	f825 3b02 	strh.w	r3, [r5], #2
 800322a:	e7da      	b.n	80031e2 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f825 3b01 	strh.w	r3, [r5], #1
 8003232:	e7d6      	b.n	80031e2 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003234:	f7ff ff02 	bl	800303c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003238:	2800      	cmp	r0, #0
 800323a:	d1eb      	bne.n	8003214 <HAL_UART_Receive+0x74>
 800323c:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800323e:	6921      	ldr	r1, [r4, #16]
 8003240:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003242:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003244:	b911      	cbnz	r1, 800324c <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003246:	702b      	strb	r3, [r5, #0]
 8003248:	4615      	mov	r5, r2
 800324a:	e7ca      	b.n	80031e2 <HAL_UART_Receive+0x42>
 800324c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003250:	e7f9      	b.n	8003246 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 8003252:	2001      	movs	r0, #1
 8003254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003258:	2002      	movs	r0, #2
}
 800325a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800325e <HAL_UART_TxCpltCallback>:
 800325e:	4770      	bx	lr

08003260 <HAL_UART_RxCpltCallback>:
 8003260:	4770      	bx	lr

08003262 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003262:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003266:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003268:	2b22      	cmp	r3, #34	; 0x22
 800326a:	d136      	bne.n	80032da <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800326c:	6883      	ldr	r3, [r0, #8]
 800326e:	6901      	ldr	r1, [r0, #16]
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003274:	6802      	ldr	r2, [r0, #0]
 8003276:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003278:	d123      	bne.n	80032c2 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800327a:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800327c:	b9e9      	cbnz	r1, 80032ba <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800327e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003282:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003286:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003288:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800328a:	3c01      	subs	r4, #1
 800328c:	b2a4      	uxth	r4, r4
 800328e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003290:	b98c      	cbnz	r4, 80032b6 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003292:	6803      	ldr	r3, [r0, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	f022 0220 	bic.w	r2, r2, #32
 800329a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a2:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80032ac:	2320      	movs	r3, #32
 80032ae:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80032b2:	f7ff ffd5 	bl	8003260 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80032b6:	2000      	movs	r0, #0
}
 80032b8:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	f823 2b01 	strh.w	r2, [r3], #1
 80032c0:	e7e1      	b.n	8003286 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032c2:	b921      	cbnz	r1, 80032ce <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032c4:	1c59      	adds	r1, r3, #1
 80032c6:	6852      	ldr	r2, [r2, #4]
 80032c8:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e7dc      	b.n	8003288 <UART_Receive_IT+0x26>
 80032ce:	6852      	ldr	r2, [r2, #4]
 80032d0:	1c59      	adds	r1, r3, #1
 80032d2:	6281      	str	r1, [r0, #40]	; 0x28
 80032d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032d8:	e7f7      	b.n	80032ca <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80032da:	2002      	movs	r0, #2
 80032dc:	bd10      	pop	{r4, pc}

080032de <HAL_UART_ErrorCallback>:
 80032de:	4770      	bx	lr

080032e0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032e0:	6803      	ldr	r3, [r0, #0]
{
 80032e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032e4:	681a      	ldr	r2, [r3, #0]
{
 80032e6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80032e8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032ea:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032ec:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80032ee:	d107      	bne.n	8003300 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032f0:	0696      	lsls	r6, r2, #26
 80032f2:	d55a      	bpl.n	80033aa <HAL_UART_IRQHandler+0xca>
 80032f4:	068d      	lsls	r5, r1, #26
 80032f6:	d558      	bpl.n	80033aa <HAL_UART_IRQHandler+0xca>
}
 80032f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80032fc:	f7ff bfb1 	b.w	8003262 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003300:	f015 0501 	ands.w	r5, r5, #1
 8003304:	d102      	bne.n	800330c <HAL_UART_IRQHandler+0x2c>
 8003306:	f411 7f90 	tst.w	r1, #288	; 0x120
 800330a:	d04e      	beq.n	80033aa <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800330c:	07d3      	lsls	r3, r2, #31
 800330e:	d505      	bpl.n	800331c <HAL_UART_IRQHandler+0x3c>
 8003310:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003312:	bf42      	ittt	mi
 8003314:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003316:	f043 0301 	orrmi.w	r3, r3, #1
 800331a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800331c:	0750      	lsls	r0, r2, #29
 800331e:	d504      	bpl.n	800332a <HAL_UART_IRQHandler+0x4a>
 8003320:	b11d      	cbz	r5, 800332a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003322:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003324:	f043 0302 	orr.w	r3, r3, #2
 8003328:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800332a:	0793      	lsls	r3, r2, #30
 800332c:	d504      	bpl.n	8003338 <HAL_UART_IRQHandler+0x58>
 800332e:	b11d      	cbz	r5, 8003338 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003330:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003338:	0716      	lsls	r6, r2, #28
 800333a:	d504      	bpl.n	8003346 <HAL_UART_IRQHandler+0x66>
 800333c:	b11d      	cbz	r5, 8003346 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800333e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003340:	f043 0308 	orr.w	r3, r3, #8
 8003344:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003346:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d066      	beq.n	800341a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800334c:	0695      	lsls	r5, r2, #26
 800334e:	d504      	bpl.n	800335a <HAL_UART_IRQHandler+0x7a>
 8003350:	0688      	lsls	r0, r1, #26
 8003352:	d502      	bpl.n	800335a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff ff84 	bl	8003262 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800335a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800335c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800335e:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003360:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003362:	0711      	lsls	r1, r2, #28
 8003364:	d402      	bmi.n	800336c <HAL_UART_IRQHandler+0x8c>
 8003366:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800336a:	d01a      	beq.n	80033a2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800336c:	f7ff fe1e 	bl	8002fac <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	0652      	lsls	r2, r2, #25
 8003376:	d510      	bpl.n	800339a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003378:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800337a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003380:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003382:	b150      	cbz	r0, 800339a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003384:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_UART_IRQHandler+0x13c>)
 8003386:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003388:	f7fe f982 	bl	8001690 <HAL_DMA_Abort_IT>
 800338c:	2800      	cmp	r0, #0
 800338e:	d044      	beq.n	800341a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003390:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003396:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003398:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800339a:	4620      	mov	r0, r4
 800339c:	f7ff ff9f 	bl	80032de <HAL_UART_ErrorCallback>
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80033a2:	f7ff ff9c 	bl	80032de <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033aa:	0616      	lsls	r6, r2, #24
 80033ac:	d527      	bpl.n	80033fe <HAL_UART_IRQHandler+0x11e>
 80033ae:	060d      	lsls	r5, r1, #24
 80033b0:	d525      	bpl.n	80033fe <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033b2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80033b6:	2a21      	cmp	r2, #33	; 0x21
 80033b8:	d12f      	bne.n	800341a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033ba:	68a2      	ldr	r2, [r4, #8]
 80033bc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80033c0:	6a22      	ldr	r2, [r4, #32]
 80033c2:	d117      	bne.n	80033f4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033c4:	8811      	ldrh	r1, [r2, #0]
 80033c6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80033ca:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033cc:	6921      	ldr	r1, [r4, #16]
 80033ce:	b979      	cbnz	r1, 80033f0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80033d0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80033d2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80033d4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80033d6:	3a01      	subs	r2, #1
 80033d8:	b292      	uxth	r2, r2
 80033da:	84e2      	strh	r2, [r4, #38]	; 0x26
 80033dc:	b9ea      	cbnz	r2, 800341a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80033f0:	3201      	adds	r2, #1
 80033f2:	e7ee      	b.n	80033d2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033f4:	1c51      	adds	r1, r2, #1
 80033f6:	6221      	str	r1, [r4, #32]
 80033f8:	7812      	ldrb	r2, [r2, #0]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	e7ea      	b.n	80033d4 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033fe:	0650      	lsls	r0, r2, #25
 8003400:	d50b      	bpl.n	800341a <HAL_UART_IRQHandler+0x13a>
 8003402:	064a      	lsls	r2, r1, #25
 8003404:	d509      	bpl.n	800341a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003406:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003408:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800340a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003410:	2320      	movs	r3, #32
 8003412:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003416:	f7ff ff22 	bl	800325e <HAL_UART_TxCpltCallback>
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	08003421 	.word	0x08003421

08003420 <UART_DMAAbortOnError>:
{
 8003420:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003422:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003424:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003426:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003428:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800342a:	f7ff ff58 	bl	80032de <HAL_UART_ErrorCallback>
 800342e:	bd08      	pop	{r3, pc}

08003430 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8003430:	4a07      	ldr	r2, [pc, #28]	; (8003450 <DWT_Init+0x20>)
 8003432:	68d3      	ldr	r3, [r2, #12]
 8003434:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8003438:	d109      	bne.n	800344e <DWT_Init+0x1e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800343a:	68d1      	ldr	r1, [r2, #12]
 800343c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003440:	60d1      	str	r1, [r2, #12]
        DWT->CYCCNT = 0;
 8003442:	4a04      	ldr	r2, [pc, #16]	; (8003454 <DWT_Init+0x24>)
 8003444:	6053      	str	r3, [r2, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4770      	bx	lr
 8003450:	e000edf0 	.word	0xe000edf0
 8003454:	e0001000 	.word	0xe0001000

08003458 <array_averaging>:
	return number;
}

float array_averaging(int len, float array[len])
{
	volatile float averaged = 0;
 8003458:	2300      	movs	r3, #0
{
 800345a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800345c:	4605      	mov	r5, r0
 800345e:	460e      	mov	r6, r1
	for(int i = 0; i < len; i++)
 8003460:	2400      	movs	r4, #0
	volatile float averaged = 0;
 8003462:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < len; i++)
 8003464:	42ac      	cmp	r4, r5
 8003466:	db0b      	blt.n	8003480 <array_averaging+0x28>
	{
		averaged += array[i];
	}
	averaged = averaged/(float)len;
 8003468:	4628      	mov	r0, r5
 800346a:	f7fd fb57 	bl	8000b1c <__aeabi_i2f>
 800346e:	9c01      	ldr	r4, [sp, #4]
 8003470:	4601      	mov	r1, r0
 8003472:	4620      	mov	r0, r4
 8003474:	f7fd fc5a 	bl	8000d2c <__aeabi_fdiv>
 8003478:	9001      	str	r0, [sp, #4]
	return averaged;
 800347a:	9801      	ldr	r0, [sp, #4]
}
 800347c:	b002      	add	sp, #8
 800347e:	bd70      	pop	{r4, r5, r6, pc}
		averaged += array[i];
 8003480:	9801      	ldr	r0, [sp, #4]
 8003482:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8003486:	f7fd fa95 	bl	80009b4 <__addsf3>
	for(int i = 0; i < len; i++)
 800348a:	3401      	adds	r4, #1
		averaged += array[i];
 800348c:	9001      	str	r0, [sp, #4]
 800348e:	e7e9      	b.n	8003464 <array_averaging+0xc>

08003490 <arrays_xy_averaging>:

float arrays_xy_averaging(int len, float x_array[len], float y_array[len])
{
	volatile float xy = 0;
 8003490:	2300      	movs	r3, #0
{
 8003492:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003496:	4605      	mov	r5, r0
 8003498:	460e      	mov	r6, r1
 800349a:	4617      	mov	r7, r2
	for(int i = 0; i < len; i++)
 800349c:	2400      	movs	r4, #0
	volatile float xy = 0;
 800349e:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < len; i++)
 80034a0:	42ac      	cmp	r4, r5
 80034a2:	db0c      	blt.n	80034be <arrays_xy_averaging+0x2e>
	{
		xy += (x_array[i]*y_array[i]);

	}
	xy = xy/(float)len;
 80034a4:	4628      	mov	r0, r5
 80034a6:	f7fd fb39 	bl	8000b1c <__aeabi_i2f>
 80034aa:	9c01      	ldr	r4, [sp, #4]
 80034ac:	4601      	mov	r1, r0
 80034ae:	4620      	mov	r0, r4
 80034b0:	f7fd fc3c 	bl	8000d2c <__aeabi_fdiv>
 80034b4:	9001      	str	r0, [sp, #4]
	return xy;
 80034b6:	9801      	ldr	r0, [sp, #4]
}
 80034b8:	b002      	add	sp, #8
 80034ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xy += (x_array[i]*y_array[i]);
 80034be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80034c2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80034c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80034ca:	f7fd fb7b 	bl	8000bc4 <__aeabi_fmul>
 80034ce:	4641      	mov	r1, r8
 80034d0:	f7fd fa70 	bl	80009b4 <__addsf3>
	for(int i = 0; i < len; i++)
 80034d4:	3401      	adds	r4, #1
		xy += (x_array[i]*y_array[i]);
 80034d6:	9001      	str	r0, [sp, #4]
 80034d8:	e7e2      	b.n	80034a0 <arrays_xy_averaging+0x10>

080034da <disperssion>:

float disperssion(int len, float array[len])
{
	volatile float S, averaged = 0;
 80034da:	2300      	movs	r3, #0
{
 80034dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034de:	4605      	mov	r5, r0
 80034e0:	460e      	mov	r6, r1
	for(int i = 0; i < len; i++)
 80034e2:	2400      	movs	r4, #0
	volatile float S, averaged = 0;
 80034e4:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < len; i++)
 80034e6:	42ac      	cmp	r4, r5
 80034e8:	db1e      	blt.n	8003528 <disperssion+0x4e>
	{
		S += (array[i]*array[i]);
		HAL_Delay(1);
	}

	averaged = array_averaging(len,array);
 80034ea:	4631      	mov	r1, r6
 80034ec:	4628      	mov	r0, r5
 80034ee:	f7ff ffb3 	bl	8003458 <array_averaging>
 80034f2:	9001      	str	r0, [sp, #4]

	S = (S/len - (averaged*averaged));
 80034f4:	4628      	mov	r0, r5
 80034f6:	f7fd fb11 	bl	8000b1c <__aeabi_i2f>
 80034fa:	9c00      	ldr	r4, [sp, #0]
 80034fc:	4601      	mov	r1, r0
 80034fe:	4620      	mov	r0, r4
 8003500:	f7fd fc14 	bl	8000d2c <__aeabi_fdiv>
 8003504:	9e01      	ldr	r6, [sp, #4]
 8003506:	9f01      	ldr	r7, [sp, #4]
 8003508:	4604      	mov	r4, r0
 800350a:	4639      	mov	r1, r7
 800350c:	4630      	mov	r0, r6
 800350e:	f7fd fb59 	bl	8000bc4 <__aeabi_fmul>
 8003512:	4601      	mov	r1, r0
 8003514:	4620      	mov	r0, r4
 8003516:	f7fd fa4b 	bl	80009b0 <__aeabi_fsub>
 800351a:	9000      	str	r0, [sp, #0]
	HAL_Delay(1);
 800351c:	2001      	movs	r0, #1
 800351e:	f7fd fda5 	bl	800106c <HAL_Delay>

	return S;
 8003522:	9800      	ldr	r0, [sp, #0]
}
 8003524:	b003      	add	sp, #12
 8003526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		S += (array[i]*array[i]);
 8003528:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800352c:	9f00      	ldr	r7, [sp, #0]
 800352e:	4608      	mov	r0, r1
 8003530:	f7fd fb48 	bl	8000bc4 <__aeabi_fmul>
 8003534:	4639      	mov	r1, r7
 8003536:	f7fd fa3d 	bl	80009b4 <__addsf3>
 800353a:	9000      	str	r0, [sp, #0]
		HAL_Delay(1);
 800353c:	2001      	movs	r0, #1
 800353e:	f7fd fd95 	bl	800106c <HAL_Delay>
	for(int i = 0; i < len; i++)
 8003542:	3401      	adds	r4, #1
 8003544:	e7cf      	b.n	80034e6 <disperssion+0xc>

08003546 <linear_regression>:

void linear_regression(int len, float X[len], float Y[len],
		               float* a, float* b)
{
 8003546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003548:	461f      	mov	r7, r3
	volatile float res_a, res_b, x_averaged, y_averaged, xy_averaged, Sx = 0;
 800354a:	2300      	movs	r3, #0
{
 800354c:	b087      	sub	sp, #28
	volatile float res_a, res_b, x_averaged, y_averaged, xy_averaged, Sx = 0;
 800354e:	9305      	str	r3, [sp, #20]
{
 8003550:	4604      	mov	r4, r0
 8003552:	460d      	mov	r5, r1
 8003554:	4616      	mov	r6, r2

	x_averaged = array_averaging(len,X);
 8003556:	f7ff ff7f 	bl	8003458 <array_averaging>

    y_averaged = array_averaging(len,Y);
 800355a:	4631      	mov	r1, r6
	x_averaged = array_averaging(len,X);
 800355c:	9002      	str	r0, [sp, #8]
    y_averaged = array_averaging(len,Y);
 800355e:	4620      	mov	r0, r4
 8003560:	f7ff ff7a 	bl	8003458 <array_averaging>

    xy_averaged = arrays_xy_averaging(len,X,Y);
 8003564:	4632      	mov	r2, r6
    y_averaged = array_averaging(len,Y);
 8003566:	9003      	str	r0, [sp, #12]
    xy_averaged = arrays_xy_averaging(len,X,Y);
 8003568:	4629      	mov	r1, r5
 800356a:	4620      	mov	r0, r4
 800356c:	f7ff ff90 	bl	8003490 <arrays_xy_averaging>

    Sx = disperssion(len,X);
 8003570:	4629      	mov	r1, r5
    xy_averaged = arrays_xy_averaging(len,X,Y);
 8003572:	9004      	str	r0, [sp, #16]
    Sx = disperssion(len,X);
 8003574:	4620      	mov	r0, r4
 8003576:	f7ff ffb0 	bl	80034da <disperssion>
 800357a:	9005      	str	r0, [sp, #20]

    res_b = (xy_averaged - x_averaged*y_averaged)/Sx;
 800357c:	9d04      	ldr	r5, [sp, #16]
 800357e:	9802      	ldr	r0, [sp, #8]
 8003580:	9903      	ldr	r1, [sp, #12]
 8003582:	f7fd fb1f 	bl	8000bc4 <__aeabi_fmul>
 8003586:	9c05      	ldr	r4, [sp, #20]
 8003588:	4601      	mov	r1, r0
 800358a:	4628      	mov	r0, r5
 800358c:	f7fd fa10 	bl	80009b0 <__aeabi_fsub>
 8003590:	4621      	mov	r1, r4
 8003592:	f7fd fbcb 	bl	8000d2c <__aeabi_fdiv>
 8003596:	9001      	str	r0, [sp, #4]

    res_a = y_averaged - res_b*x_averaged;
 8003598:	9c03      	ldr	r4, [sp, #12]
 800359a:	9801      	ldr	r0, [sp, #4]
 800359c:	9902      	ldr	r1, [sp, #8]
 800359e:	f7fd fb11 	bl	8000bc4 <__aeabi_fmul>
 80035a2:	4601      	mov	r1, r0
 80035a4:	4620      	mov	r0, r4
 80035a6:	f7fd fa03 	bl	80009b0 <__aeabi_fsub>
 80035aa:	9000      	str	r0, [sp, #0]

    *a = res_a;
 80035ac:	9b00      	ldr	r3, [sp, #0]
    *b = res_b;
 80035ae:	9a01      	ldr	r2, [sp, #4]
    *a = res_a;
 80035b0:	603b      	str	r3, [r7, #0]
    *b = res_b;
 80035b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    HAL_Delay(1);
 80035b4:	2001      	movs	r0, #1
    *b = res_b;
 80035b6:	601a      	str	r2, [r3, #0]
    HAL_Delay(1);
 80035b8:	f7fd fd58 	bl	800106c <HAL_Delay>

}
 80035bc:	b007      	add	sp, #28
 80035be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035c0 <_WMA_angle>:
	return temp;
}


float _WMA_angle(int steps)
{
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	4605      	mov	r5, r0
	float temp = 0.0;
	for(int i=0; i<steps; i++)
 80035c4:	2400      	movs	r4, #0
	float temp = 0.0;
 80035c6:	2600      	movs	r6, #0
	for(int i=0; i<steps; i++)
 80035c8:	42ac      	cmp	r4, r5
 80035ca:	db14      	blt.n	80035f6 <_WMA_angle+0x36>
	{
		temp = temp + (get_actual_angle())*(i+1);
	}

	temp = temp*2;
 80035cc:	4631      	mov	r1, r6
 80035ce:	4630      	mov	r0, r6
 80035d0:	f7fd f9f0 	bl	80009b4 <__addsf3>
 80035d4:	4604      	mov	r4, r0
	temp = temp/steps;
 80035d6:	4628      	mov	r0, r5
 80035d8:	f7fd faa0 	bl	8000b1c <__aeabi_i2f>
 80035dc:	4601      	mov	r1, r0
 80035de:	4620      	mov	r0, r4
 80035e0:	f7fd fba4 	bl	8000d2c <__aeabi_fdiv>
 80035e4:	4604      	mov	r4, r0
	temp = temp/(steps+1);
 80035e6:	1c68      	adds	r0, r5, #1
 80035e8:	f7fd fa98 	bl	8000b1c <__aeabi_i2f>
 80035ec:	4601      	mov	r1, r0
 80035ee:	4620      	mov	r0, r4
 80035f0:	f7fd fb9c 	bl	8000d2c <__aeabi_fdiv>
	return temp;
}
 80035f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp = temp + (get_actual_angle())*(i+1);
 80035f6:	f000 fbcf 	bl	8003d98 <get_actual_angle>
 80035fa:	4607      	mov	r7, r0
 80035fc:	3401      	adds	r4, #1
 80035fe:	4620      	mov	r0, r4
 8003600:	f7fd fa8c 	bl	8000b1c <__aeabi_i2f>
 8003604:	4639      	mov	r1, r7
 8003606:	f7fd fadd 	bl	8000bc4 <__aeabi_fmul>
 800360a:	4601      	mov	r1, r0
 800360c:	4630      	mov	r0, r6
 800360e:	f7fd f9d1 	bl	80009b4 <__addsf3>
 8003612:	4606      	mov	r6, r0
 8003614:	e7d8      	b.n	80035c8 <_WMA_angle+0x8>

08003616 <PID_init>:
//That is, a->b is equivalent to (*a).b

PIDtypedef* PID_init(PIDtypedef* PID, float *KP, float *KI, float *KD, float *hold)
{

	PID->Kp = *KP;
 8003616:	6809      	ldr	r1, [r1, #0]
{
 8003618:	b510      	push	{r4, lr}
	PID->Kp = *KP;
 800361a:	6001      	str	r1, [r0, #0]
	PID->Ki = *KI;
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	6042      	str	r2, [r0, #4]
	PID->Kd = *KD;
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6083      	str	r3, [r0, #8]

	PID->hold = *hold;
 8003624:	9b02      	ldr	r3, [sp, #8]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60c3      	str	r3, [r0, #12]

	PID->out = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	6103      	str	r3, [r0, #16]
	PID->e = 0;
 800362e:	6143      	str	r3, [r0, #20]


	return PID;
}
 8003630:	bd10      	pop	{r4, pc}

08003632 <integral_part>:




void integral_part(PIDtypedef *PID, float PID_e)
{
 8003632:	b510      	push	{r4, lr}
 8003634:	4604      	mov	r4, r0
 8003636:	4608      	mov	r0, r1
	PID->e=PID_e;
 8003638:	6161      	str	r1, [r4, #20]
	PID->I += PID->Ki * PID->e;
 800363a:	6861      	ldr	r1, [r4, #4]
 800363c:	f7fd fac2 	bl	8000bc4 <__aeabi_fmul>
 8003640:	4601      	mov	r1, r0
 8003642:	69e0      	ldr	r0, [r4, #28]
 8003644:	f7fd f9b6 	bl	80009b4 <__addsf3>
 8003648:	61e0      	str	r0, [r4, #28]
 800364a:	bd10      	pop	{r4, pc}

0800364c <differential_part>:
}

void differential_part(PIDtypedef *PID, float PID_e)
{
 800364c:	b510      	push	{r4, lr}
 800364e:	4604      	mov	r4, r0
 8003650:	4608      	mov	r0, r1

	PID->e=PID_e;
 8003652:	6161      	str	r1, [r4, #20]
	PID->D = PID->Kd * PID->e - PID->D;
 8003654:	68a1      	ldr	r1, [r4, #8]
 8003656:	f7fd fab5 	bl	8000bc4 <__aeabi_fmul>
 800365a:	6a21      	ldr	r1, [r4, #32]
 800365c:	f7fd f9a8 	bl	80009b0 <__aeabi_fsub>
 8003660:	6220      	str	r0, [r4, #32]
 8003662:	bd10      	pop	{r4, pc}

08003664 <PID>:
	PID->e = PID_e;
	PID->P=PID->Kp*PID->e;
}

void PID(PIDtypedef *PID, float PID_e)
{
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	4604      	mov	r4, r0
	PID->P=PID->Kp*PID->e;
 8003668:	6800      	ldr	r0, [r0, #0]
	PID->e = PID_e;
 800366a:	6161      	str	r1, [r4, #20]
{
 800366c:	460d      	mov	r5, r1
	PID->P=PID->Kp*PID->e;
 800366e:	f7fd faa9 	bl	8000bc4 <__aeabi_fmul>
	proportional_part(PID, PID_e);
	differential_part(PID, PID_e);
 8003672:	4629      	mov	r1, r5
	PID->P=PID->Kp*PID->e;
 8003674:	61a0      	str	r0, [r4, #24]
	differential_part(PID, PID_e);
 8003676:	4620      	mov	r0, r4
 8003678:	f7ff ffe8 	bl	800364c <differential_part>
	integral_part(PID, PID_e);
 800367c:	4629      	mov	r1, r5
 800367e:	4620      	mov	r0, r4
 8003680:	f7ff ffd7 	bl	8003632 <integral_part>
	PID->out=PID->P+PID->I+PID->D;
 8003684:	69e1      	ldr	r1, [r4, #28]
 8003686:	69a0      	ldr	r0, [r4, #24]
 8003688:	f7fd f994 	bl	80009b4 <__addsf3>
 800368c:	6a21      	ldr	r1, [r4, #32]
 800368e:	f7fd f991 	bl	80009b4 <__addsf3>
 8003692:	6120      	str	r0, [r4, #16]
 8003694:	bd38      	pop	{r3, r4, r5, pc}

08003696 <SD_MPU6050_SetDataRate>:
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8003696:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8003698:	2319      	movs	r3, #25
{
 800369a:	4605      	mov	r5, r0
	d[1] = rate;

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800369c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t address = DataStruct->Address;
 80036a0:	780c      	ldrb	r4, [r1, #0]
	d[0] = MPU6050_SMPLRT_DIV;
 80036a2:	f88d 300c 	strb.w	r3, [sp, #12]
	d[1] = rate;
 80036a6:	f88d 200d 	strb.w	r2, [sp, #13]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80036aa:	b2a4      	uxth	r4, r4
 80036ac:	9600      	str	r6, [sp, #0]
 80036ae:	2302      	movs	r3, #2
 80036b0:	aa03      	add	r2, sp, #12
 80036b2:	4621      	mov	r1, r4
 80036b4:	4628      	mov	r0, r5
 80036b6:	f7fe fb59 	bl	8001d6c <HAL_I2C_Master_Transmit>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d1f6      	bne.n	80036ac <SD_MPU6050_SetDataRate+0x16>
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 80036be:	b004      	add	sp, #16
 80036c0:	bd70      	pop	{r4, r5, r6, pc}

080036c2 <SD_MPU6050_SetAccelerometer>:
SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80036c2:	231c      	movs	r3, #28
{
 80036c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036c8:	4607      	mov	r7, r0
 80036ca:	460c      	mov	r4, r1
 80036cc:	4616      	mov	r6, r2

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80036ce:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 80036d2:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 80036d4:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80036d6:	f10d 0810 	add.w	r8, sp, #16
 80036da:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80036de:	b2ad      	uxth	r5, r5
 80036e0:	f8cd 9000 	str.w	r9, [sp]
 80036e4:	2301      	movs	r3, #1
 80036e6:	4642      	mov	r2, r8
 80036e8:	4629      	mov	r1, r5
 80036ea:	4638      	mov	r0, r7
 80036ec:	f7fe fb3e 	bl	8001d6c <HAL_I2C_Master_Transmit>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d1f5      	bne.n	80036e0 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80036f4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80036f8:	f8cd 8000 	str.w	r8, [sp]
 80036fc:	2301      	movs	r3, #1
 80036fe:	f10d 020e 	add.w	r2, sp, #14
 8003702:	4629      	mov	r1, r5
 8003704:	4638      	mov	r0, r7
 8003706:	f7fe fbff 	bl	8001f08 <HAL_I2C_Master_Receive>
 800370a:	2800      	cmp	r0, #0
 800370c:	d1f4      	bne.n	80036f8 <SD_MPU6050_SetAccelerometer+0x36>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800370e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8003712:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003716:	f023 0318 	bic.w	r3, r3, #24
 800371a:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 800371e:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8003722:	f8cd 8000 	str.w	r8, [sp]
 8003726:	2301      	movs	r3, #1
 8003728:	f10d 020e 	add.w	r2, sp, #14
 800372c:	4629      	mov	r1, r5
 800372e:	4638      	mov	r0, r7
 8003730:	f7fe fb1c 	bl	8001d6c <HAL_I2C_Master_Transmit>
 8003734:	2800      	cmp	r0, #0
 8003736:	d1f4      	bne.n	8003722 <SD_MPU6050_SetAccelerometer+0x60>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8003738:	2e03      	cmp	r6, #3
 800373a:	d806      	bhi.n	800374a <SD_MPU6050_SetAccelerometer+0x88>
 800373c:	e8df f006 	tbb	[pc, r6]
 8003740:	0f0c0902 	.word	0x0f0c0902
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8003744:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
			break;
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
			break;
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8003748:	60a3      	str	r3, [r4, #8]
			break;
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 800374a:	2000      	movs	r0, #0
 800374c:	b005      	add	sp, #20
 800374e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8003752:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 8003756:	e7f7      	b.n	8003748 <SD_MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8003758:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 800375c:	e7f4      	b.n	8003748 <SD_MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800375e:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 8003762:	e7f1      	b.n	8003748 <SD_MPU6050_SetAccelerometer+0x86>

08003764 <SD_MPU6050_SetGyroscope>:
SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8003764:	231b      	movs	r3, #27
{
 8003766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800376a:	4607      	mov	r7, r0
 800376c:	460c      	mov	r4, r1
 800376e:	4616      	mov	r6, r2

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003770:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 8003774:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 8003776:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8003778:	f10d 0810 	add.w	r8, sp, #16
 800377c:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003780:	b2ad      	uxth	r5, r5
 8003782:	f8cd 9000 	str.w	r9, [sp]
 8003786:	2301      	movs	r3, #1
 8003788:	4642      	mov	r2, r8
 800378a:	4629      	mov	r1, r5
 800378c:	4638      	mov	r0, r7
 800378e:	f7fe faed 	bl	8001d6c <HAL_I2C_Master_Transmit>
 8003792:	2800      	cmp	r0, #0
 8003794:	d1f5      	bne.n	8003782 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8003796:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800379a:	f8cd 8000 	str.w	r8, [sp]
 800379e:	2301      	movs	r3, #1
 80037a0:	f10d 020e 	add.w	r2, sp, #14
 80037a4:	4629      	mov	r1, r5
 80037a6:	4638      	mov	r0, r7
 80037a8:	f7fe fbae 	bl	8001f08 <HAL_I2C_Master_Receive>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d1f4      	bne.n	800379a <SD_MPU6050_SetGyroscope+0x36>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80037b0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 80037b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80037b8:	f023 0318 	bic.w	r3, r3, #24
 80037bc:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 80037c0:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80037c4:	f8cd 8000 	str.w	r8, [sp]
 80037c8:	2301      	movs	r3, #1
 80037ca:	f10d 020e 	add.w	r2, sp, #14
 80037ce:	4629      	mov	r1, r5
 80037d0:	4638      	mov	r0, r7
 80037d2:	f7fe facb 	bl	8001d6c <HAL_I2C_Master_Transmit>
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d1f4      	bne.n	80037c4 <SD_MPU6050_SetGyroscope+0x60>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 80037da:	2e03      	cmp	r6, #3
 80037dc:	d805      	bhi.n	80037ea <SD_MPU6050_SetGyroscope+0x86>
 80037de:	e8df f006 	tbb	[pc, r6]
 80037e2:	0802      	.short	0x0802
 80037e4:	0c0a      	.short	0x0c0a
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <SD_MPU6050_SetGyroscope+0x9c>)
				break;
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
				break;
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80037e8:	6063      	str	r3, [r4, #4]
			default:
				break;
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 80037ea:	2000      	movs	r0, #0
 80037ec:	b005      	add	sp, #20
 80037ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <SD_MPU6050_SetGyroscope+0xa0>)
 80037f4:	e7f8      	b.n	80037e8 <SD_MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <SD_MPU6050_SetGyroscope+0xa4>)
 80037f8:	e7f6      	b.n	80037e8 <SD_MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <SD_MPU6050_SetGyroscope+0xa8>)
 80037fc:	e7f4      	b.n	80037e8 <SD_MPU6050_SetGyroscope+0x84>
 80037fe:	bf00      	nop
 8003800:	3bfa232d 	.word	0x3bfa232d
 8003804:	3c7a232d 	.word	0x3c7a232d
 8003808:	3cf9c190 	.word	0x3cf9c190
 800380c:	3d79c190 	.word	0x3d79c190

08003810 <SD_MPU6050_Init>:
{
 8003810:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003814:	4698      	mov	r8, r3
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8003816:	2375      	movs	r3, #117	; 0x75
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8003818:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800381c:	b294      	uxth	r4, r2
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 800381e:	700a      	strb	r2, [r1, #0]
{
 8003820:	460e      	mov	r6, r1
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8003822:	f88d 300a 	strb.w	r3, [sp, #10]
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8003826:	2202      	movs	r2, #2
 8003828:	2305      	movs	r3, #5
 800382a:	4621      	mov	r1, r4
{
 800382c:	4605      	mov	r5, r0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800382e:	f7fe fce3 	bl	80021f8 <HAL_I2C_IsDeviceReady>
 8003832:	b118      	cbz	r0, 800383c <SD_MPU6050_Init+0x2c>
				return SD_MPU6050_Result_Error;
 8003834:	2001      	movs	r0, #1
}
 8003836:	b004      	add	sp, #16
 8003838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 800383c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8003840:	2301      	movs	r3, #1
 8003842:	9700      	str	r7, [sp, #0]
 8003844:	f10d 020a 	add.w	r2, sp, #10
 8003848:	4621      	mov	r1, r4
 800384a:	4628      	mov	r0, r5
 800384c:	f7fe fa8e 	bl	8001d6c <HAL_I2C_Master_Transmit>
 8003850:	2800      	cmp	r0, #0
 8003852:	d1ef      	bne.n	8003834 <SD_MPU6050_Init+0x24>
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8003854:	9700      	str	r7, [sp, #0]
 8003856:	2301      	movs	r3, #1
 8003858:	f10d 020b 	add.w	r2, sp, #11
 800385c:	4621      	mov	r1, r4
 800385e:	4628      	mov	r0, r5
 8003860:	f7fe fb52 	bl	8001f08 <HAL_I2C_Master_Receive>
 8003864:	2800      	cmp	r0, #0
 8003866:	d1e5      	bne.n	8003834 <SD_MPU6050_Init+0x24>
		while(temp != MPU6050_I_AM)
 8003868:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800386c:	2b68      	cmp	r3, #104	; 0x68
 800386e:	d120      	bne.n	80038b2 <SD_MPU6050_Init+0xa2>
		d[0] = MPU6050_PWR_MGMT_1;
 8003870:	236b      	movs	r3, #107	; 0x6b
		d[1] = 0x00;
 8003872:	f88d 000d 	strb.w	r0, [sp, #13]
		d[0] = MPU6050_PWR_MGMT_1;
 8003876:	f88d 300c 	strb.w	r3, [sp, #12]
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800387a:	4621      	mov	r1, r4
 800387c:	9700      	str	r7, [sp, #0]
 800387e:	2302      	movs	r3, #2
 8003880:	aa03      	add	r2, sp, #12
 8003882:	4628      	mov	r0, r5
 8003884:	f7fe fa72 	bl	8001d6c <HAL_I2C_Master_Transmit>
 8003888:	4604      	mov	r4, r0
 800388a:	2800      	cmp	r0, #0
 800388c:	d1d2      	bne.n	8003834 <SD_MPU6050_Init+0x24>
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 800388e:	2207      	movs	r2, #7
 8003890:	4631      	mov	r1, r6
 8003892:	4628      	mov	r0, r5
 8003894:	f7ff feff 	bl	8003696 <SD_MPU6050_SetDataRate>
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8003898:	4642      	mov	r2, r8
 800389a:	4631      	mov	r1, r6
 800389c:	4628      	mov	r0, r5
 800389e:	f7ff ff10 	bl	80036c2 <SD_MPU6050_SetAccelerometer>
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80038a2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80038a6:	4631      	mov	r1, r6
 80038a8:	4628      	mov	r0, r5
 80038aa:	f7ff ff5b 	bl	8003764 <SD_MPU6050_SetGyroscope>
	return SD_MPU6050_Result_Ok;
 80038ae:	4620      	mov	r0, r4
 80038b0:	e7c1      	b.n	8003836 <SD_MPU6050_Init+0x26>
				return SD_MPU6050_Result_DeviceInvalid;
 80038b2:	2003      	movs	r0, #3
 80038b4:	e7bf      	b.n	8003836 <SD_MPU6050_Init+0x26>

080038b6 <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80038b6:	233b      	movs	r3, #59	; 0x3b
{
 80038b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038bc:	4606      	mov	r6, r0
 80038be:	460c      	mov	r4, r1
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80038c0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 80038c4:	b086      	sub	sp, #24
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80038c6:	ad06      	add	r5, sp, #24
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80038c8:	780f      	ldrb	r7, [r1, #0]
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80038ca:	f805 3d09 	strb.w	r3, [r5, #-9]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80038ce:	f8cd 8000 	str.w	r8, [sp]
 80038d2:	2301      	movs	r3, #1
 80038d4:	462a      	mov	r2, r5
 80038d6:	4639      	mov	r1, r7
 80038d8:	4630      	mov	r0, r6
 80038da:	f7fe fa47 	bl	8001d6c <HAL_I2C_Master_Transmit>
 80038de:	2800      	cmp	r0, #0
 80038e0:	d1f5      	bne.n	80038ce <SD_MPU6050_ReadAccelerometer+0x18>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80038e2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80038e6:	9500      	str	r5, [sp, #0]
 80038e8:	2306      	movs	r3, #6
 80038ea:	aa04      	add	r2, sp, #16
 80038ec:	4639      	mov	r1, r7
 80038ee:	4630      	mov	r0, r6
 80038f0:	f7fe fb0a 	bl	8001f08 <HAL_I2C_Master_Receive>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d1f6      	bne.n	80038e6 <SD_MPU6050_ReadAccelerometer+0x30>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 80038f8:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80038fc:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003900:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003904:	81a3      	strh	r3, [r4, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8003906:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800390a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800390e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003912:	81e3      	strh	r3, [r4, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8003914:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003918:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800391c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003920:	8223      	strh	r3, [r4, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003922:	b006      	add	sp, #24
 8003924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003928 <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8003928:	2343      	movs	r3, #67	; 0x43
{
 800392a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800392e:	4606      	mov	r6, r0
 8003930:	460c      	mov	r4, r1
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003932:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 8003936:	b086      	sub	sp, #24
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8003938:	ad06      	add	r5, sp, #24
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 800393a:	780f      	ldrb	r7, [r1, #0]
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 800393c:	f805 3d09 	strb.w	r3, [r5, #-9]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003940:	f8cd 8000 	str.w	r8, [sp]
 8003944:	2301      	movs	r3, #1
 8003946:	462a      	mov	r2, r5
 8003948:	4639      	mov	r1, r7
 800394a:	4630      	mov	r0, r6
 800394c:	f7fe fa0e 	bl	8001d6c <HAL_I2C_Master_Transmit>
 8003950:	2800      	cmp	r0, #0
 8003952:	d1f5      	bne.n	8003940 <SD_MPU6050_ReadGyroscope+0x18>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8003954:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003958:	9500      	str	r5, [sp, #0]
 800395a:	2306      	movs	r3, #6
 800395c:	aa04      	add	r2, sp, #16
 800395e:	4639      	mov	r1, r7
 8003960:	4630      	mov	r0, r6
 8003962:	f7fe fad1 	bl	8001f08 <HAL_I2C_Master_Receive>
 8003966:	2800      	cmp	r0, #0
 8003968:	d1f6      	bne.n	8003958 <SD_MPU6050_ReadGyroscope+0x30>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 800396a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800396e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003972:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003976:	8263      	strh	r3, [r4, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8003978:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800397c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003980:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003984:	82a3      	strh	r3, [r4, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8003986:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800398a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800398e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003992:	82e3      	strh	r3, [r4, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003994:	b006      	add	sp, #24
 8003996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800399c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800399c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800399e:	4811      	ldr	r0, [pc, #68]	; (80039e4 <MX_ADC1_Init+0x48>)
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80039a2:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039a4:	2401      	movs	r4, #1
  hadc1.Instance = ADC1;
 80039a6:	6002      	str	r2, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039a8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	9302      	str	r3, [sp, #8]
 80039b0:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80039b2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039b4:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039b6:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039b8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039ba:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80039bc:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039be:	f7fd fd0f 	bl	80013e0 <HAL_ADC_Init>
 80039c2:	b108      	cbz	r0, 80039c8 <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 80039c4:	f000 fd48 	bl	8004458 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80039c8:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039ca:	a901      	add	r1, sp, #4
 80039cc:	4805      	ldr	r0, [pc, #20]	; (80039e4 <MX_ADC1_Init+0x48>)
  sConfig.Channel = ADC_CHANNEL_1;
 80039ce:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039d0:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80039d2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039d4:	f7fd fb98 	bl	8001108 <HAL_ADC_ConfigChannel>
 80039d8:	b108      	cbz	r0, 80039de <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80039da:	f000 fd3d 	bl	8004458 <Error_Handler>
  }

}
 80039de:	b004      	add	sp, #16
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	bf00      	nop
 80039e4:	20000260 	.word	0x20000260
 80039e8:	40012400 	.word	0x40012400

080039ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80039ec:	b530      	push	{r4, r5, lr}
 80039ee:	4605      	mov	r5, r0
 80039f0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f2:	2210      	movs	r2, #16
 80039f4:	2100      	movs	r1, #0
 80039f6:	a802      	add	r0, sp, #8
 80039f8:	f000 ff58 	bl	80048ac <memset>
  if(adcHandle->Instance==ADC1)
 80039fc:	682a      	ldr	r2, [r5, #0]
 80039fe:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <HAL_ADC_MspInit+0x84>)
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d133      	bne.n	8003a6c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a04:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003a08:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0a:	481a      	ldr	r0, [pc, #104]	; (8003a74 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a10:	619a      	str	r2, [r3, #24]
 8003a12:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a14:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a16:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003a1a:	9200      	str	r2, [sp, #0]
 8003a1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1e:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003a20:	4c15      	ldr	r4, [pc, #84]	; (8003a78 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a22:	f042 0204 	orr.w	r2, r2, #4
 8003a26:	619a      	str	r2, [r3, #24]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a32:	2302      	movs	r3, #2
 8003a34:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a36:	2303      	movs	r3, #3
 8003a38:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3a:	f7fd ff05 	bl	8001848 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a42:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Channel1;
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a48:	6122      	str	r2, [r4, #16]
    hdma_adc1.Instance = DMA1_Channel1;
 8003a4a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a50:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a52:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a54:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a56:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a58:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003a5a:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003a5c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a5e:	f7fd fda9 	bl	80015b4 <HAL_DMA_Init>
 8003a62:	b108      	cbz	r0, 8003a68 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8003a64:	f000 fcf8 	bl	8004458 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003a68:	622c      	str	r4, [r5, #32]
 8003a6a:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003a6c:	b007      	add	sp, #28
 8003a6e:	bd30      	pop	{r4, r5, pc}
 8003a70:	40012400 	.word	0x40012400
 8003a74:	40010800 	.word	0x40010800
 8003a78:	20000290 	.word	0x20000290
 8003a7c:	40020008 	.word	0x40020008

08003a80 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <MX_DMA_Init+0x2c>)
{
 8003a82:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a84:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003a86:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003a8e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a90:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003a92:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003a9c:	f7fd fd32 	bl	8001504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003aa0:	200b      	movs	r0, #11
 8003aa2:	f7fd fd63 	bl	800156c <HAL_NVIC_EnableIRQ>

}
 8003aa6:	b003      	add	sp, #12
 8003aa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aac:	40021000 	.word	0x40021000

08003ab0 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <MX_GPIO_Init+0x40>)
{
 8003ab2:	b084      	sub	sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	f042 0220 	orr.w	r2, r2, #32
 8003aba:	619a      	str	r2, [r3, #24]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	f002 0220 	and.w	r2, r2, #32
 8003ac2:	9201      	str	r2, [sp, #4]
 8003ac4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	f042 0204 	orr.w	r2, r2, #4
 8003acc:	619a      	str	r2, [r3, #24]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	f002 0204 	and.w	r2, r2, #4
 8003ad4:	9202      	str	r2, [sp, #8]
 8003ad6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	f042 0208 	orr.w	r2, r2, #8
 8003ade:	619a      	str	r2, [r3, #24]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	9303      	str	r3, [sp, #12]
 8003ae8:	9b03      	ldr	r3, [sp, #12]

}
 8003aea:	b004      	add	sp, #16
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000

08003af4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003af4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003af6:	480c      	ldr	r0, [pc, #48]	; (8003b28 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <MX_I2C1_Init+0x38>)
 8003afa:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003b30 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8003b02:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b06:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b08:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b0a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b0c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b0e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b10:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b12:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b14:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b16:	f7fe f885 	bl	8001c24 <HAL_I2C_Init>
 8003b1a:	b118      	cbz	r0, 8003b24 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8003b1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003b20:	f000 bc9a 	b.w	8004458 <Error_Handler>
 8003b24:	bd08      	pop	{r3, pc}
 8003b26:	bf00      	nop
 8003b28:	200002d4 	.word	0x200002d4
 8003b2c:	40005400 	.word	0x40005400
 8003b30:	000186a0 	.word	0x000186a0

08003b34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b34:	b510      	push	{r4, lr}
 8003b36:	4604      	mov	r4, r0
 8003b38:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	a802      	add	r0, sp, #8
 8003b40:	f000 feb4 	bl	80048ac <memset>
  if(i2cHandle->Instance==I2C1)
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_I2C_MspInit+0x68>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d124      	bne.n	8003b96 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4c:	4c14      	ldr	r4, [pc, #80]	; (8003ba0 <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b50:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b52:	4814      	ldr	r0, [pc, #80]	; (8003ba4 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b54:	f043 0308 	orr.w	r3, r3, #8
 8003b58:	61a3      	str	r3, [r4, #24]
 8003b5a:	69a3      	ldr	r3, [r4, #24]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b68:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b6a:	2312      	movs	r3, #18
 8003b6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b72:	f7fd fe69 	bl	8001848 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <HAL_I2C_MspInit+0x74>)
 8003b78:	6853      	ldr	r3, [r2, #4]
 8003b7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b7e:	f043 0302 	orr.w	r3, r3, #2
 8003b82:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b84:	69e3      	ldr	r3, [r4, #28]
 8003b86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b8a:	61e3      	str	r3, [r4, #28]
 8003b8c:	69e3      	ldr	r3, [r4, #28]
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b96:	b006      	add	sp, #24
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40005400 	.word	0x40005400
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40010c00 	.word	0x40010c00
 8003ba8:	40010000 	.word	0x40010000

08003bac <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bac:	2228      	movs	r2, #40	; 0x28
{
 8003bae:	b530      	push	{r4, r5, lr}
 8003bb0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bb2:	eb0d 0002 	add.w	r0, sp, r2
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	f000 fe78 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bbc:	2214      	movs	r2, #20
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	eb0d 0002 	add.w	r0, sp, r2
 8003bc4:	f000 fe72 	bl	80048ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bc8:	2100      	movs	r1, #0
 8003bca:	2210      	movs	r2, #16
 8003bcc:	a801      	add	r0, sp, #4
 8003bce:	f000 fe6d 	bl	80048ac <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bd6:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bd8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bda:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bdc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003bde:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003be4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003be6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003be8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bea:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bec:	f7fe fbae 	bl	800234c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bf0:	230f      	movs	r3, #15
 8003bf2:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bf8:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bfa:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003bfc:	f44f 63a0 	mov.w	r3, #1280	; 0x500

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c00:	4621      	mov	r1, r4
 8003c02:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003c04:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c06:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c08:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c0a:	f7fe fd79 	bl	8002700 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c0e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003c10:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003c12:	9503      	str	r5, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c14:	f7fe fe32 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003c18:	b015      	add	sp, #84	; 0x54
 8003c1a:	bd30      	pop	{r4, r5, pc}

08003c1c <servo_set_CCRx_value>:

/* USER CODE BEGIN 4 */

void servo_set_CCRx_value(uint16_t CCRx_value)
{
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,CCRx_value);
 8003c1c:	4b02      	ldr	r3, [pc, #8]	; (8003c28 <servo_set_CCRx_value+0xc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6358      	str	r0, [r3, #52]	; 0x34
	HAL_Delay(25);
 8003c22:	2019      	movs	r0, #25
 8003c24:	f7fd ba22 	b.w	800106c <HAL_Delay>
 8003c28:	20000520 	.word	0x20000520

08003c2c <servo_set_position>:
}

int servo_set_position(volatile float degree)
{
 8003c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c2e:	9001      	str	r0, [sp, #4]
	if((degree>= SERVO_MIN_ANGLE) && (degree <= SERVO_MAX_ANGLE))
 8003c30:	9801      	ldr	r0, [sp, #4]
 8003c32:	4914      	ldr	r1, [pc, #80]	; (8003c84 <servo_set_position+0x58>)
 8003c34:	f7fd f978 	bl	8000f28 <__aeabi_fcmpge>
 8003c38:	b300      	cbz	r0, 8003c7c <servo_set_position+0x50>
 8003c3a:	9801      	ldr	r0, [sp, #4]
 8003c3c:	4912      	ldr	r1, [pc, #72]	; (8003c88 <servo_set_position+0x5c>)
 8003c3e:	f7fd f969 	bl	8000f14 <__aeabi_fcmple>
 8003c42:	b1d8      	cbz	r0, 8003c7c <servo_set_position+0x50>
	{
		volatile uint16_t y = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8ad 300e 	strh.w	r3, [sp, #14]
		y = (uint16_t)(CCRxTD_b*degree+CCRxTD_a);
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <servo_set_position+0x60>)
 8003c4c:	9801      	ldr	r0, [sp, #4]
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	f7fc ffb8 	bl	8000bc4 <__aeabi_fmul>
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <servo_set_position+0x64>)
 8003c56:	6819      	ldr	r1, [r3, #0]
 8003c58:	f7fc feac 	bl	80009b4 <__addsf3>
 8003c5c:	f7fd f99e 	bl	8000f9c <__aeabi_f2uiz>
 8003c60:	b280      	uxth	r0, r0
 8003c62:	f8ad 000e 	strh.w	r0, [sp, #14]
		servo_set_CCRx_value(y);
 8003c66:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003c6a:	b280      	uxth	r0, r0
 8003c6c:	f7ff ffd6 	bl	8003c1c <servo_set_CCRx_value>
//        HAL_Delay(50);
		return y;
 8003c70:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003c74:	b280      	uxth	r0, r0
	else
	{
		return -1;
	}

}
 8003c76:	b005      	add	sp, #20
 8003c78:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	e7f9      	b.n	8003c76 <servo_set_position+0x4a>
 8003c82:	bf00      	nop
 8003c84:	c2200000 	.word	0xc2200000
 8003c88:	42200000 	.word	0x42200000
 8003c8c:	2000000c 	.word	0x2000000c
 8003c90:	20000008 	.word	0x20000008

08003c94 <clear_uart_buffer>:

void clear_uart_buffer(uint8_t counter, uint8_t len, uint8_t buffer[len]){
 8003c94:	b510      	push	{r4, lr}
	for(uint8_t i=0; i<len; i++){
 8003c96:	4610      	mov	r0, r2
		buffer[i]='\0';
 8003c98:	2400      	movs	r4, #0
	for(uint8_t i=0; i<len; i++){
 8003c9a:	1a83      	subs	r3, r0, r2
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4299      	cmp	r1, r3
 8003ca0:	d800      	bhi.n	8003ca4 <clear_uart_buffer+0x10>
	}
}
 8003ca2:	bd10      	pop	{r4, pc}
		buffer[i]='\0';
 8003ca4:	f800 4b01 	strb.w	r4, [r0], #1
 8003ca8:	e7f7      	b.n	8003c9a <clear_uart_buffer+0x6>
	...

08003cac <potentiometer_calibration>:
//	  }
//}


void potentiometer_calibration()
{
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
//	volatile float a,b, x_averaged, y_averaged, xy_averaged, Sx = 0;

    for(int d = 0; d<len; d++)
    {
    	degs[d]=degree;
  	    degree = degree + 0.5;
 8003cb0:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
{
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af02      	add	r7, sp, #8
	float ress[len];
 8003cb8:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003cbc:	ae02      	add	r6, sp, #8
	float degs[len];
 8003cbe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003cc2:	ad02      	add	r5, sp, #8
	float degree = SERVO_MIN_ANGLE;
 8003cc4:	481f      	ldr	r0, [pc, #124]	; (8003d44 <potentiometer_calibration+0x98>)
 8003cc6:	1f2c      	subs	r4, r5, #4
 8003cc8:	f505 781f 	add.w	r8, r5, #636	; 0x27c
    	degs[d]=degree;
 8003ccc:	f844 0f04 	str.w	r0, [r4, #4]!
  	    degree = degree + 0.5;
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	f7fc fe6f 	bl	80009b4 <__addsf3>
    for(int d = 0; d<len; d++)
 8003cd6:	45a0      	cmp	r8, r4
 8003cd8:	d1f8      	bne.n	8003ccc <potentiometer_calibration+0x20>
 8003cda:	2400      	movs	r4, #0
	{
		int err = servo_set_position(degs[d]);
		if(err != -1)
		{
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
			  ress[d]= (ADC1_DATA[0]*ADC1_K);
 8003cdc:	f04f 0800 	mov.w	r8, #0
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8003ce0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003d48 <potentiometer_calibration+0x9c>
			  ress[d]= (ADC1_DATA[0]*ADC1_K);
 8003ce4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003d58 <potentiometer_calibration+0xac>
		int err = servo_set_position(degs[d]);
 8003ce8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8003cec:	f7ff ff9e 	bl	8003c2c <servo_set_position>
		if(err != -1)
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d013      	beq.n	8003d1c <potentiometer_calibration+0x70>
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4914      	ldr	r1, [pc, #80]	; (8003d48 <potentiometer_calibration+0x9c>)
 8003cf8:	4814      	ldr	r0, [pc, #80]	; (8003d4c <potentiometer_calibration+0xa0>)
 8003cfa:	f7fd fac1 	bl	8001280 <HAL_ADC_Start_DMA>
			  ress[d]= (ADC1_DATA[0]*ADC1_K);
 8003cfe:	f8ba 0000 	ldrh.w	r0, [sl]
 8003d02:	f7fc fb89 	bl	8000418 <__aeabi_i2d>
 8003d06:	4642      	mov	r2, r8
 8003d08:	464b      	mov	r3, r9
 8003d0a:	f7fc fbeb 	bl	80004e4 <__aeabi_dmul>
 8003d0e:	f7fc fdfb 	bl	8000908 <__aeabi_d2f>
 8003d12:	f846 0024 	str.w	r0, [r6, r4, lsl #2]

			  HAL_Delay(1);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f7fd f9a8 	bl	800106c <HAL_Delay>
		 }
         HAL_Delay(1);
 8003d1c:	2001      	movs	r0, #1
	for(int d = 0; d < len; d++)
 8003d1e:	3401      	adds	r4, #1
         HAL_Delay(1);
 8003d20:	f7fd f9a4 	bl	800106c <HAL_Delay>
	for(int d = 0; d < len; d++)
 8003d24:	2ca0      	cmp	r4, #160	; 0xa0
 8003d26:	d1df      	bne.n	8003ce8 <potentiometer_calibration+0x3c>
	}

//	linear_regression(len,degs, ress, &DTR_a, &DTR_b);

	linear_regression(len, ress, degs, &RTD_a, &RTD_b);
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <potentiometer_calibration+0xa4>)
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	4631      	mov	r1, r6
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <potentiometer_calibration+0xa8>)
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff fc07 	bl	8003546 <linear_regression>
    HAL_Delay(10);
 8003d38:	200a      	movs	r0, #10
 8003d3a:	f7fd f997 	bl	800106c <HAL_Delay>
}
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d44:	c2200000 	.word	0xc2200000
 8003d48:	200000b8 	.word	0x200000b8
 8003d4c:	20000260 	.word	0x20000260
 8003d50:	20000024 	.word	0x20000024
 8003d54:	20000020 	.word	0x20000020
 8003d58:	3f480000 	.word	0x3f480000

08003d5c <get_resistance>:

float get_resistance()
{
 8003d5c:	b513      	push	{r0, r1, r4, lr}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8003d5e:	4c0b      	ldr	r4, [pc, #44]	; (8003d8c <get_resistance+0x30>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	4621      	mov	r1, r4
 8003d64:	480a      	ldr	r0, [pc, #40]	; (8003d90 <get_resistance+0x34>)
 8003d66:	f7fd fa8b 	bl	8001280 <HAL_ADC_Start_DMA>
	volatile float res = ADC1_DATA[0]*ADC1_K;
 8003d6a:	8820      	ldrh	r0, [r4, #0]
 8003d6c:	f7fc fb54 	bl	8000418 <__aeabi_i2d>
 8003d70:	2200      	movs	r2, #0
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <get_resistance+0x38>)
 8003d74:	f7fc fbb6 	bl	80004e4 <__aeabi_dmul>
 8003d78:	f7fc fdc6 	bl	8000908 <__aeabi_d2f>
 8003d7c:	9001      	str	r0, [sp, #4]

	HAL_Delay(15);
 8003d7e:	200f      	movs	r0, #15
 8003d80:	f7fd f974 	bl	800106c <HAL_Delay>
	return res;
 8003d84:	9801      	ldr	r0, [sp, #4]
}
 8003d86:	b002      	add	sp, #8
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200000b8 	.word	0x200000b8
 8003d90:	20000260 	.word	0x20000260
 8003d94:	3f480000 	.word	0x3f480000

08003d98 <get_actual_angle>:

float get_actual_angle()
{
 8003d98:	b507      	push	{r0, r1, r2, lr}

	volatile float current_resistance = get_resistance();
 8003d9a:	f7ff ffdf 	bl	8003d5c <get_resistance>
	volatile float current_angle = current_resistance*RTD_b + RTD_a;
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <get_actual_angle+0x24>)
	volatile float current_resistance = get_resistance();
 8003da0:	9000      	str	r0, [sp, #0]
	volatile float current_angle = current_resistance*RTD_b + RTD_a;
 8003da2:	9800      	ldr	r0, [sp, #0]
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	f7fc ff0d 	bl	8000bc4 <__aeabi_fmul>
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <get_actual_angle+0x28>)
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	f7fc fe01 	bl	80009b4 <__addsf3>
 8003db2:	9001      	str	r0, [sp, #4]
	return current_angle;
 8003db4:	9801      	ldr	r0, [sp, #4]
}
 8003db6:	b003      	add	sp, #12
 8003db8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dbc:	20000024 	.word	0x20000024
 8003dc0:	20000020 	.word	0x20000020

08003dc4 <UART_Transmit_string_CR_LF>:
	HAL_UART_Transmit(huart, &end_code, 1, Timeout);
	HAL_Delay(10);
}

void UART_Transmit_string_CR_LF(UART_HandleTypeDef *huart, char *pData, uint32_t Timeout)
{
 8003dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t end_code  = 13; //ASCII '\r'
 8003dc6:	230d      	movs	r3, #13
	uint8_t enter_code  = 10; //ASCII '\r'
 8003dc8:	240a      	movs	r4, #10
{
 8003dca:	4605      	mov	r5, r0

	HAL_UART_Transmit(huart, pData, strlen(pData), Timeout);
 8003dcc:	4608      	mov	r0, r1
{
 8003dce:	4616      	mov	r6, r2
 8003dd0:	460f      	mov	r7, r1
	uint8_t end_code  = 13; //ASCII '\r'
 8003dd2:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t enter_code  = 10; //ASCII '\r'
 8003dd6:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_UART_Transmit(huart, pData, strlen(pData), Timeout);
 8003dda:	f7fc f9c3 	bl	8000164 <strlen>
 8003dde:	4633      	mov	r3, r6
 8003de0:	b282      	uxth	r2, r0
 8003de2:	4639      	mov	r1, r7
 8003de4:	4628      	mov	r0, r5
 8003de6:	f7ff f97f 	bl	80030e8 <HAL_UART_Transmit>
	HAL_Delay(10);
 8003dea:	4620      	mov	r0, r4
 8003dec:	f7fd f93e 	bl	800106c <HAL_Delay>
	HAL_UART_Transmit(huart, &end_code, 1, Timeout);
 8003df0:	4633      	mov	r3, r6
 8003df2:	f10d 0106 	add.w	r1, sp, #6
 8003df6:	2201      	movs	r2, #1
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f7ff f975 	bl	80030e8 <HAL_UART_Transmit>
	HAL_Delay(10);
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f7fd f934 	bl	800106c <HAL_Delay>
	HAL_UART_Transmit(huart, &enter_code, 1, Timeout);
 8003e04:	4633      	mov	r3, r6
 8003e06:	2201      	movs	r2, #1
 8003e08:	f10d 0107 	add.w	r1, sp, #7
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f7ff f96b 	bl	80030e8 <HAL_UART_Transmit>
	HAL_Delay(10);
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7fd f92a 	bl	800106c <HAL_Delay>

}
 8003e18:	b003      	add	sp, #12
 8003e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e1c <UART_send_float>:

void UART_send_float(float number)
{
 8003e1c:	b530      	push	{r4, r5, lr}
	char* point = ".";
	char temp[100] = "";
 8003e1e:	2400      	movs	r4, #0
{
 8003e20:	b09d      	sub	sp, #116	; 0x74
	char temp[100] = "";
 8003e22:	4621      	mov	r1, r4
 8003e24:	2260      	movs	r2, #96	; 0x60
{
 8003e26:	4605      	mov	r5, r0
	char temp[100] = "";
 8003e28:	a804      	add	r0, sp, #16
 8003e2a:	9403      	str	r4, [sp, #12]
 8003e2c:	f000 fd3e 	bl	80048ac <memset>
	volatile int n = 0;

    volatile float reminder, quotient = 0.0;
 8003e30:	2300      	movs	r3, #0

	quotient = (int)(number);
 8003e32:	4628      	mov	r0, r5
	volatile int n = 0;
 8003e34:	9400      	str	r4, [sp, #0]
    volatile float reminder, quotient = 0.0;
 8003e36:	9302      	str	r3, [sp, #8]
	quotient = (int)(number);
 8003e38:	f7fd f88a 	bl	8000f50 <__aeabi_f2iz>
 8003e3c:	f7fc fe6e 	bl	8000b1c <__aeabi_i2f>
 8003e40:	9002      	str	r0, [sp, #8]
	n = quotient;
 8003e42:	9802      	ldr	r0, [sp, #8]
 8003e44:	f7fd f884 	bl	8000f50 <__aeabi_f2iz>
 8003e48:	9000      	str	r0, [sp, #0]

	itoa(n, temp, 10);
 8003e4a:	a903      	add	r1, sp, #12
 8003e4c:	220a      	movs	r2, #10
 8003e4e:	9800      	ldr	r0, [sp, #0]
 8003e50:	f000 fd2a 	bl	80048a8 <itoa>
	HAL_UART_Transmit(&huart1, temp, strlen(temp), 10);
 8003e54:	a803      	add	r0, sp, #12
 8003e56:	f7fc f985 	bl	8000164 <strlen>
 8003e5a:	4c19      	ldr	r4, [pc, #100]	; (8003ec0 <UART_send_float+0xa4>)
 8003e5c:	b282      	uxth	r2, r0
 8003e5e:	a903      	add	r1, sp, #12
 8003e60:	230a      	movs	r3, #10
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7ff f940 	bl	80030e8 <HAL_UART_Transmit>
	HAL_Delay(10);
 8003e68:	200a      	movs	r0, #10
 8003e6a:	f7fd f8ff 	bl	800106c <HAL_Delay>

	HAL_UART_Transmit(&huart1, point, 1, 10);
 8003e6e:	230a      	movs	r3, #10
 8003e70:	2201      	movs	r2, #1
 8003e72:	4914      	ldr	r1, [pc, #80]	; (8003ec4 <UART_send_float+0xa8>)
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff f937 	bl	80030e8 <HAL_UART_Transmit>
	HAL_Delay(10);
 8003e7a:	200a      	movs	r0, #10
 8003e7c:	f7fd f8f6 	bl	800106c <HAL_Delay>

	reminder = fabs(number - quotient);
 8003e80:	9902      	ldr	r1, [sp, #8]
 8003e82:	4628      	mov	r0, r5
 8003e84:	f7fc fd94 	bl	80009b0 <__aeabi_fsub>
 8003e88:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003e8c:	9001      	str	r0, [sp, #4]
	reminder = (int)(reminder*1000);
 8003e8e:	9801      	ldr	r0, [sp, #4]
 8003e90:	490d      	ldr	r1, [pc, #52]	; (8003ec8 <UART_send_float+0xac>)
 8003e92:	f7fc fe97 	bl	8000bc4 <__aeabi_fmul>
 8003e96:	f7fd f85b 	bl	8000f50 <__aeabi_f2iz>
 8003e9a:	f7fc fe3f 	bl	8000b1c <__aeabi_i2f>
 8003e9e:	9001      	str	r0, [sp, #4]
	n = reminder;
 8003ea0:	9801      	ldr	r0, [sp, #4]
 8003ea2:	f7fd f855 	bl	8000f50 <__aeabi_f2iz>
 8003ea6:	9000      	str	r0, [sp, #0]
	itoa(n, temp, 10);
 8003ea8:	a903      	add	r1, sp, #12
 8003eaa:	9800      	ldr	r0, [sp, #0]
 8003eac:	220a      	movs	r2, #10
 8003eae:	f000 fcfb 	bl	80048a8 <itoa>

	UART_Transmit_string_CR_LF(&huart1, temp, 10);
 8003eb2:	220a      	movs	r2, #10
 8003eb4:	a903      	add	r1, sp, #12
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7ff ff84 	bl	8003dc4 <UART_Transmit_string_CR_LF>
}
 8003ebc:	b01d      	add	sp, #116	; 0x74
 8003ebe:	bd30      	pop	{r4, r5, pc}
 8003ec0:	200005a0 	.word	0x200005a0
 8003ec4:	08004e84 	.word	0x08004e84
 8003ec8:	447a0000 	.word	0x447a0000

08003ecc <IMU_get_acc>:

    UART_Transmit_string_CR_LF(&huart1, "stop", 10);
}

float IMU_get_acc(int axis)
{
 8003ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	  volatile float result = 0.0;
 8003ece:	2300      	movs	r3, #0
{
 8003ed0:	4605      	mov	r5, r0
	  SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 8003ed2:	4c0f      	ldr	r4, [pc, #60]	; (8003f10 <IMU_get_acc+0x44>)
 8003ed4:	480f      	ldr	r0, [pc, #60]	; (8003f14 <IMU_get_acc+0x48>)
 8003ed6:	4621      	mov	r1, r4
	  volatile float result = 0.0;
 8003ed8:	9301      	str	r3, [sp, #4]
	  SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 8003eda:	f7ff fcec 	bl	80038b6 <SD_MPU6050_ReadAccelerometer>
 //     HAL_Delay(10);

	  if(axis == X_AXIS)
 8003ede:	2d01      	cmp	r5, #1
 8003ee0:	d10b      	bne.n	8003efa <IMU_get_acc+0x2e>
	  {
		  result=(float)mpu1.Accelerometer_X/MPU_AK;
 8003ee2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
	  {
		  result=(float)mpu1.Accelerometer_Y/MPU_AK;
	  }
	  if(axis == Z_AXIS)
	  {
		  result=(float)mpu1.Accelerometer_Z/MPU_AK;
 8003ee6:	f7fc fe19 	bl	8000b1c <__aeabi_i2f>
 8003eea:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8003eee:	f7fc fe69 	bl	8000bc4 <__aeabi_fmul>
 8003ef2:	9001      	str	r0, [sp, #4]
	  }
	  return result;
 8003ef4:	9801      	ldr	r0, [sp, #4]

}
 8003ef6:	b003      	add	sp, #12
 8003ef8:	bd30      	pop	{r4, r5, pc}
	  if(axis == Y_AXIS)
 8003efa:	2d02      	cmp	r5, #2
 8003efc:	d102      	bne.n	8003f04 <IMU_get_acc+0x38>
		  result=(float)mpu1.Accelerometer_Y/MPU_AK;
 8003efe:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8003f02:	e7f0      	b.n	8003ee6 <IMU_get_acc+0x1a>
	  if(axis == Z_AXIS)
 8003f04:	2d03      	cmp	r5, #3
 8003f06:	d1f5      	bne.n	8003ef4 <IMU_get_acc+0x28>
		  result=(float)mpu1.Accelerometer_Z/MPU_AK;
 8003f08:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8003f0c:	e7eb      	b.n	8003ee6 <IMU_get_acc+0x1a>
 8003f0e:	bf00      	nop
 8003f10:	2000043c 	.word	0x2000043c
 8003f14:	200002d4 	.word	0x200002d4

08003f18 <IMU_get_gyro>:

float IMU_get_gyro(int axis)
{
 8003f18:	b537      	push	{r0, r1, r2, r4, r5, lr}

	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 8003f1a:	4c0f      	ldr	r4, [pc, #60]	; (8003f58 <IMU_get_gyro+0x40>)
{
 8003f1c:	4605      	mov	r5, r0
	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 8003f1e:	4621      	mov	r1, r4
 8003f20:	480e      	ldr	r0, [pc, #56]	; (8003f5c <IMU_get_gyro+0x44>)
 8003f22:	f7ff fd01 	bl	8003928 <SD_MPU6050_ReadGyroscope>
	  volatile float result = 0.0;
 8003f26:	2300      	movs	r3, #0
	  if(axis == X_AXIS)
 8003f28:	2d01      	cmp	r5, #1
	  volatile float result = 0.0;
 8003f2a:	9301      	str	r3, [sp, #4]
	  if(axis == X_AXIS)
 8003f2c:	d10a      	bne.n	8003f44 <IMU_get_gyro+0x2c>
	  {
		  result = (float)mpu1.Gyroscope_X/MPU_GK;
 8003f2e:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
	  {
		  result =(float)mpu1.Gyroscope_Y/MPU_GK;
	  }
	  if(axis == Z_AXIS)
	  {
		  result = (float)mpu1.Gyroscope_Z/MPU_GK;
 8003f32:	f7fc fdf3 	bl	8000b1c <__aeabi_i2f>
 8003f36:	490a      	ldr	r1, [pc, #40]	; (8003f60 <IMU_get_gyro+0x48>)
 8003f38:	f7fc fef8 	bl	8000d2c <__aeabi_fdiv>
 8003f3c:	9001      	str	r0, [sp, #4]
	  }
	  return result;
 8003f3e:	9801      	ldr	r0, [sp, #4]

}
 8003f40:	b003      	add	sp, #12
 8003f42:	bd30      	pop	{r4, r5, pc}
	  if(axis == Y_AXIS)
 8003f44:	2d02      	cmp	r5, #2
 8003f46:	d102      	bne.n	8003f4e <IMU_get_gyro+0x36>
		  result =(float)mpu1.Gyroscope_Y/MPU_GK;
 8003f48:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8003f4c:	e7f1      	b.n	8003f32 <IMU_get_gyro+0x1a>
	  if(axis == Z_AXIS)
 8003f4e:	2d03      	cmp	r5, #3
 8003f50:	d1f5      	bne.n	8003f3e <IMU_get_gyro+0x26>
		  result = (float)mpu1.Gyroscope_Z/MPU_GK;
 8003f52:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8003f56:	e7ec      	b.n	8003f32 <IMU_get_gyro+0x1a>
 8003f58:	2000043c 	.word	0x2000043c
 8003f5c:	200002d4 	.word	0x200002d4
 8003f60:	43030000 	.word	0x43030000
 8003f64:	00000000 	.word	0x00000000

08003f68 <angle_from_acc>:
//
//	return anglex;
//}

float angle_from_acc(int axis)
{
 8003f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f6a:	4604      	mov	r4, r0
	volatile float accx,accy,accz;
	volatile float angle;


	accx = IMU_get_acc(X_AXIS);
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f7ff ffad 	bl	8003ecc <IMU_get_acc>
 8003f72:	9000      	str	r0, [sp, #0]
	accy = IMU_get_acc(Y_AXIS);
 8003f74:	2002      	movs	r0, #2
 8003f76:	f7ff ffa9 	bl	8003ecc <IMU_get_acc>
 8003f7a:	9001      	str	r0, [sp, #4]
	accz = IMU_get_acc(Z_AXIS);
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	f7ff ffa5 	bl	8003ecc <IMU_get_acc>


		if (axis==X_AXIS)
 8003f82:	2c01      	cmp	r4, #1
	accz = IMU_get_acc(Z_AXIS);
 8003f84:	9002      	str	r0, [sp, #8]
		if (axis==X_AXIS)
 8003f86:	d11a      	bne.n	8003fbe <angle_from_acc+0x56>
		{
//			angle = sqrtf(accy*accy + accz*accz);
//			angle = accx/angle;
//			angle = RAD_TO_DEG*atanf(angle);
			angle = RAD_TO_DEG*atanf(accx/hypotf(accy, accz));
 8003f88:	9c00      	ldr	r4, [sp, #0]
 8003f8a:	9801      	ldr	r0, [sp, #4]
		if (axis==Y_AXIS)
		{
//			angle = sqrtf(accx*accx + accz*accz);
//			angle = accy/angle;
//			angle = RAD_TO_DEG*atanf(angle);
			angle = RAD_TO_DEG*atanf(accy/hypotf(accx, accz));
 8003f8c:	9902      	ldr	r1, [sp, #8]
		if (axis==Z_AXIS)
		{
//			angle = sqrtf(accy*accy + accx*accx);
//			angle = angle/accz;
//			angle = RAD_TO_DEG*atanf(angle);
			angle = RAD_TO_DEG*atanf(accz/hypotf(accx, accy));
 8003f8e:	f000 fdf1 	bl	8004b74 <hypotf>
 8003f92:	4601      	mov	r1, r0
 8003f94:	4620      	mov	r0, r4
 8003f96:	f7fc fec9 	bl	8000d2c <__aeabi_fdiv>
 8003f9a:	f000 fcd7 	bl	800494c <atanf>
 8003f9e:	f7fc fa4d 	bl	800043c <__aeabi_f2d>
 8003fa2:	a30d      	add	r3, pc, #52	; (adr r3, 8003fd8 <angle_from_acc+0x70>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc fa9c 	bl	80004e4 <__aeabi_dmul>
 8003fac:	f7fc fcac 	bl	8000908 <__aeabi_d2f>
 8003fb0:	9003      	str	r0, [sp, #12]
		}




	HAL_Delay(10);
 8003fb2:	200a      	movs	r0, #10
 8003fb4:	f7fd f85a 	bl	800106c <HAL_Delay>
	return angle;
 8003fb8:	9803      	ldr	r0, [sp, #12]
}
 8003fba:	b004      	add	sp, #16
 8003fbc:	bd10      	pop	{r4, pc}
		if (axis==Y_AXIS)
 8003fbe:	2c02      	cmp	r4, #2
 8003fc0:	d102      	bne.n	8003fc8 <angle_from_acc+0x60>
			angle = RAD_TO_DEG*atanf(accy/hypotf(accx, accz));
 8003fc2:	9c01      	ldr	r4, [sp, #4]
 8003fc4:	9800      	ldr	r0, [sp, #0]
 8003fc6:	e7e1      	b.n	8003f8c <angle_from_acc+0x24>
		if (axis==Z_AXIS)
 8003fc8:	2c03      	cmp	r4, #3
 8003fca:	d1f2      	bne.n	8003fb2 <angle_from_acc+0x4a>
			angle = RAD_TO_DEG*atanf(accz/hypotf(accx, accy));
 8003fcc:	9c02      	ldr	r4, [sp, #8]
 8003fce:	9800      	ldr	r0, [sp, #0]
 8003fd0:	9901      	ldr	r1, [sp, #4]
 8003fd2:	e7dc      	b.n	8003f8e <angle_from_acc+0x26>
 8003fd4:	f3af 8000 	nop.w
 8003fd8:	e564768a 	.word	0xe564768a
 8003fdc:	404ca5db 	.word	0x404ca5db

08003fe0 <angle_from_gyro>:

float angle_from_gyro(int axis, float dt_us, float* previous_angle)
{
 8003fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe2:	4614      	mov	r4, r2
	volatile float gyro = IMU_get_gyro(axis);
 8003fe4:	f7ff ff98 	bl	8003f18 <IMU_get_gyro>
	*previous_angle = *previous_angle + gyro*dt*1e-6;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <angle_from_gyro+0x50>)
	volatile float gyro = IMU_get_gyro(axis);
 8003fea:	9001      	str	r0, [sp, #4]
	*previous_angle = *previous_angle + gyro*dt*1e-6;
 8003fec:	9d01      	ldr	r5, [sp, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	f7fc fd94 	bl	8000b1c <__aeabi_i2f>
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	f7fc fde5 	bl	8000bc4 <__aeabi_fmul>
 8003ffa:	f7fc fa1f 	bl	800043c <__aeabi_f2d>
 8003ffe:	a30a      	add	r3, pc, #40	; (adr r3, 8004028 <angle_from_gyro+0x48>)
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f7fc fa6e 	bl	80004e4 <__aeabi_dmul>
 8004008:	4606      	mov	r6, r0
 800400a:	6820      	ldr	r0, [r4, #0]
 800400c:	460f      	mov	r7, r1
 800400e:	f7fc fa15 	bl	800043c <__aeabi_f2d>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4630      	mov	r0, r6
 8004018:	4639      	mov	r1, r7
 800401a:	f7fc f8b1 	bl	8000180 <__adddf3>
 800401e:	f7fc fc73 	bl	8000908 <__aeabi_d2f>
 8004022:	6020      	str	r0, [r4, #0]
    return *previous_angle;
}
 8004024:	b003      	add	sp, #12
 8004026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004028:	a0b5ed8d 	.word	0xa0b5ed8d
 800402c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004030:	20000028 	.word	0x20000028

08004034 <complementary_filter>:
float complementary_filter(float dt, int axis, float* angle_gyro, float* CFK)
{
 8004034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}


	volatile float k = *CFK;
 8004036:	681b      	ldr	r3, [r3, #0]
{
 8004038:	4606      	mov	r6, r0
	volatile float k = *CFK;
 800403a:	9301      	str	r3, [sp, #4]
	volatile float angle_acc = 0;
 800403c:	2300      	movs	r3, #0
    volatile float angle = 0;


	angle_acc = angle_from_acc(axis);
 800403e:	4608      	mov	r0, r1
	volatile float angle_acc = 0;
 8004040:	9302      	str	r3, [sp, #8]
{
 8004042:	460c      	mov	r4, r1
    volatile float angle = 0;
 8004044:	9303      	str	r3, [sp, #12]
{
 8004046:	4615      	mov	r5, r2
	angle_acc = angle_from_acc(axis);
 8004048:	f7ff ff8e 	bl	8003f68 <angle_from_acc>
	*angle_gyro = angle_from_gyro(axis, dt, angle_gyro);
 800404c:	462a      	mov	r2, r5
	angle_acc = angle_from_acc(axis);
 800404e:	9002      	str	r0, [sp, #8]
	*angle_gyro = angle_from_gyro(axis, dt, angle_gyro);
 8004050:	4631      	mov	r1, r6
 8004052:	4620      	mov	r0, r4
 8004054:	f7ff ffc4 	bl	8003fe0 <angle_from_gyro>
 8004058:	4604      	mov	r4, r0

    angle= (*angle_gyro)*(1-k)+angle_acc*k;
 800405a:	9901      	ldr	r1, [sp, #4]
	*angle_gyro = angle_from_gyro(axis, dt, angle_gyro);
 800405c:	6028      	str	r0, [r5, #0]
    angle= (*angle_gyro)*(1-k)+angle_acc*k;
 800405e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004062:	f7fc fca5 	bl	80009b0 <__aeabi_fsub>
 8004066:	4621      	mov	r1, r4
 8004068:	f7fc fdac 	bl	8000bc4 <__aeabi_fmul>
 800406c:	9d02      	ldr	r5, [sp, #8]
 800406e:	9e01      	ldr	r6, [sp, #4]
 8004070:	4604      	mov	r4, r0
 8004072:	4631      	mov	r1, r6
 8004074:	4628      	mov	r0, r5
 8004076:	f7fc fda5 	bl	8000bc4 <__aeabi_fmul>
 800407a:	4601      	mov	r1, r0
 800407c:	4620      	mov	r0, r4
 800407e:	f7fc fc99 	bl	80009b4 <__addsf3>
 8004082:	9003      	str	r0, [sp, #12]
    HAL_Delay(1);
 8004084:	2001      	movs	r0, #1
 8004086:	f7fc fff1 	bl	800106c <HAL_Delay>
	return angle;
 800408a:	9803      	ldr	r0, [sp, #12]
}
 800408c:	b004      	add	sp, #16
 800408e:	bd70      	pop	{r4, r5, r6, pc}

08004090 <stabilize_by_pid>:
{
	  volatile float pid_error;
	  volatile float imu_angle;
	  volatile float set;
 //     HAL_Delay(1);
	  if((timer%time_step)!=0)
 8004090:	fb92 f3f1 	sdiv	r3, r2, r1
{
 8004094:	b530      	push	{r4, r5, lr}
	  if((timer%time_step)!=0)
 8004096:	fb03 2211 	mls	r2, r3, r1, r2
{
 800409a:	b085      	sub	sp, #20
 800409c:	4604      	mov	r4, r0
	  if((timer%time_step)!=0)
 800409e:	b112      	cbz	r2, 80040a6 <stabilize_by_pid+0x16>
	  {
		  return PID_struct->out;
 80040a0:	6900      	ldr	r0, [r0, #16]
	  set = SERVO_MAX_ANGLE-PID_struct->out;
//	  set = PID_struct->out;
	  servo_set_position(set);

	  return _WMA_angle(10);
}
 80040a2:	b005      	add	sp, #20
 80040a4:	bd30      	pop	{r4, r5, pc}
	  imu_angle = complementary_filter(time_step, Y_AXIS,
 80040a6:	4608      	mov	r0, r1
 80040a8:	f7fc fd38 	bl	8000b1c <__aeabi_i2f>
 80040ac:	2102      	movs	r1, #2
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <stabilize_by_pid+0x7c>)
 80040b0:	4a17      	ldr	r2, [pc, #92]	; (8004110 <stabilize_by_pid+0x80>)
 80040b2:	f7ff ffbf 	bl	8004034 <complementary_filter>
	  if(imu_angle < IMU_MAX_ANGLE)
 80040b6:	4d17      	ldr	r5, [pc, #92]	; (8004114 <stabilize_by_pid+0x84>)
	  imu_angle = complementary_filter(time_step, Y_AXIS,
 80040b8:	9002      	str	r0, [sp, #8]
	  if(imu_angle < IMU_MAX_ANGLE)
 80040ba:	9802      	ldr	r0, [sp, #8]
 80040bc:	4629      	mov	r1, r5
 80040be:	f7fc ff1f 	bl	8000f00 <__aeabi_fcmplt>
 80040c2:	b100      	cbz	r0, 80040c6 <stabilize_by_pid+0x36>
		  imu_angle = IMU_MAX_ANGLE;
 80040c4:	9502      	str	r5, [sp, #8]
	  if(imu_angle > IMU_MIN_ANGLE)
 80040c6:	4d14      	ldr	r5, [pc, #80]	; (8004118 <stabilize_by_pid+0x88>)
 80040c8:	9802      	ldr	r0, [sp, #8]
 80040ca:	4629      	mov	r1, r5
 80040cc:	f7fc ff36 	bl	8000f3c <__aeabi_fcmpgt>
 80040d0:	b100      	cbz	r0, 80040d4 <stabilize_by_pid+0x44>
		  imu_angle = IMU_MIN_ANGLE;
 80040d2:	9502      	str	r5, [sp, #8]
	  imu_angle = imu_angle*ITS_B + ITS_A;
 80040d4:	9902      	ldr	r1, [sp, #8]
 80040d6:	4811      	ldr	r0, [pc, #68]	; (800411c <stabilize_by_pid+0x8c>)
 80040d8:	f7fc fc6a 	bl	80009b0 <__aeabi_fsub>
 80040dc:	9002      	str	r0, [sp, #8]
	  pid_error = fabs(PID_struct->hold - imu_angle);
 80040de:	9902      	ldr	r1, [sp, #8]
 80040e0:	68e0      	ldr	r0, [r4, #12]
 80040e2:	f7fc fc65 	bl	80009b0 <__aeabi_fsub>
 80040e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80040ea:	9001      	str	r0, [sp, #4]
	  PID(PID_struct, pid_error);
 80040ec:	9901      	ldr	r1, [sp, #4]
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7ff fab8 	bl	8003664 <PID>
	  set = SERVO_MAX_ANGLE-PID_struct->out;
 80040f4:	6921      	ldr	r1, [r4, #16]
 80040f6:	480a      	ldr	r0, [pc, #40]	; (8004120 <stabilize_by_pid+0x90>)
 80040f8:	f7fc fc5a 	bl	80009b0 <__aeabi_fsub>
 80040fc:	9003      	str	r0, [sp, #12]
	  servo_set_position(set);
 80040fe:	9803      	ldr	r0, [sp, #12]
 8004100:	f7ff fd94 	bl	8003c2c <servo_set_position>
	  return _WMA_angle(10);
 8004104:	200a      	movs	r0, #10
 8004106:	f7ff fa5b 	bl	80035c0 <_WMA_angle>
 800410a:	e7ca      	b.n	80040a2 <stabilize_by_pid+0x12>
 800410c:	20000010 	.word	0x20000010
 8004110:	20000410 	.word	0x20000410
 8004114:	c2960000 	.word	0xc2960000
 8004118:	c1f00000 	.word	0xc1f00000
 800411c:	41f00000 	.word	0x41f00000
 8004120:	42200000 	.word	0x42200000

08004124 <main>:
{
 8004124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004128:	b085      	sub	sp, #20
  HAL_Init();
 800412a:	f7fc ff7b 	bl	8001024 <HAL_Init>
  SystemClock_Config();
 800412e:	f7ff fd3d 	bl	8003bac <SystemClock_Config>
  MX_GPIO_Init();
 8004132:	f7ff fcbd 	bl	8003ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004136:	f7ff fca3 	bl	8003a80 <MX_DMA_Init>
  MX_I2C1_Init();
 800413a:	f7ff fcdb 	bl	8003af4 <MX_I2C1_Init>
  MX_TIM4_Init();
 800413e:	f000 fa99 	bl	8004674 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004142:	f000 fae9 	bl	8004718 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004146:	f7ff fc29 	bl	800399c <MX_ADC1_Init>
  MX_TIM1_Init();
 800414a:	f000 fa03 	bl	8004554 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800414e:	2100      	movs	r1, #0
 8004150:	4892      	ldr	r0, [pc, #584]	; (800439c <main+0x278>)
 8004152:	f7fe feef 	bl	8002f34 <HAL_TIM_PWM_Start>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004156:	4c92      	ldr	r4, [pc, #584]	; (80043a0 <main+0x27c>)
  DWT_Init();
 8004158:	f7ff f96a 	bl	8003430 <DWT_Init>
  HAL_TIM_Base_Start(&htim1);
 800415c:	4891      	ldr	r0, [pc, #580]	; (80043a4 <main+0x280>)
 800415e:	f7fe fc79 	bl	8002a54 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8004162:	4890      	ldr	r0, [pc, #576]	; (80043a4 <main+0x280>)
 8004164:	f7fe fc88 	bl	8002a78 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004168:	6822      	ldr	r2, [r4, #0]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 800416a:	498f      	ldr	r1, [pc, #572]	; (80043a8 <main+0x284>)
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800416c:	68d3      	ldr	r3, [r2, #12]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 800416e:	488f      	ldr	r0, [pc, #572]	; (80043ac <main+0x288>)
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004170:	f043 0320 	orr.w	r3, r3, #32
 8004174:	60d3      	str	r3, [r2, #12]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8004176:	2201      	movs	r2, #1
 8004178:	f7fd f882 	bl	8001280 <HAL_ADC_Start_DMA>
  HAL_UART_Transmit(&huart1, hello_string, strlen(hello_string), 10);
 800417c:	4b8c      	ldr	r3, [pc, #560]	; (80043b0 <main+0x28c>)
  a =pid_hold;
 800417e:	4f8d      	ldr	r7, [pc, #564]	; (80043b4 <main+0x290>)
  HAL_UART_Transmit(&huart1, hello_string, strlen(hello_string), 10);
 8004180:	681d      	ldr	r5, [r3, #0]
     CFK=0.85;
 8004182:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 8004450 <main+0x32c>
  HAL_UART_Transmit(&huart1, hello_string, strlen(hello_string), 10);
 8004186:	4628      	mov	r0, r5
 8004188:	f7fb ffec 	bl	8000164 <strlen>
 800418c:	b282      	uxth	r2, r0
 800418e:	4620      	mov	r0, r4
  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,
 8004190:	2400      	movs	r4, #0
  HAL_UART_Transmit(&huart1, hello_string, strlen(hello_string), 10);
 8004192:	4629      	mov	r1, r5
 8004194:	230a      	movs	r3, #10
 8004196:	f7fe ffa7 	bl	80030e8 <HAL_UART_Transmit>
  servo_set_position(SERVO_MIN_ANGLE);
 800419a:	4887      	ldr	r0, [pc, #540]	; (80043b8 <main+0x294>)
 800419c:	f7ff fd46 	bl	8003c2c <servo_set_position>
  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,
 80041a0:	4623      	mov	r3, r4
 80041a2:	4622      	mov	r2, r4
 80041a4:	9400      	str	r4, [sp, #0]
 80041a6:	4985      	ldr	r1, [pc, #532]	; (80043bc <main+0x298>)
 80041a8:	4885      	ldr	r0, [pc, #532]	; (80043c0 <main+0x29c>)
 80041aa:	f7ff fb31 	bl	8003810 <SD_MPU6050_Init>
 80041ae:	4d85      	ldr	r5, [pc, #532]	; (80043c4 <main+0x2a0>)
  result = SD_MPU6050_SetDataRate(&hi2c1,&mpu1,
 80041b0:	4622      	mov	r2, r4
 80041b2:	4982      	ldr	r1, [pc, #520]	; (80043bc <main+0x298>)
  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,
 80041b4:	7028      	strb	r0, [r5, #0]
  result = SD_MPU6050_SetDataRate(&hi2c1,&mpu1,
 80041b6:	4882      	ldr	r0, [pc, #520]	; (80043c0 <main+0x29c>)
 80041b8:	f7ff fa6d 	bl	8003696 <SD_MPU6050_SetDataRate>
 80041bc:	7028      	strb	r0, [r5, #0]
  HAL_Delay(500);
 80041be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041c2:	f7fc ff53 	bl	800106c <HAL_Delay>
  angle_gyro_x = angle_from_acc(X_AXIS);
 80041c6:	2001      	movs	r0, #1
 80041c8:	f7ff fece 	bl	8003f68 <angle_from_acc>
 80041cc:	4b7e      	ldr	r3, [pc, #504]	; (80043c8 <main+0x2a4>)
  servo_set_position(pid_hold);
 80041ce:	4c7f      	ldr	r4, [pc, #508]	; (80043cc <main+0x2a8>)
  angle_gyro_x = angle_from_acc(X_AXIS);
 80041d0:	6018      	str	r0, [r3, #0]
  angle_gyro_y = angle_from_acc(Y_AXIS);
 80041d2:	2002      	movs	r0, #2
 80041d4:	f7ff fec8 	bl	8003f68 <angle_from_acc>
 80041d8:	4b7d      	ldr	r3, [pc, #500]	; (80043d0 <main+0x2ac>)
  startTick = DWT->CYCCNT;
 80041da:	4d7e      	ldr	r5, [pc, #504]	; (80043d4 <main+0x2b0>)
  angle_gyro_y = angle_from_acc(Y_AXIS);
 80041dc:	6018      	str	r0, [r3, #0]
  angle_gyro_z = angle_from_acc(Z_AXIS);
 80041de:	2003      	movs	r0, #3
 80041e0:	f7ff fec2 	bl	8003f68 <angle_from_acc>
 80041e4:	4b7c      	ldr	r3, [pc, #496]	; (80043d8 <main+0x2b4>)
 80041e6:	6018      	str	r0, [r3, #0]
  servo_set_position(pid_hold);
 80041e8:	6820      	ldr	r0, [r4, #0]
 80041ea:	f7ff fd1f 	bl	8003c2c <servo_set_position>
  a =pid_hold;
 80041ee:	6823      	ldr	r3, [r4, #0]
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 80041f0:	4a7a      	ldr	r2, [pc, #488]	; (80043dc <main+0x2b8>)
  a =pid_hold;
 80041f2:	603b      	str	r3, [r7, #0]
  startTick = DWT->CYCCNT;
 80041f4:	4b7a      	ldr	r3, [pc, #488]	; (80043e0 <main+0x2bc>)
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 80041f6:	497b      	ldr	r1, [pc, #492]	; (80043e4 <main+0x2c0>)
  startTick = DWT->CYCCNT;
 80041f8:	685b      	ldr	r3, [r3, #4]
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 80041fa:	487b      	ldr	r0, [pc, #492]	; (80043e8 <main+0x2c4>)
  startTick = DWT->CYCCNT;
 80041fc:	602b      	str	r3, [r5, #0]
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 80041fe:	9400      	str	r4, [sp, #0]
 8004200:	4b7a      	ldr	r3, [pc, #488]	; (80043ec <main+0x2c8>)
 8004202:	f7ff fa08 	bl	8003616 <PID_init>
 8004206:	4606      	mov	r6, r0
 8004208:	4c77      	ldr	r4, [pc, #476]	; (80043e8 <main+0x2c4>)
 800420a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800420c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800420e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004212:	6833      	ldr	r3, [r6, #0]
 8004214:	9703      	str	r7, [sp, #12]
 8004216:	6023      	str	r3, [r4, #0]
	  if(strcmp(uart_string, "fil_test:start\r") == 0)
 8004218:	4c75      	ldr	r4, [pc, #468]	; (80043f0 <main+0x2cc>)
	 for(int i = 0; i<(sizeof(temp)/sizeof(int)); i++ )
 800421a:	2600      	movs	r6, #0
     HAL_Delay(1);
 800421c:	2001      	movs	r0, #1
 800421e:	f7fc ff25 	bl	800106c <HAL_Delay>
     CFK=0.85;
 8004222:	4b74      	ldr	r3, [pc, #464]	; (80043f4 <main+0x2d0>)
		temp[i]=complementary_filter(1000, Z_AXIS, &angle_gyro_z, &CFK);
 8004224:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80043d8 <main+0x2b4>
 8004228:	4f73      	ldr	r7, [pc, #460]	; (80043f8 <main+0x2d4>)
     CFK=0.85;
 800422a:	f8cb 3000 	str.w	r3, [fp]
		temp[i]=complementary_filter(1000, Z_AXIS, &angle_gyro_z, &CFK);
 800422e:	465b      	mov	r3, fp
 8004230:	4642      	mov	r2, r8
 8004232:	2103      	movs	r1, #3
 8004234:	4638      	mov	r0, r7
 8004236:	f7ff fefd 	bl	8004034 <complementary_filter>
 800423a:	4b70      	ldr	r3, [pc, #448]	; (80043fc <main+0x2d8>)
		accy[i] = angle_from_gyro(Z_AXIS, 1000, &angle_gyro_z);
 800423c:	4642      	mov	r2, r8
		temp[i]=complementary_filter(1000, Z_AXIS, &angle_gyro_z, &CFK);
 800423e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
		accy[i] = angle_from_gyro(Z_AXIS, 1000, &angle_gyro_z);
 8004242:	4639      	mov	r1, r7
 8004244:	2003      	movs	r0, #3
 8004246:	f7ff fecb 	bl	8003fe0 <angle_from_gyro>
 800424a:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <main+0x2dc>)
 800424c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
	 for(int i = 0; i<(sizeof(temp)/sizeof(int)); i++ )
 8004250:	3601      	adds	r6, #1
 8004252:	2e32      	cmp	r6, #50	; 0x32
 8004254:	d1eb      	bne.n	800422e <main+0x10a>
	  if(strcmp(uart_string, "fil_test:start\r") == 0)
 8004256:	496b      	ldr	r1, [pc, #428]	; (8004404 <main+0x2e0>)
 8004258:	4620      	mov	r0, r4
 800425a:	f7fb ff79 	bl	8000150 <strcmp>
 800425e:	2800      	cmp	r0, #0
 8004260:	d079      	beq.n	8004356 <main+0x232>
	  if(strcmp(uart_string, "set_angle:debug\r") == 0)
 8004262:	4969      	ldr	r1, [pc, #420]	; (8004408 <main+0x2e4>)
 8004264:	4620      	mov	r0, r4
 8004266:	f7fb ff73 	bl	8000150 <strcmp>
 800426a:	b968      	cbnz	r0, 8004288 <main+0x164>
		  strcpy(uart_string, "");
 800426c:	4967      	ldr	r1, [pc, #412]	; (800440c <main+0x2e8>)
 800426e:	4620      	mov	r0, r4
 8004270:	f000 fb24 	bl	80048bc <strcpy>
		  UART_Transmit_string_CR_LF(&huart1, "started testing setting angle", 10);
 8004274:	220a      	movs	r2, #10
 8004276:	4966      	ldr	r1, [pc, #408]	; (8004410 <main+0x2ec>)
 8004278:	4849      	ldr	r0, [pc, #292]	; (80043a0 <main+0x27c>)
 800427a:	f7ff fda3 	bl	8003dc4 <UART_Transmit_string_CR_LF>
		  UART_Transmit_string_CR_LF(&huart1, "stopped testing setting angle", 10);
 800427e:	220a      	movs	r2, #10
 8004280:	4964      	ldr	r1, [pc, #400]	; (8004414 <main+0x2f0>)
 8004282:	4847      	ldr	r0, [pc, #284]	; (80043a0 <main+0x27c>)
 8004284:	f7ff fd9e 	bl	8003dc4 <UART_Transmit_string_CR_LF>
	  if(strcmp(uart_string, "calibr:start\r") == 0)
 8004288:	4963      	ldr	r1, [pc, #396]	; (8004418 <main+0x2f4>)
 800428a:	4620      	mov	r0, r4
 800428c:	f7fb ff60 	bl	8000150 <strcmp>
 8004290:	b928      	cbnz	r0, 800429e <main+0x17a>
		  potentiometer_calibration();
 8004292:	f7ff fd0b 	bl	8003cac <potentiometer_calibration>
		  strcpy(uart_string, "");
 8004296:	495d      	ldr	r1, [pc, #372]	; (800440c <main+0x2e8>)
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fb0f 	bl	80048bc <strcpy>
	  if(strcmp(uart_string, "calibr:send_ab\r") == 0)
 800429e:	495f      	ldr	r1, [pc, #380]	; (800441c <main+0x2f8>)
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7fb ff55 	bl	8000150 <strcmp>
 80042a6:	b980      	cbnz	r0, 80042ca <main+0x1a6>
		  UART_Transmit_string_CR_LF(&huart1, "resistance to degree a and b:", 10);
 80042a8:	495d      	ldr	r1, [pc, #372]	; (8004420 <main+0x2fc>)
 80042aa:	220a      	movs	r2, #10
 80042ac:	483c      	ldr	r0, [pc, #240]	; (80043a0 <main+0x27c>)
 80042ae:	f7ff fd89 	bl	8003dc4 <UART_Transmit_string_CR_LF>
		  UART_send_float(RTD_a);
 80042b2:	4b5c      	ldr	r3, [pc, #368]	; (8004424 <main+0x300>)
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	f7ff fdb1 	bl	8003e1c <UART_send_float>
		  UART_send_float(RTD_b);
 80042ba:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <main+0x304>)
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	f7ff fdad 	bl	8003e1c <UART_send_float>
		  strcpy(uart_string, "");
 80042c2:	4952      	ldr	r1, [pc, #328]	; (800440c <main+0x2e8>)
 80042c4:	4620      	mov	r0, r4
 80042c6:	f000 faf9 	bl	80048bc <strcpy>
	  if(strcmp(uart_string, "start:calibration\r") == 0)
 80042ca:	4958      	ldr	r1, [pc, #352]	; (800442c <main+0x308>)
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7fb ff3f 	bl	8000150 <strcmp>
 80042d2:	b928      	cbnz	r0, 80042e0 <main+0x1bc>
		  potentiometer_calibration();
 80042d4:	f7ff fcea 	bl	8003cac <potentiometer_calibration>
		  strcpy(uart_string, "");
 80042d8:	494c      	ldr	r1, [pc, #304]	; (800440c <main+0x2e8>)
 80042da:	4620      	mov	r0, r4
 80042dc:	f000 faee 	bl	80048bc <strcpy>
	  if(strcmp(uart_string, "tracking:start\r") == 0)
 80042e0:	4953      	ldr	r1, [pc, #332]	; (8004430 <main+0x30c>)
 80042e2:	4620      	mov	r0, r4
 80042e4:	f7fb ff34 	bl	8000150 <strcmp>
 80042e8:	b9a8      	cbnz	r0, 8004316 <main+0x1f2>
		  new_tick = DWT->CYCCNT;
 80042ea:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <main+0x2bc>)
		  tick=tick/SystemCoreClock*1000;
 80042ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		  new_tick = DWT->CYCCNT;
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4b50      	ldr	r3, [pc, #320]	; (8004434 <main+0x310>)
		  a = stabilize_by_pid(&gst_pid, ONE_US*1000, tick);
 80042f4:	483c      	ldr	r0, [pc, #240]	; (80043e8 <main+0x2c4>)
		  new_tick = DWT->CYCCNT;
 80042f6:	601a      	str	r2, [r3, #0]
		  tick=new_tick - startTick;
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	1ad2      	subs	r2, r2, r3
		  tick=tick/SystemCoreClock*1000;
 80042fc:	4b4e      	ldr	r3, [pc, #312]	; (8004438 <main+0x314>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	fbb2 f2f3 	udiv	r2, r2, r3
 8004304:	434a      	muls	r2, r1
 8004306:	4b4d      	ldr	r3, [pc, #308]	; (800443c <main+0x318>)
 8004308:	601a      	str	r2, [r3, #0]
		  a = stabilize_by_pid(&gst_pid, ONE_US*1000, tick);
 800430a:	f7ff fec1 	bl	8004090 <stabilize_by_pid>
 800430e:	9b03      	ldr	r3, [sp, #12]
 8004310:	6018      	str	r0, [r3, #0]
		  UART_send_float(a);
 8004312:	f7ff fd83 	bl	8003e1c <UART_send_float>
	  if(strcmp(uart_string, "tracking:stop\r") == 0)
 8004316:	494a      	ldr	r1, [pc, #296]	; (8004440 <main+0x31c>)
 8004318:	4620      	mov	r0, r4
 800431a:	f7fb ff19 	bl	8000150 <strcmp>
 800431e:	b918      	cbnz	r0, 8004328 <main+0x204>
		  strcpy(uart_string, "");
 8004320:	493a      	ldr	r1, [pc, #232]	; (800440c <main+0x2e8>)
 8004322:	4620      	mov	r0, r4
 8004324:	f000 faca 	bl	80048bc <strcpy>
	  if(uart_buffer[uart_rx_counter-1] == '\r')
 8004328:	4f46      	ldr	r7, [pc, #280]	; (8004444 <main+0x320>)
 800432a:	4e47      	ldr	r6, [pc, #284]	; (8004448 <main+0x324>)
 800432c:	783b      	ldrb	r3, [r7, #0]
 800432e:	4433      	add	r3, r6
 8004330:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004334:	2b0d      	cmp	r3, #13
 8004336:	f47f af70 	bne.w	800421a <main+0xf6>
		  strcpy(uart_string, uart_buffer);
 800433a:	4631      	mov	r1, r6
 800433c:	482c      	ldr	r0, [pc, #176]	; (80043f0 <main+0x2cc>)
 800433e:	f000 fabd 	bl	80048bc <strcpy>
		  uart_rx_counter=0;
 8004342:	2000      	movs	r0, #0
		  clear_uart_buffer(uart_rx_counter, 100, uart_buffer);
 8004344:	4632      	mov	r2, r6
 8004346:	2164      	movs	r1, #100	; 0x64
		  uart_rx_counter=0;
 8004348:	7038      	strb	r0, [r7, #0]
		  clear_uart_buffer(uart_rx_counter, 100, uart_buffer);
 800434a:	f7ff fca3 	bl	8003c94 <clear_uart_buffer>
		  HAL_Delay(1);
 800434e:	2001      	movs	r0, #1
 8004350:	f7fc fe8c 	bl	800106c <HAL_Delay>
 8004354:	e760      	b.n	8004218 <main+0xf4>
		  strcpy(uart_string, "");
 8004356:	492d      	ldr	r1, [pc, #180]	; (800440c <main+0x2e8>)
 8004358:	4620      	mov	r0, r4
 800435a:	f000 faaf 	bl	80048bc <strcpy>
 800435e:	f04f 0aa1 	mov.w	sl, #161	; 0xa1
		  for(double d = SERVO_MIN_ANGLE; d<=SERVO_MAX_ANGLE; d=d+stp)
 8004362:	2600      	movs	r6, #0
 8004364:	f04f 0800 	mov.w	r8, #0
 8004368:	4f38      	ldr	r7, [pc, #224]	; (800444c <main+0x328>)
 800436a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8004454 <main+0x330>
			  servo_set_position(d);
 800436e:	4639      	mov	r1, r7
 8004370:	4630      	mov	r0, r6
 8004372:	f7fc fac9 	bl	8000908 <__aeabi_d2f>
 8004376:	f7ff fc59 	bl	8003c2c <servo_set_position>
			  UART_send_float(get_actual_angle());
 800437a:	f7ff fd0d 	bl	8003d98 <get_actual_angle>
 800437e:	f7ff fd4d 	bl	8003e1c <UART_send_float>
		  for(double d = SERVO_MIN_ANGLE; d<=SERVO_MAX_ANGLE; d=d+stp)
 8004382:	4630      	mov	r0, r6
 8004384:	4639      	mov	r1, r7
 8004386:	4642      	mov	r2, r8
 8004388:	464b      	mov	r3, r9
 800438a:	f7fb fef9 	bl	8000180 <__adddf3>
 800438e:	f1ba 0a01 	subs.w	sl, sl, #1
 8004392:	4606      	mov	r6, r0
 8004394:	460f      	mov	r7, r1
 8004396:	d1ea      	bne.n	800436e <main+0x24a>
 8004398:	e763      	b.n	8004262 <main+0x13e>
 800439a:	bf00      	nop
 800439c:	20000520 	.word	0x20000520
 80043a0:	200005a0 	.word	0x200005a0
 80043a4:	20000560 	.word	0x20000560
 80043a8:	200000b8 	.word	0x200000b8
 80043ac:	20000260 	.word	0x20000260
 80043b0:	2000002c 	.word	0x2000002c
 80043b4:	200000bc 	.word	0x200000bc
 80043b8:	c2200000 	.word	0xc2200000
 80043bc:	2000043c 	.word	0x2000043c
 80043c0:	200002d4 	.word	0x200002d4
 80043c4:	20000438 	.word	0x20000438
 80043c8:	20000328 	.word	0x20000328
 80043cc:	2000018c 	.word	0x2000018c
 80043d0:	20000410 	.word	0x20000410
 80043d4:	20000408 	.word	0x20000408
 80043d8:	20000188 	.word	0x20000188
 80043dc:	20000018 	.word	0x20000018
 80043e0:	e0001000 	.word	0xe0001000
 80043e4:	2000001c 	.word	0x2000001c
 80043e8:	20000414 	.word	0x20000414
 80043ec:	20000014 	.word	0x20000014
 80043f0:	200001f5 	.word	0x200001f5
 80043f4:	3f59999a 	.word	0x3f59999a
 80043f8:	447a0000 	.word	0x447a0000
 80043fc:	20000338 	.word	0x20000338
 8004400:	200000c0 	.word	0x200000c0
 8004404:	08004e86 	.word	0x08004e86
 8004408:	08004e96 	.word	0x08004e96
 800440c:	08004f6a 	.word	0x08004f6a
 8004410:	08004ea7 	.word	0x08004ea7
 8004414:	08004ec5 	.word	0x08004ec5
 8004418:	08004ee3 	.word	0x08004ee3
 800441c:	08004ef1 	.word	0x08004ef1
 8004420:	08004f01 	.word	0x08004f01
 8004424:	20000020 	.word	0x20000020
 8004428:	20000024 	.word	0x20000024
 800442c:	08004f1f 	.word	0x08004f1f
 8004430:	08004f32 	.word	0x08004f32
 8004434:	20000400 	.word	0x20000400
 8004438:	20000030 	.word	0x20000030
 800443c:	2000040c 	.word	0x2000040c
 8004440:	08004f42 	.word	0x08004f42
 8004444:	200001f4 	.word	0x200001f4
 8004448:	20000190 	.word	0x20000190
 800444c:	c0440000 	.word	0xc0440000
 8004450:	20000010 	.word	0x20000010
 8004454:	3fe00000 	.word	0x3fe00000

08004458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004458:	4770      	bx	lr
	...

0800445c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800445c:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <HAL_MspInit+0x3c>)
{
 800445e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	619a      	str	r2, [r3, #24]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	f002 0201 	and.w	r2, r2, #1
 800446e:	9200      	str	r2, [sp, #0]
 8004470:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004478:	61da      	str	r2, [r3, #28]
 800447a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800447c:	4a07      	ldr	r2, [pc, #28]	; (800449c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004486:	6853      	ldr	r3, [r2, #4]
 8004488:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800448c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004492:	b002      	add	sp, #8
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	40010000 	.word	0x40010000

080044a0 <NMI_Handler>:
 80044a0:	4770      	bx	lr

080044a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a2:	e7fe      	b.n	80044a2 <HardFault_Handler>

080044a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a4:	e7fe      	b.n	80044a4 <MemManage_Handler>

080044a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044a6:	e7fe      	b.n	80044a6 <BusFault_Handler>

080044a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044a8:	e7fe      	b.n	80044a8 <UsageFault_Handler>

080044aa <SVC_Handler>:
 80044aa:	4770      	bx	lr

080044ac <DebugMon_Handler>:
 80044ac:	4770      	bx	lr

080044ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ae:	4770      	bx	lr

080044b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044b0:	f7fc bdca 	b.w	8001048 <HAL_IncTick>

080044b4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <DMA1_Channel1_IRQHandler+0x8>)
 80044b6:	f7fd b933 	b.w	8001720 <HAL_DMA_IRQHandler>
 80044ba:	bf00      	nop
 80044bc:	20000290 	.word	0x20000290

080044c0 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <TIM1_UP_IRQHandler+0x8>)
 80044c2:	f7fe baef 	b.w	8002aa4 <HAL_TIM_IRQHandler>
 80044c6:	bf00      	nop
 80044c8:	20000560 	.word	0x20000560

080044cc <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80044cc:	4801      	ldr	r0, [pc, #4]	; (80044d4 <TIM4_IRQHandler+0x8>)
 80044ce:	f7fe bae9 	b.w	8002aa4 <HAL_TIM_IRQHandler>
 80044d2:	bf00      	nop
 80044d4:	20000520 	.word	0x20000520

080044d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80044d8:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044da:	4d08      	ldr	r5, [pc, #32]	; (80044fc <USART1_IRQHandler+0x24>)
  /* USER CODE BEGIN USART1_IRQn 1 */

  HAL_UART_Receive(&huart1, &uart_buffer[uart_rx_counter], 1, 10);
 80044dc:	4c08      	ldr	r4, [pc, #32]	; (8004500 <USART1_IRQHandler+0x28>)
  HAL_UART_IRQHandler(&huart1);
 80044de:	4628      	mov	r0, r5
 80044e0:	f7fe fefe 	bl	80032e0 <HAL_UART_IRQHandler>
  HAL_UART_Receive(&huart1, &uart_buffer[uart_rx_counter], 1, 10);
 80044e4:	7821      	ldrb	r1, [r4, #0]
 80044e6:	4807      	ldr	r0, [pc, #28]	; (8004504 <USART1_IRQHandler+0x2c>)
 80044e8:	230a      	movs	r3, #10
 80044ea:	4401      	add	r1, r0
 80044ec:	2201      	movs	r2, #1
 80044ee:	4628      	mov	r0, r5
 80044f0:	f7fe fe56 	bl	80031a0 <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart1, &uart_buffer[uart_rx_counter], 1, 10);

  ++uart_rx_counter;
 80044f4:	7823      	ldrb	r3, [r4, #0]
 80044f6:	3301      	adds	r3, #1
 80044f8:	7023      	strb	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	200005a0 	.word	0x200005a0
 8004500:	200001f4 	.word	0x200001f4
 8004504:	20000190 	.word	0x20000190

08004508 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <SystemInit+0x40>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004512:	6859      	ldr	r1, [r3, #4]
 8004514:	4a0d      	ldr	r2, [pc, #52]	; (800454c <SystemInit+0x44>)
 8004516:	400a      	ands	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004520:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004524:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800452c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004534:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004536:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800453a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800453c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <SystemInit+0x48>)
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	f8ff0000 	.word	0xf8ff0000
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004554:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004556:	2210      	movs	r2, #16
 8004558:	2100      	movs	r1, #0
 800455a:	a802      	add	r0, sp, #8
 800455c:	f000 f9a6 	bl	80048ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 320;
 8004560:	f44f 72a0 	mov.w	r2, #320	; 0x140
  htim1.Instance = TIM1;
 8004564:	4814      	ldr	r0, [pc, #80]	; (80045b8 <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 320;
 8004566:	4915      	ldr	r1, [pc, #84]	; (80045bc <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004568:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 320;
 800456a:	e880 0006 	stmia.w	r0, {r1, r2}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 32000;
 800456e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	9301      	str	r3, [sp, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004576:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 32000;
 8004578:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800457a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800457c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800457e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004580:	f7fe fb6a 	bl	8002c58 <HAL_TIM_Base_Init>
 8004584:	b108      	cbz	r0, 800458a <MX_TIM1_Init+0x36>
  {
    Error_Handler();
 8004586:	f7ff ff67 	bl	8004458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800458a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800458e:	a902      	add	r1, sp, #8
 8004590:	4809      	ldr	r0, [pc, #36]	; (80045b8 <MX_TIM1_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004592:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004594:	f7fe fc2c 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 8004598:	b108      	cbz	r0, 800459e <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 800459a:	f7ff ff5d 	bl	8004458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800459e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80045a0:	4669      	mov	r1, sp
 80045a2:	4805      	ldr	r0, [pc, #20]	; (80045b8 <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045a4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045a6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80045a8:	f7fe fce0 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 80045ac:	b108      	cbz	r0, 80045b2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80045ae:	f7ff ff53 	bl	8004458 <Error_Handler>
  }

}
 80045b2:	b007      	add	sp, #28
 80045b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80045b8:	20000560 	.word	0x20000560
 80045bc:	40012c00 	.word	0x40012c00

080045c0 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045c0:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 80045c2:	6803      	ldr	r3, [r0, #0]
 80045c4:	4a15      	ldr	r2, [pc, #84]	; (800461c <HAL_TIM_Base_MspInit+0x5c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d114      	bne.n	80045f4 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045ca:	4b15      	ldr	r3, [pc, #84]	; (8004620 <HAL_TIM_Base_MspInit+0x60>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80045cc:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d4:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80045d6:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045d8:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80045da:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80045e4:	f7fc ff8e 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80045e8:	2019      	movs	r0, #25
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80045ea:	f7fc ffbf 	bl	800156c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80045ee:	b003      	add	sp, #12
 80045f0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 80045f4:	4a0b      	ldr	r2, [pc, #44]	; (8004624 <HAL_TIM_Base_MspInit+0x64>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d1f9      	bne.n	80045ee <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80045fc:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	f042 0204 	orr.w	r2, r2, #4
 8004604:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004606:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004608:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800460a:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004614:	f7fc ff76 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004618:	201e      	movs	r0, #30
 800461a:	e7e6      	b.n	80045ea <HAL_TIM_Base_MspInit+0x2a>
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40021000 	.word	0x40021000
 8004624:	40000800 	.word	0x40000800

08004628 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004628:	b510      	push	{r4, lr}
 800462a:	4604      	mov	r4, r0
 800462c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462e:	2210      	movs	r2, #16
 8004630:	2100      	movs	r1, #0
 8004632:	a802      	add	r0, sp, #8
 8004634:	f000 f93a 	bl	80048ac <memset>
  if(timHandle->Instance==TIM4)
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	4b0c      	ldr	r3, [pc, #48]	; (800466c <HAL_TIM_MspPostInit+0x44>)
 800463c:	429a      	cmp	r2, r3
 800463e:	d113      	bne.n	8004668 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004640:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004644:	699a      	ldr	r2, [r3, #24]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004646:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004648:	f042 0208 	orr.w	r2, r2, #8
 800464c:	619a      	str	r2, [r3, #24]
 800464e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004650:	4807      	ldr	r0, [pc, #28]	; (8004670 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800465a:	2340      	movs	r3, #64	; 0x40
 800465c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465e:	2302      	movs	r3, #2
 8004660:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004662:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004664:	f7fd f8f0 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004668:	b006      	add	sp, #24
 800466a:	bd10      	pop	{r4, pc}
 800466c:	40000800 	.word	0x40000800
 8004670:	40010c00 	.word	0x40010c00

08004674 <MX_TIM4_Init>:
{
 8004674:	b510      	push	{r4, lr}
 8004676:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004678:	2210      	movs	r2, #16
 800467a:	2100      	movs	r1, #0
 800467c:	a803      	add	r0, sp, #12
 800467e:	f000 f915 	bl	80048ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004682:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004684:	221c      	movs	r2, #28
 8004686:	4621      	mov	r1, r4
 8004688:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800468c:	9401      	str	r4, [sp, #4]
 800468e:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004690:	f000 f90c 	bl	80048ac <memset>
  htim4.Init.Prescaler = 64;
 8004694:	2340      	movs	r3, #64	; 0x40
  htim4.Instance = TIM4;
 8004696:	481e      	ldr	r0, [pc, #120]	; (8004710 <MX_TIM4_Init+0x9c>)
  htim4.Init.Prescaler = 64;
 8004698:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <MX_TIM4_Init+0xa0>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800469a:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 64;
 800469c:	e880 000c 	stmia.w	r0, {r2, r3}
  htim4.Init.Period = 20000;
 80046a0:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046a4:	6104      	str	r4, [r0, #16]
  htim4.Init.Period = 20000;
 80046a6:	60c3      	str	r3, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046a8:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80046aa:	f7fe fad5 	bl	8002c58 <HAL_TIM_Base_Init>
 80046ae:	b108      	cbz	r0, 80046b4 <MX_TIM4_Init+0x40>
    Error_Handler();
 80046b0:	f7ff fed2 	bl	8004458 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80046b8:	a903      	add	r1, sp, #12
 80046ba:	4815      	ldr	r0, [pc, #84]	; (8004710 <MX_TIM4_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046bc:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80046be:	f7fe fb97 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 80046c2:	b108      	cbz	r0, 80046c8 <MX_TIM4_Init+0x54>
    Error_Handler();
 80046c4:	f7ff fec8 	bl	8004458 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80046c8:	4811      	ldr	r0, [pc, #68]	; (8004710 <MX_TIM4_Init+0x9c>)
 80046ca:	f7fe fadf 	bl	8002c8c <HAL_TIM_PWM_Init>
 80046ce:	b108      	cbz	r0, 80046d4 <MX_TIM4_Init+0x60>
    Error_Handler();
 80046d0:	f7ff fec2 	bl	8004458 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046d4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046d6:	a901      	add	r1, sp, #4
 80046d8:	480d      	ldr	r0, [pc, #52]	; (8004710 <MX_TIM4_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046da:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046dc:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046de:	f7fe fc45 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 80046e2:	b108      	cbz	r0, 80046e8 <MX_TIM4_Init+0x74>
    Error_Handler();
 80046e4:	f7ff feb8 	bl	8004458 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046e8:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046ea:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046ec:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 1000;
 80046ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046f2:	a907      	add	r1, sp, #28
 80046f4:	4806      	ldr	r0, [pc, #24]	; (8004710 <MX_TIM4_Init+0x9c>)
  sConfigOC.Pulse = 1000;
 80046f6:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046f8:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046fa:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046fc:	f7fe fb0c 	bl	8002d18 <HAL_TIM_PWM_ConfigChannel>
 8004700:	b108      	cbz	r0, 8004706 <MX_TIM4_Init+0x92>
    Error_Handler();
 8004702:	f7ff fea9 	bl	8004458 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8004706:	4802      	ldr	r0, [pc, #8]	; (8004710 <MX_TIM4_Init+0x9c>)
 8004708:	f7ff ff8e 	bl	8004628 <HAL_TIM_MspPostInit>
}
 800470c:	b00e      	add	sp, #56	; 0x38
 800470e:	bd10      	pop	{r4, pc}
 8004710:	20000520 	.word	0x20000520
 8004714:	40000800 	.word	0x40000800

08004718 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004718:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800471a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 800471e:	480a      	ldr	r0, [pc, #40]	; (8004748 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004722:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8004724:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004728:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800472a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800472c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800472e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004730:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004732:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004734:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004736:	f7fe fca9 	bl	800308c <HAL_UART_Init>
 800473a:	b118      	cbz	r0, 8004744 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800473c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004740:	f7ff be8a 	b.w	8004458 <Error_Handler>
 8004744:	bd08      	pop	{r3, pc}
 8004746:	bf00      	nop
 8004748:	200005a0 	.word	0x200005a0
 800474c:	40013800 	.word	0x40013800

08004750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004750:	b510      	push	{r4, lr}
 8004752:	4604      	mov	r4, r0
 8004754:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004756:	2210      	movs	r2, #16
 8004758:	2100      	movs	r1, #0
 800475a:	a802      	add	r0, sp, #8
 800475c:	f000 f8a6 	bl	80048ac <memset>
  if(uartHandle->Instance==USART1)
 8004760:	6822      	ldr	r2, [r4, #0]
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_UART_MspInit+0x80>)
 8004764:	429a      	cmp	r2, r3
 8004766:	d130      	bne.n	80047ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004768:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800476c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800476e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8004770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004774:	619a      	str	r2, [r3, #24]
 8004776:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004778:	4816      	ldr	r0, [pc, #88]	; (80047d4 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800477a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800477e:	9200      	str	r2, [sp, #0]
 8004780:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004782:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004784:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004786:	f042 0204 	orr.w	r2, r2, #4
 800478a:	619a      	str	r2, [r3, #24]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800479a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479c:	2302      	movs	r3, #2
 800479e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047a0:	2303      	movs	r3, #3
 80047a2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a4:	f7fd f850 	bl	8001848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ac:	a902      	add	r1, sp, #8
 80047ae:	4809      	ldr	r0, [pc, #36]	; (80047d4 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b6:	f7fd f847 	bl	8001848 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80047ba:	2025      	movs	r0, #37	; 0x25
 80047bc:	4622      	mov	r2, r4
 80047be:	4621      	mov	r1, r4
 80047c0:	f7fc fea0 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047c4:	2025      	movs	r0, #37	; 0x25
 80047c6:	f7fc fed1 	bl	800156c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80047ca:	b006      	add	sp, #24
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	bf00      	nop
 80047d0:	40013800 	.word	0x40013800
 80047d4:	40010800 	.word	0x40010800

080047d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80047d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80047da:	e003      	b.n	80047e4 <LoopCopyDataInit>

080047dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80047de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80047e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80047e2:	3104      	adds	r1, #4

080047e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80047e4:	480a      	ldr	r0, [pc, #40]	; (8004810 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80047e6:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80047e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80047ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80047ec:	d3f6      	bcc.n	80047dc <CopyDataInit>
  ldr r2, =_sbss
 80047ee:	4a0a      	ldr	r2, [pc, #40]	; (8004818 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80047f0:	e002      	b.n	80047f8 <LoopFillZerobss>

080047f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80047f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80047f4:	f842 3b04 	str.w	r3, [r2], #4

080047f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80047fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80047fc:	d3f9      	bcc.n	80047f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80047fe:	f7ff fe83 	bl	8004508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004802:	f000 f815 	bl	8004830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004806:	f7ff fc8d 	bl	8004124 <main>
  bx lr
 800480a:	4770      	bx	lr
  ldr r3, =_sidata
 800480c:	08004fd8 	.word	0x08004fd8
  ldr r0, =_sdata
 8004810:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004814:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8004818:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 800481c:	200005e0 	.word	0x200005e0

08004820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004820:	e7fe      	b.n	8004820 <ADC1_2_IRQHandler>
	...

08004824 <__errno>:
 8004824:	4b01      	ldr	r3, [pc, #4]	; (800482c <__errno+0x8>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000034 	.word	0x20000034

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	2500      	movs	r5, #0
 8004834:	4e0c      	ldr	r6, [pc, #48]	; (8004868 <__libc_init_array+0x38>)
 8004836:	4c0d      	ldr	r4, [pc, #52]	; (800486c <__libc_init_array+0x3c>)
 8004838:	1ba4      	subs	r4, r4, r6
 800483a:	10a4      	asrs	r4, r4, #2
 800483c:	42a5      	cmp	r5, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	f000 fb0c 	bl	8004e5c <_init>
 8004844:	2500      	movs	r5, #0
 8004846:	4e0a      	ldr	r6, [pc, #40]	; (8004870 <__libc_init_array+0x40>)
 8004848:	4c0a      	ldr	r4, [pc, #40]	; (8004874 <__libc_init_array+0x44>)
 800484a:	1ba4      	subs	r4, r4, r6
 800484c:	10a4      	asrs	r4, r4, #2
 800484e:	42a5      	cmp	r5, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004858:	4798      	blx	r3
 800485a:	3501      	adds	r5, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004862:	4798      	blx	r3
 8004864:	3501      	adds	r5, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	08004fd0 	.word	0x08004fd0
 800486c:	08004fd0 	.word	0x08004fd0
 8004870:	08004fd0 	.word	0x08004fd0
 8004874:	08004fd4 	.word	0x08004fd4

08004878 <__itoa>:
 8004878:	1e93      	subs	r3, r2, #2
 800487a:	2b22      	cmp	r3, #34	; 0x22
 800487c:	b510      	push	{r4, lr}
 800487e:	460c      	mov	r4, r1
 8004880:	d904      	bls.n	800488c <__itoa+0x14>
 8004882:	2300      	movs	r3, #0
 8004884:	461c      	mov	r4, r3
 8004886:	700b      	strb	r3, [r1, #0]
 8004888:	4620      	mov	r0, r4
 800488a:	bd10      	pop	{r4, pc}
 800488c:	2a0a      	cmp	r2, #10
 800488e:	d109      	bne.n	80048a4 <__itoa+0x2c>
 8004890:	2800      	cmp	r0, #0
 8004892:	da07      	bge.n	80048a4 <__itoa+0x2c>
 8004894:	232d      	movs	r3, #45	; 0x2d
 8004896:	700b      	strb	r3, [r1, #0]
 8004898:	2101      	movs	r1, #1
 800489a:	4240      	negs	r0, r0
 800489c:	4421      	add	r1, r4
 800489e:	f000 f815 	bl	80048cc <__utoa>
 80048a2:	e7f1      	b.n	8004888 <__itoa+0x10>
 80048a4:	2100      	movs	r1, #0
 80048a6:	e7f9      	b.n	800489c <__itoa+0x24>

080048a8 <itoa>:
 80048a8:	f7ff bfe6 	b.w	8004878 <__itoa>

080048ac <memset>:
 80048ac:	4603      	mov	r3, r0
 80048ae:	4402      	add	r2, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <strcpy>:
 80048bc:	4603      	mov	r3, r0
 80048be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048c2:	f803 2b01 	strb.w	r2, [r3], #1
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	d1f9      	bne.n	80048be <strcpy+0x2>
 80048ca:	4770      	bx	lr

080048cc <__utoa>:
 80048cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ce:	b08b      	sub	sp, #44	; 0x2c
 80048d0:	4603      	mov	r3, r0
 80048d2:	460f      	mov	r7, r1
 80048d4:	466d      	mov	r5, sp
 80048d6:	4c1c      	ldr	r4, [pc, #112]	; (8004948 <__utoa+0x7c>)
 80048d8:	f104 0e20 	add.w	lr, r4, #32
 80048dc:	462e      	mov	r6, r5
 80048de:	6820      	ldr	r0, [r4, #0]
 80048e0:	6861      	ldr	r1, [r4, #4]
 80048e2:	3408      	adds	r4, #8
 80048e4:	c603      	stmia	r6!, {r0, r1}
 80048e6:	4574      	cmp	r4, lr
 80048e8:	4635      	mov	r5, r6
 80048ea:	d1f7      	bne.n	80048dc <__utoa+0x10>
 80048ec:	7921      	ldrb	r1, [r4, #4]
 80048ee:	6820      	ldr	r0, [r4, #0]
 80048f0:	7131      	strb	r1, [r6, #4]
 80048f2:	1e91      	subs	r1, r2, #2
 80048f4:	2922      	cmp	r1, #34	; 0x22
 80048f6:	6030      	str	r0, [r6, #0]
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	d904      	bls.n	8004908 <__utoa+0x3c>
 80048fe:	7039      	strb	r1, [r7, #0]
 8004900:	460f      	mov	r7, r1
 8004902:	4638      	mov	r0, r7
 8004904:	b00b      	add	sp, #44	; 0x2c
 8004906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004908:	1e78      	subs	r0, r7, #1
 800490a:	4606      	mov	r6, r0
 800490c:	fbb3 f5f2 	udiv	r5, r3, r2
 8004910:	fb02 3315 	mls	r3, r2, r5, r3
 8004914:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004918:	4473      	add	r3, lr
 800491a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800491e:	1c4c      	adds	r4, r1, #1
 8004920:	f806 3f01 	strb.w	r3, [r6, #1]!
 8004924:	462b      	mov	r3, r5
 8004926:	b965      	cbnz	r5, 8004942 <__utoa+0x76>
 8004928:	553d      	strb	r5, [r7, r4]
 800492a:	187a      	adds	r2, r7, r1
 800492c:	1acc      	subs	r4, r1, r3
 800492e:	42a3      	cmp	r3, r4
 8004930:	dae7      	bge.n	8004902 <__utoa+0x36>
 8004932:	7844      	ldrb	r4, [r0, #1]
 8004934:	7815      	ldrb	r5, [r2, #0]
 8004936:	3301      	adds	r3, #1
 8004938:	f800 5f01 	strb.w	r5, [r0, #1]!
 800493c:	f802 4901 	strb.w	r4, [r2], #-1
 8004940:	e7f4      	b.n	800492c <__utoa+0x60>
 8004942:	4621      	mov	r1, r4
 8004944:	e7e2      	b.n	800490c <__utoa+0x40>
 8004946:	bf00      	nop
 8004948:	08004f83 	.word	0x08004f83

0800494c <atanf>:
 800494c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004950:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004954:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8004958:	4604      	mov	r4, r0
 800495a:	4607      	mov	r7, r0
 800495c:	db0e      	blt.n	800497c <atanf+0x30>
 800495e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004962:	dd04      	ble.n	800496e <atanf+0x22>
 8004964:	4601      	mov	r1, r0
 8004966:	f7fc f825 	bl	80009b4 <__addsf3>
 800496a:	4604      	mov	r4, r0
 800496c:	e003      	b.n	8004976 <atanf+0x2a>
 800496e:	2800      	cmp	r0, #0
 8004970:	f300 80d2 	bgt.w	8004b18 <atanf+0x1cc>
 8004974:	4c69      	ldr	r4, [pc, #420]	; (8004b1c <atanf+0x1d0>)
 8004976:	4620      	mov	r0, r4
 8004978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800497c:	4b68      	ldr	r3, [pc, #416]	; (8004b20 <atanf+0x1d4>)
 800497e:	429d      	cmp	r5, r3
 8004980:	dc0e      	bgt.n	80049a0 <atanf+0x54>
 8004982:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8004986:	da08      	bge.n	800499a <atanf+0x4e>
 8004988:	4966      	ldr	r1, [pc, #408]	; (8004b24 <atanf+0x1d8>)
 800498a:	f7fc f813 	bl	80009b4 <__addsf3>
 800498e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004992:	f7fc fad3 	bl	8000f3c <__aeabi_fcmpgt>
 8004996:	2800      	cmp	r0, #0
 8004998:	d1ed      	bne.n	8004976 <atanf+0x2a>
 800499a:	f04f 36ff 	mov.w	r6, #4294967295
 800499e:	e01c      	b.n	80049da <atanf+0x8e>
 80049a0:	f000 f8e4 	bl	8004b6c <fabsf>
 80049a4:	4b60      	ldr	r3, [pc, #384]	; (8004b28 <atanf+0x1dc>)
 80049a6:	4604      	mov	r4, r0
 80049a8:	429d      	cmp	r5, r3
 80049aa:	dc7c      	bgt.n	8004aa6 <atanf+0x15a>
 80049ac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80049b0:	429d      	cmp	r5, r3
 80049b2:	dc67      	bgt.n	8004a84 <atanf+0x138>
 80049b4:	4601      	mov	r1, r0
 80049b6:	f7fb fffd 	bl	80009b4 <__addsf3>
 80049ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80049be:	f7fb fff7 	bl	80009b0 <__aeabi_fsub>
 80049c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80049c6:	4605      	mov	r5, r0
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7fb fff3 	bl	80009b4 <__addsf3>
 80049ce:	4601      	mov	r1, r0
 80049d0:	4628      	mov	r0, r5
 80049d2:	f7fc f9ab 	bl	8000d2c <__aeabi_fdiv>
 80049d6:	2600      	movs	r6, #0
 80049d8:	4604      	mov	r4, r0
 80049da:	4621      	mov	r1, r4
 80049dc:	4620      	mov	r0, r4
 80049de:	f7fc f8f1 	bl	8000bc4 <__aeabi_fmul>
 80049e2:	4601      	mov	r1, r0
 80049e4:	4680      	mov	r8, r0
 80049e6:	f7fc f8ed 	bl	8000bc4 <__aeabi_fmul>
 80049ea:	4605      	mov	r5, r0
 80049ec:	494f      	ldr	r1, [pc, #316]	; (8004b2c <atanf+0x1e0>)
 80049ee:	f7fc f8e9 	bl	8000bc4 <__aeabi_fmul>
 80049f2:	494f      	ldr	r1, [pc, #316]	; (8004b30 <atanf+0x1e4>)
 80049f4:	f7fb ffde 	bl	80009b4 <__addsf3>
 80049f8:	4629      	mov	r1, r5
 80049fa:	f7fc f8e3 	bl	8000bc4 <__aeabi_fmul>
 80049fe:	494d      	ldr	r1, [pc, #308]	; (8004b34 <atanf+0x1e8>)
 8004a00:	f7fb ffd8 	bl	80009b4 <__addsf3>
 8004a04:	4629      	mov	r1, r5
 8004a06:	f7fc f8dd 	bl	8000bc4 <__aeabi_fmul>
 8004a0a:	494b      	ldr	r1, [pc, #300]	; (8004b38 <atanf+0x1ec>)
 8004a0c:	f7fb ffd2 	bl	80009b4 <__addsf3>
 8004a10:	4629      	mov	r1, r5
 8004a12:	f7fc f8d7 	bl	8000bc4 <__aeabi_fmul>
 8004a16:	4949      	ldr	r1, [pc, #292]	; (8004b3c <atanf+0x1f0>)
 8004a18:	f7fb ffcc 	bl	80009b4 <__addsf3>
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	f7fc f8d1 	bl	8000bc4 <__aeabi_fmul>
 8004a22:	4947      	ldr	r1, [pc, #284]	; (8004b40 <atanf+0x1f4>)
 8004a24:	f7fb ffc6 	bl	80009b4 <__addsf3>
 8004a28:	4641      	mov	r1, r8
 8004a2a:	f7fc f8cb 	bl	8000bc4 <__aeabi_fmul>
 8004a2e:	4945      	ldr	r1, [pc, #276]	; (8004b44 <atanf+0x1f8>)
 8004a30:	4680      	mov	r8, r0
 8004a32:	4628      	mov	r0, r5
 8004a34:	f7fc f8c6 	bl	8000bc4 <__aeabi_fmul>
 8004a38:	4943      	ldr	r1, [pc, #268]	; (8004b48 <atanf+0x1fc>)
 8004a3a:	f7fb ffb9 	bl	80009b0 <__aeabi_fsub>
 8004a3e:	4629      	mov	r1, r5
 8004a40:	f7fc f8c0 	bl	8000bc4 <__aeabi_fmul>
 8004a44:	4941      	ldr	r1, [pc, #260]	; (8004b4c <atanf+0x200>)
 8004a46:	f7fb ffb3 	bl	80009b0 <__aeabi_fsub>
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	f7fc f8ba 	bl	8000bc4 <__aeabi_fmul>
 8004a50:	493f      	ldr	r1, [pc, #252]	; (8004b50 <atanf+0x204>)
 8004a52:	f7fb ffad 	bl	80009b0 <__aeabi_fsub>
 8004a56:	4629      	mov	r1, r5
 8004a58:	f7fc f8b4 	bl	8000bc4 <__aeabi_fmul>
 8004a5c:	493d      	ldr	r1, [pc, #244]	; (8004b54 <atanf+0x208>)
 8004a5e:	f7fb ffa7 	bl	80009b0 <__aeabi_fsub>
 8004a62:	4629      	mov	r1, r5
 8004a64:	f7fc f8ae 	bl	8000bc4 <__aeabi_fmul>
 8004a68:	1c73      	adds	r3, r6, #1
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	d139      	bne.n	8004ae4 <atanf+0x198>
 8004a70:	f7fb ffa0 	bl	80009b4 <__addsf3>
 8004a74:	4621      	mov	r1, r4
 8004a76:	f7fc f8a5 	bl	8000bc4 <__aeabi_fmul>
 8004a7a:	4601      	mov	r1, r0
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f7fb ff97 	bl	80009b0 <__aeabi_fsub>
 8004a82:	e772      	b.n	800496a <atanf+0x1e>
 8004a84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004a88:	f7fb ff92 	bl	80009b0 <__aeabi_fsub>
 8004a8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004a90:	4605      	mov	r5, r0
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7fb ff8e 	bl	80009b4 <__addsf3>
 8004a98:	4601      	mov	r1, r0
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f7fc f946 	bl	8000d2c <__aeabi_fdiv>
 8004aa0:	2601      	movs	r6, #1
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	e799      	b.n	80049da <atanf+0x8e>
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <atanf+0x20c>)
 8004aa8:	429d      	cmp	r5, r3
 8004aaa:	dc14      	bgt.n	8004ad6 <atanf+0x18a>
 8004aac:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8004ab0:	f7fb ff7e 	bl	80009b0 <__aeabi_fsub>
 8004ab4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8004ab8:	4605      	mov	r5, r0
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7fc f882 	bl	8000bc4 <__aeabi_fmul>
 8004ac0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004ac4:	f7fb ff76 	bl	80009b4 <__addsf3>
 8004ac8:	4601      	mov	r1, r0
 8004aca:	4628      	mov	r0, r5
 8004acc:	f7fc f92e 	bl	8000d2c <__aeabi_fdiv>
 8004ad0:	2602      	movs	r6, #2
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	e781      	b.n	80049da <atanf+0x8e>
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	4820      	ldr	r0, [pc, #128]	; (8004b5c <atanf+0x210>)
 8004ada:	f7fc f927 	bl	8000d2c <__aeabi_fdiv>
 8004ade:	2603      	movs	r6, #3
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	e77a      	b.n	80049da <atanf+0x8e>
 8004ae4:	f7fb ff66 	bl	80009b4 <__addsf3>
 8004ae8:	4621      	mov	r1, r4
 8004aea:	f7fc f86b 	bl	8000bc4 <__aeabi_fmul>
 8004aee:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <atanf+0x214>)
 8004af0:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8004af4:	f7fb ff5c 	bl	80009b0 <__aeabi_fsub>
 8004af8:	4621      	mov	r1, r4
 8004afa:	f7fb ff59 	bl	80009b0 <__aeabi_fsub>
 8004afe:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <atanf+0x218>)
 8004b00:	4601      	mov	r1, r0
 8004b02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004b06:	f7fb ff53 	bl	80009b0 <__aeabi_fsub>
 8004b0a:	2f00      	cmp	r7, #0
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	f6bf af32 	bge.w	8004976 <atanf+0x2a>
 8004b12:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8004b16:	e72e      	b.n	8004976 <atanf+0x2a>
 8004b18:	4c13      	ldr	r4, [pc, #76]	; (8004b68 <atanf+0x21c>)
 8004b1a:	e72c      	b.n	8004976 <atanf+0x2a>
 8004b1c:	bfc90fdb 	.word	0xbfc90fdb
 8004b20:	3edfffff 	.word	0x3edfffff
 8004b24:	7149f2ca 	.word	0x7149f2ca
 8004b28:	3f97ffff 	.word	0x3f97ffff
 8004b2c:	3c8569d7 	.word	0x3c8569d7
 8004b30:	3d4bda59 	.word	0x3d4bda59
 8004b34:	3d886b35 	.word	0x3d886b35
 8004b38:	3dba2e6e 	.word	0x3dba2e6e
 8004b3c:	3e124925 	.word	0x3e124925
 8004b40:	3eaaaaab 	.word	0x3eaaaaab
 8004b44:	bd15a221 	.word	0xbd15a221
 8004b48:	3d6ef16b 	.word	0x3d6ef16b
 8004b4c:	3d9d8795 	.word	0x3d9d8795
 8004b50:	3de38e38 	.word	0x3de38e38
 8004b54:	3e4ccccd 	.word	0x3e4ccccd
 8004b58:	401bffff 	.word	0x401bffff
 8004b5c:	bf800000 	.word	0xbf800000
 8004b60:	08004fb8 	.word	0x08004fb8
 8004b64:	08004fa8 	.word	0x08004fa8
 8004b68:	3fc90fdb 	.word	0x3fc90fdb

08004b6c <fabsf>:
 8004b6c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004b70:	4770      	bx	lr
	...

08004b74 <hypotf>:
 8004b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b78:	b08a      	sub	sp, #40	; 0x28
 8004b7a:	4607      	mov	r7, r0
 8004b7c:	460e      	mov	r6, r1
 8004b7e:	f000 f851 	bl	8004c24 <__ieee754_hypotf>
 8004b82:	4d24      	ldr	r5, [pc, #144]	; (8004c14 <hypotf+0xa0>)
 8004b84:	4604      	mov	r4, r0
 8004b86:	f995 3000 	ldrsb.w	r3, [r5]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	d033      	beq.n	8004bf6 <hypotf+0x82>
 8004b8e:	f000 f95d 	bl	8004e4c <finitef>
 8004b92:	4680      	mov	r8, r0
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d12e      	bne.n	8004bf6 <hypotf+0x82>
 8004b98:	4638      	mov	r0, r7
 8004b9a:	f000 f957 	bl	8004e4c <finitef>
 8004b9e:	b350      	cbz	r0, 8004bf6 <hypotf+0x82>
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f000 f953 	bl	8004e4c <finitef>
 8004ba6:	b330      	cbz	r0, 8004bf6 <hypotf+0x82>
 8004ba8:	2303      	movs	r3, #3
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <hypotf+0xa4>)
 8004bae:	4638      	mov	r0, r7
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	f8cd 8020 	str.w	r8, [sp, #32]
 8004bb6:	f7fb fc41 	bl	800043c <__aeabi_f2d>
 8004bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7fb fc3c 	bl	800043c <__aeabi_f2d>
 8004bc4:	f995 3000 	ldrsb.w	r3, [r5]
 8004bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bcc:	b9bb      	cbnz	r3, 8004bfe <hypotf+0x8a>
 8004bce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <hypotf+0xa8>)
 8004bd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bd8:	4668      	mov	r0, sp
 8004bda:	f000 f935 	bl	8004e48 <matherr>
 8004bde:	b1a0      	cbz	r0, 8004c0a <hypotf+0x96>
 8004be0:	9b08      	ldr	r3, [sp, #32]
 8004be2:	b11b      	cbz	r3, 8004bec <hypotf+0x78>
 8004be4:	f7ff fe1e 	bl	8004824 <__errno>
 8004be8:	9b08      	ldr	r3, [sp, #32]
 8004bea:	6003      	str	r3, [r0, #0]
 8004bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bf0:	f7fb fe8a 	bl	8000908 <__aeabi_d2f>
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	b00a      	add	sp, #40	; 0x28
 8004bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bfe:	2000      	movs	r0, #0
 8004c00:	4907      	ldr	r1, [pc, #28]	; (8004c20 <hypotf+0xac>)
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c08:	d1e6      	bne.n	8004bd8 <hypotf+0x64>
 8004c0a:	f7ff fe0b 	bl	8004824 <__errno>
 8004c0e:	2322      	movs	r3, #34	; 0x22
 8004c10:	6003      	str	r3, [r0, #0]
 8004c12:	e7e5      	b.n	8004be0 <hypotf+0x6c>
 8004c14:	20000098 	.word	0x20000098
 8004c18:	08004fc8 	.word	0x08004fc8
 8004c1c:	47efffff 	.word	0x47efffff
 8004c20:	7ff00000 	.word	0x7ff00000

08004c24 <__ieee754_hypotf>:
 8004c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004c2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004c30:	42b4      	cmp	r4, r6
 8004c32:	bfbe      	ittt	lt
 8004c34:	4623      	movlt	r3, r4
 8004c36:	4634      	movlt	r4, r6
 8004c38:	461e      	movlt	r6, r3
 8004c3a:	1ba3      	subs	r3, r4, r6
 8004c3c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c40:	4625      	mov	r5, r4
 8004c42:	4637      	mov	r7, r6
 8004c44:	dd05      	ble.n	8004c52 <__ieee754_hypotf+0x2e>
 8004c46:	4631      	mov	r1, r6
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7fb feb3 	bl	80009b4 <__addsf3>
 8004c4e:	4605      	mov	r5, r0
 8004c50:	e010      	b.n	8004c74 <__ieee754_hypotf+0x50>
 8004c52:	f1b4 4fb1 	cmp.w	r4, #1484783616	; 0x58800000
 8004c56:	dd6b      	ble.n	8004d30 <__ieee754_hypotf+0x10c>
 8004c58:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004c5c:	db10      	blt.n	8004c80 <__ieee754_hypotf+0x5c>
 8004c5e:	d00c      	beq.n	8004c7a <__ieee754_hypotf+0x56>
 8004c60:	4631      	mov	r1, r6
 8004c62:	4620      	mov	r0, r4
 8004c64:	f7fb fea6 	bl	80009b4 <__addsf3>
 8004c68:	4605      	mov	r5, r0
 8004c6a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004c6e:	d101      	bne.n	8004c74 <__ieee754_hypotf+0x50>
 8004c70:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 8004c74:	4628      	mov	r0, r5
 8004c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7a:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 8004c7e:	e7f4      	b.n	8004c6a <__ieee754_hypotf+0x46>
 8004c80:	f104 445e 	add.w	r4, r4, #3724541952	; 0xde000000
 8004c84:	f106 465e 	add.w	r6, r6, #3724541952	; 0xde000000
 8004c88:	4625      	mov	r5, r4
 8004c8a:	4637      	mov	r7, r6
 8004c8c:	f04f 0844 	mov.w	r8, #68	; 0x44
 8004c90:	f1b6 5f1a 	cmp.w	r6, #645922816	; 0x26800000
 8004c94:	da12      	bge.n	8004cbc <__ieee754_hypotf+0x98>
 8004c96:	2e00      	cmp	r6, #0
 8004c98:	d0ec      	beq.n	8004c74 <__ieee754_hypotf+0x50>
 8004c9a:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8004c9e:	da4a      	bge.n	8004d36 <__ieee754_hypotf+0x112>
 8004ca0:	f04f 41fd 	mov.w	r1, #2122317824	; 0x7e800000
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	f7fb ff8d 	bl	8000bc4 <__aeabi_fmul>
 8004caa:	f04f 41fd 	mov.w	r1, #2122317824	; 0x7e800000
 8004cae:	4607      	mov	r7, r0
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f7fb ff87 	bl	8000bc4 <__aeabi_fmul>
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	f1a8 087e 	sub.w	r8, r8, #126	; 0x7e
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7fb fe76 	bl	80009b0 <__aeabi_fsub>
 8004cc4:	4601      	mov	r1, r0
 8004cc6:	4681      	mov	r9, r0
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7fc f919 	bl	8000f00 <__aeabi_fcmplt>
 8004cce:	4b34      	ldr	r3, [pc, #208]	; (8004da0 <__ieee754_hypotf+0x17c>)
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d039      	beq.n	8004d48 <__ieee754_hypotf+0x124>
 8004cd4:	401c      	ands	r4, r3
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f7fb ff73 	bl	8000bc4 <__aeabi_fmul>
 8004cde:	4639      	mov	r1, r7
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 8004ce6:	f7fb ff6d 	bl	8000bc4 <__aeabi_fmul>
 8004cea:	4621      	mov	r1, r4
 8004cec:	4607      	mov	r7, r0
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f7fb fe5e 	bl	80009b0 <__aeabi_fsub>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4681      	mov	r9, r0
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f7fb fe5b 	bl	80009b4 <__addsf3>
 8004cfe:	4601      	mov	r1, r0
 8004d00:	4648      	mov	r0, r9
 8004d02:	f7fb ff5f 	bl	8000bc4 <__aeabi_fmul>
 8004d06:	4601      	mov	r1, r0
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f7fb fe51 	bl	80009b0 <__aeabi_fsub>
 8004d0e:	4601      	mov	r1, r0
 8004d10:	4630      	mov	r0, r6
 8004d12:	f7fb fe4d 	bl	80009b0 <__aeabi_fsub>
 8004d16:	f000 f845 	bl	8004da4 <__ieee754_sqrtf>
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	f1b8 0f00 	cmp.w	r8, #0
 8004d20:	d0a8      	beq.n	8004c74 <__ieee754_hypotf+0x50>
 8004d22:	ea4f 51c8 	mov.w	r1, r8, lsl #23
 8004d26:	f101 517e 	add.w	r1, r1, #1065353216	; 0x3f800000
 8004d2a:	f7fb ff4b 	bl	8000bc4 <__aeabi_fmul>
 8004d2e:	e78e      	b.n	8004c4e <__ieee754_hypotf+0x2a>
 8004d30:	f04f 0800 	mov.w	r8, #0
 8004d34:	e7ac      	b.n	8004c90 <__ieee754_hypotf+0x6c>
 8004d36:	f104 5408 	add.w	r4, r4, #570425344	; 0x22000000
 8004d3a:	f106 5608 	add.w	r6, r6, #570425344	; 0x22000000
 8004d3e:	f1a8 0844 	sub.w	r8, r8, #68	; 0x44
 8004d42:	4625      	mov	r5, r4
 8004d44:	4637      	mov	r7, r6
 8004d46:	e7b9      	b.n	8004cbc <__ieee754_hypotf+0x98>
 8004d48:	401e      	ands	r6, r3
 8004d4a:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7fb ff37 	bl	8000bc4 <__aeabi_fmul>
 8004d56:	4649      	mov	r1, r9
 8004d58:	4682      	mov	sl, r0
 8004d5a:	f109 4000 	add.w	r0, r9, #2147483648	; 0x80000000
 8004d5e:	f7fb ff31 	bl	8000bc4 <__aeabi_fmul>
 8004d62:	4629      	mov	r1, r5
 8004d64:	4681      	mov	r9, r0
 8004d66:	4628      	mov	r0, r5
 8004d68:	f7fb fe24 	bl	80009b4 <__addsf3>
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	f7fb fe1f 	bl	80009b0 <__aeabi_fsub>
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb ff26 	bl	8000bc4 <__aeabi_fmul>
 8004d78:	4631      	mov	r1, r6
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f7fb fe17 	bl	80009b0 <__aeabi_fsub>
 8004d82:	4621      	mov	r1, r4
 8004d84:	f7fb ff1e 	bl	8000bc4 <__aeabi_fmul>
 8004d88:	4601      	mov	r1, r0
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f7fb fe12 	bl	80009b4 <__addsf3>
 8004d90:	4601      	mov	r1, r0
 8004d92:	4648      	mov	r0, r9
 8004d94:	f7fb fe0c 	bl	80009b0 <__aeabi_fsub>
 8004d98:	4601      	mov	r1, r0
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	e7b9      	b.n	8004d12 <__ieee754_hypotf+0xee>
 8004d9e:	bf00      	nop
 8004da0:	fffff000 	.word	0xfffff000

08004da4 <__ieee754_sqrtf>:
 8004da4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8004da8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4603      	mov	r3, r0
 8004db0:	4604      	mov	r4, r0
 8004db2:	d309      	bcc.n	8004dc8 <__ieee754_sqrtf+0x24>
 8004db4:	4601      	mov	r1, r0
 8004db6:	f7fb ff05 	bl	8000bc4 <__aeabi_fmul>
 8004dba:	4601      	mov	r1, r0
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f7fb fdf9 	bl	80009b4 <__addsf3>
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	2a00      	cmp	r2, #0
 8004dca:	d0fb      	beq.n	8004dc4 <__ieee754_sqrtf+0x20>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	da06      	bge.n	8004dde <__ieee754_sqrtf+0x3a>
 8004dd0:	4601      	mov	r1, r0
 8004dd2:	f7fb fded 	bl	80009b0 <__aeabi_fsub>
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	f7fb ffa8 	bl	8000d2c <__aeabi_fdiv>
 8004ddc:	e7f1      	b.n	8004dc2 <__ieee754_sqrtf+0x1e>
 8004dde:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004de2:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8004de6:	d204      	bcs.n	8004df2 <__ieee754_sqrtf+0x4e>
 8004de8:	2200      	movs	r2, #0
 8004dea:	0219      	lsls	r1, r3, #8
 8004dec:	d529      	bpl.n	8004e42 <__ieee754_sqrtf+0x9e>
 8004dee:	3a01      	subs	r2, #1
 8004df0:	1aa4      	subs	r4, r4, r2
 8004df2:	3c7f      	subs	r4, #127	; 0x7f
 8004df4:	07e2      	lsls	r2, r4, #31
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	ea4f 0164 	mov.w	r1, r4, asr #1
 8004dfe:	4616      	mov	r6, r2
 8004e00:	f04f 0419 	mov.w	r4, #25
 8004e04:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004e08:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e10:	bf48      	it	mi
 8004e12:	005b      	lslmi	r3, r3, #1
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	1835      	adds	r5, r6, r0
 8004e18:	429d      	cmp	r5, r3
 8004e1a:	bfde      	ittt	le
 8004e1c:	182e      	addle	r6, r5, r0
 8004e1e:	1b5b      	suble	r3, r3, r5
 8004e20:	1812      	addle	r2, r2, r0
 8004e22:	3c01      	subs	r4, #1
 8004e24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004e28:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004e2c:	d1f3      	bne.n	8004e16 <__ieee754_sqrtf+0x72>
 8004e2e:	b113      	cbz	r3, 8004e36 <__ieee754_sqrtf+0x92>
 8004e30:	3201      	adds	r2, #1
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	1054      	asrs	r4, r2, #1
 8004e38:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8004e3c:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8004e40:	e7c0      	b.n	8004dc4 <__ieee754_sqrtf+0x20>
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	3201      	adds	r2, #1
 8004e46:	e7d0      	b.n	8004dea <__ieee754_sqrtf+0x46>

08004e48 <matherr>:
 8004e48:	2000      	movs	r0, #0
 8004e4a:	4770      	bx	lr

08004e4c <finitef>:
 8004e4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004e50:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004e54:	bfac      	ite	ge
 8004e56:	2000      	movge	r0, #0
 8004e58:	2001      	movlt	r0, #1
 8004e5a:	4770      	bx	lr

08004e5c <_init>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr

08004e68 <_fini>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr
