
STM32103CT8x_GST_STAND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004dc0  08004dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08004ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004a4  20000090  08004f64  00020090  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000534  08004f64  00020534  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   000176c3  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000038a9  00000000  00000000  0003777c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b3c6  00000000  00000000  0003b025  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ea0  00000000  00000000  000463f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000015e8  00000000  00000000  00047290  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009233  00000000  00000000  00048878  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005326  00000000  00000000  00051aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00056dd1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003208  00000000  00000000  00056e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08004da8 	.word	0x08004da8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08004da8 	.word	0x08004da8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f092 0f00 	teq	r2, #0
 800045e:	bf14      	ite	ne
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 7460 	mov.w	r4, #896	; 0x380
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e720      	b.n	80002b8 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_ul2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f04f 0500 	mov.w	r5, #0
 8000486:	e00a      	b.n	800049e <__aeabi_l2d+0x16>

08000488 <__aeabi_l2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000496:	d502      	bpl.n	800049e <__aeabi_l2d+0x16>
 8000498:	4240      	negs	r0, r0
 800049a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004aa:	f43f aedc 	beq.w	8000266 <__adddf3+0xe6>
 80004ae:	f04f 0203 	mov.w	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004c6:	f1c2 0320 	rsb	r3, r2, #32
 80004ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004d6:	ea40 000e 	orr.w	r0, r0, lr
 80004da:	fa21 f102 	lsr.w	r1, r1, r2
 80004de:	4414      	add	r4, r2
 80004e0:	e6c1      	b.n	8000266 <__adddf3+0xe6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dmul>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f2:	bf1d      	ittte	ne
 80004f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f8:	ea94 0f0c 	teqne	r4, ip
 80004fc:	ea95 0f0c 	teqne	r5, ip
 8000500:	f000 f8de 	bleq	80006c0 <__aeabi_dmul+0x1dc>
 8000504:	442c      	add	r4, r5
 8000506:	ea81 0603 	eor.w	r6, r1, r3
 800050a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800050e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000516:	bf18      	it	ne
 8000518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800051c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000524:	d038      	beq.n	8000598 <__aeabi_dmul+0xb4>
 8000526:	fba0 ce02 	umull	ip, lr, r0, r2
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000536:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053a:	f04f 0600 	mov.w	r6, #0
 800053e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000542:	f09c 0f00 	teq	ip, #0
 8000546:	bf18      	it	ne
 8000548:	f04e 0e01 	orrne.w	lr, lr, #1
 800054c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000558:	d204      	bcs.n	8000564 <__aeabi_dmul+0x80>
 800055a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800055e:	416d      	adcs	r5, r5
 8000560:	eb46 0606 	adc.w	r6, r6, r6
 8000564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800056c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800057c:	bf88      	it	hi
 800057e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000582:	d81e      	bhi.n	80005c2 <__aeabi_dmul+0xde>
 8000584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800059c:	ea46 0101 	orr.w	r1, r6, r1
 80005a0:	ea40 0002 	orr.w	r0, r0, r2
 80005a4:	ea81 0103 	eor.w	r1, r1, r3
 80005a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005ac:	bfc2      	ittt	gt
 80005ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	popgt	{r4, r5, r6, pc}
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f04f 0e00 	mov.w	lr, #0
 80005c0:	3c01      	subs	r4, #1
 80005c2:	f300 80ab 	bgt.w	800071c <__aeabi_dmul+0x238>
 80005c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ca:	bfde      	ittt	le
 80005cc:	2000      	movle	r0, #0
 80005ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd70      	pople	{r4, r5, r6, pc}
 80005d4:	f1c4 0400 	rsb	r4, r4, #0
 80005d8:	3c20      	subs	r4, #32
 80005da:	da35      	bge.n	8000648 <__aeabi_dmul+0x164>
 80005dc:	340c      	adds	r4, #12
 80005de:	dc1b      	bgt.n	8000618 <__aeabi_dmul+0x134>
 80005e0:	f104 0414 	add.w	r4, r4, #20
 80005e4:	f1c4 0520 	rsb	r5, r4, #32
 80005e8:	fa00 f305 	lsl.w	r3, r0, r5
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f205 	lsl.w	r2, r1, r5
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000604:	fa21 f604 	lsr.w	r6, r1, r4
 8000608:	eb42 0106 	adc.w	r1, r2, r6
 800060c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000610:	bf08      	it	eq
 8000612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f1c4 040c 	rsb	r4, r4, #12
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f304 	lsl.w	r3, r0, r4
 8000624:	fa20 f005 	lsr.w	r0, r0, r5
 8000628:	fa01 f204 	lsl.w	r2, r1, r4
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000638:	f141 0100 	adc.w	r1, r1, #0
 800063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000640:	bf08      	it	eq
 8000642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f205 	lsl.w	r2, r0, r5
 8000650:	ea4e 0e02 	orr.w	lr, lr, r2
 8000654:	fa20 f304 	lsr.w	r3, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea43 0302 	orr.w	r3, r3, r2
 8000660:	fa21 f004 	lsr.w	r0, r1, r4
 8000664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000668:	fa21 f204 	lsr.w	r2, r1, r4
 800066c:	ea20 0002 	bic.w	r0, r0, r2
 8000670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f094 0f00 	teq	r4, #0
 8000684:	d10f      	bne.n	80006a6 <__aeabi_dmul+0x1c2>
 8000686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068a:	0040      	lsls	r0, r0, #1
 800068c:	eb41 0101 	adc.w	r1, r1, r1
 8000690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3c01      	subeq	r4, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1a6>
 800069a:	ea41 0106 	orr.w	r1, r1, r6
 800069e:	f095 0f00 	teq	r5, #0
 80006a2:	bf18      	it	ne
 80006a4:	4770      	bxne	lr
 80006a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	eb43 0303 	adc.w	r3, r3, r3
 80006b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b4:	bf08      	it	eq
 80006b6:	3d01      	subeq	r5, #1
 80006b8:	d0f7      	beq.n	80006aa <__aeabi_dmul+0x1c6>
 80006ba:	ea43 0306 	orr.w	r3, r3, r6
 80006be:	4770      	bx	lr
 80006c0:	ea94 0f0c 	teq	r4, ip
 80006c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c8:	bf18      	it	ne
 80006ca:	ea95 0f0c 	teqne	r5, ip
 80006ce:	d00c      	beq.n	80006ea <__aeabi_dmul+0x206>
 80006d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d4:	bf18      	it	ne
 80006d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006da:	d1d1      	bne.n	8000680 <__aeabi_dmul+0x19c>
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ee:	bf06      	itte	eq
 80006f0:	4610      	moveq	r0, r2
 80006f2:	4619      	moveq	r1, r3
 80006f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f8:	d019      	beq.n	800072e <__aeabi_dmul+0x24a>
 80006fa:	ea94 0f0c 	teq	r4, ip
 80006fe:	d102      	bne.n	8000706 <__aeabi_dmul+0x222>
 8000700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000704:	d113      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000706:	ea95 0f0c 	teq	r5, ip
 800070a:	d105      	bne.n	8000718 <__aeabi_dmul+0x234>
 800070c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000710:	bf1c      	itt	ne
 8000712:	4610      	movne	r0, r2
 8000714:	4619      	movne	r1, r3
 8000716:	d10a      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000736:	bd70      	pop	{r4, r5, r6, pc}

08000738 <__aeabi_ddiv>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000746:	bf1d      	ittte	ne
 8000748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800074c:	ea94 0f0c 	teqne	r4, ip
 8000750:	ea95 0f0c 	teqne	r5, ip
 8000754:	f000 f8a7 	bleq	80008a6 <__aeabi_ddiv+0x16e>
 8000758:	eba4 0405 	sub.w	r4, r4, r5
 800075c:	ea81 0e03 	eor.w	lr, r1, r3
 8000760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000768:	f000 8088 	beq.w	800087c <__aeabi_ddiv+0x144>
 800076c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800077c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800078c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000790:	429d      	cmp	r5, r3
 8000792:	bf08      	it	eq
 8000794:	4296      	cmpeq	r6, r2
 8000796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800079e:	d202      	bcs.n	80007a6 <__aeabi_ddiv+0x6e>
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	1ab6      	subs	r6, r6, r2
 80007a8:	eb65 0503 	sbc.w	r5, r5, r3
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000814:	ea55 0e06 	orrs.w	lr, r5, r6
 8000818:	d018      	beq.n	800084c <__aeabi_ddiv+0x114>
 800081a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800081e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800082e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000836:	d1c0      	bne.n	80007ba <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	d10b      	bne.n	8000856 <__aeabi_ddiv+0x11e>
 800083e:	ea41 0100 	orr.w	r1, r1, r0
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084a:	e7b6      	b.n	80007ba <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	bf04      	itt	eq
 8000852:	4301      	orreq	r1, r0
 8000854:	2000      	moveq	r0, #0
 8000856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085a:	bf88      	it	hi
 800085c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000860:	f63f aeaf 	bhi.w	80005c2 <__aeabi_dmul+0xde>
 8000864:	ebb5 0c03 	subs.w	ip, r5, r3
 8000868:	bf04      	itt	eq
 800086a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800086e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000872:	f150 0000 	adcs.w	r0, r0, #0
 8000876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000888:	bfc2      	ittt	gt
 800088a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800088e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000892:	bd70      	popgt	{r4, r5, r6, pc}
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000898:	f04f 0e00 	mov.w	lr, #0
 800089c:	3c01      	subs	r4, #1
 800089e:	e690      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a0:	ea45 0e06 	orr.w	lr, r5, r6
 80008a4:	e68d      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008aa:	ea94 0f0c 	teq	r4, ip
 80008ae:	bf08      	it	eq
 80008b0:	ea95 0f0c 	teqeq	r5, ip
 80008b4:	f43f af3b 	beq.w	800072e <__aeabi_dmul+0x24a>
 80008b8:	ea94 0f0c 	teq	r4, ip
 80008bc:	d10a      	bne.n	80008d4 <__aeabi_ddiv+0x19c>
 80008be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c2:	f47f af34 	bne.w	800072e <__aeabi_dmul+0x24a>
 80008c6:	ea95 0f0c 	teq	r5, ip
 80008ca:	f47f af25 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e72c      	b.n	800072e <__aeabi_dmul+0x24a>
 80008d4:	ea95 0f0c 	teq	r5, ip
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x1b0>
 80008da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008de:	f43f aefd 	beq.w	80006dc <__aeabi_dmul+0x1f8>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e722      	b.n	800072e <__aeabi_dmul+0x24a>
 80008e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ec:	bf18      	it	ne
 80008ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f2:	f47f aec5 	bne.w	8000680 <__aeabi_dmul+0x19c>
 80008f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fa:	f47f af0d 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000902:	f47f aeeb 	bne.w	80006dc <__aeabi_dmul+0x1f8>
 8000906:	e712      	b.n	800072e <__aeabi_dmul+0x24a>

08000908 <__aeabi_d2iz>:
 8000908:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800090c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000910:	d215      	bcs.n	800093e <__aeabi_d2iz+0x36>
 8000912:	d511      	bpl.n	8000938 <__aeabi_d2iz+0x30>
 8000914:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000918:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800091c:	d912      	bls.n	8000944 <__aeabi_d2iz+0x3c>
 800091e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000922:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000926:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	bf18      	it	ne
 8000934:	4240      	negne	r0, r0
 8000936:	4770      	bx	lr
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4770      	bx	lr
 800093e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000942:	d105      	bne.n	8000950 <__aeabi_d2iz+0x48>
 8000944:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000948:	bf08      	it	eq
 800094a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800094e:	4770      	bx	lr
 8000950:	f04f 0000 	mov.w	r0, #0
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <__aeabi_d2f>:
 8000958:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800095c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000960:	bf24      	itt	cs
 8000962:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000966:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096a:	d90d      	bls.n	8000988 <__aeabi_d2f+0x30>
 800096c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000970:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000974:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000978:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800097c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000980:	bf08      	it	eq
 8000982:	f020 0001 	biceq.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800098c:	d121      	bne.n	80009d2 <__aeabi_d2f+0x7a>
 800098e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000992:	bfbc      	itt	lt
 8000994:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000998:	4770      	bxlt	lr
 800099a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a2:	f1c2 0218 	rsb	r2, r2, #24
 80009a6:	f1c2 0c20 	rsb	ip, r2, #32
 80009aa:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ae:	fa20 f002 	lsr.w	r0, r0, r2
 80009b2:	bf18      	it	ne
 80009b4:	f040 0001 	orrne.w	r0, r0, #1
 80009b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c4:	ea40 000c 	orr.w	r0, r0, ip
 80009c8:	fa23 f302 	lsr.w	r3, r3, r2
 80009cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d0:	e7cc      	b.n	800096c <__aeabi_d2f+0x14>
 80009d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009d6:	d107      	bne.n	80009e8 <__aeabi_d2f+0x90>
 80009d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009dc:	bf1e      	ittt	ne
 80009de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009e6:	4770      	bxne	lr
 80009e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_frsub>:
 80009f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009fc:	e002      	b.n	8000a04 <__addsf3>
 80009fe:	bf00      	nop

08000a00 <__aeabi_fsub>:
 8000a00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a04 <__addsf3>:
 8000a04:	0042      	lsls	r2, r0, #1
 8000a06:	bf1f      	itttt	ne
 8000a08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a0c:	ea92 0f03 	teqne	r2, r3
 8000a10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a18:	d06a      	beq.n	8000af0 <__addsf3+0xec>
 8000a1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a22:	bfc1      	itttt	gt
 8000a24:	18d2      	addgt	r2, r2, r3
 8000a26:	4041      	eorgt	r1, r0
 8000a28:	4048      	eorgt	r0, r1
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	bfb8      	it	lt
 8000a2e:	425b      	neglt	r3, r3
 8000a30:	2b19      	cmp	r3, #25
 8000a32:	bf88      	it	hi
 8000a34:	4770      	bxhi	lr
 8000a36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a42:	bf18      	it	ne
 8000a44:	4240      	negne	r0, r0
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a52:	bf18      	it	ne
 8000a54:	4249      	negne	r1, r1
 8000a56:	ea92 0f03 	teq	r2, r3
 8000a5a:	d03f      	beq.n	8000adc <__addsf3+0xd8>
 8000a5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a60:	fa41 fc03 	asr.w	ip, r1, r3
 8000a64:	eb10 000c 	adds.w	r0, r0, ip
 8000a68:	f1c3 0320 	rsb	r3, r3, #32
 8000a6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a74:	d502      	bpl.n	8000a7c <__addsf3+0x78>
 8000a76:	4249      	negs	r1, r1
 8000a78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a80:	d313      	bcc.n	8000aaa <__addsf3+0xa6>
 8000a82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a86:	d306      	bcc.n	8000a96 <__addsf3+0x92>
 8000a88:	0840      	lsrs	r0, r0, #1
 8000a8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a8e:	f102 0201 	add.w	r2, r2, #1
 8000a92:	2afe      	cmp	r2, #254	; 0xfe
 8000a94:	d251      	bcs.n	8000b3a <__addsf3+0x136>
 8000a96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a9e:	bf08      	it	eq
 8000aa0:	f020 0001 	biceq.w	r0, r0, #1
 8000aa4:	ea40 0003 	orr.w	r0, r0, r3
 8000aa8:	4770      	bx	lr
 8000aaa:	0049      	lsls	r1, r1, #1
 8000aac:	eb40 0000 	adc.w	r0, r0, r0
 8000ab0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ab4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab8:	d1ed      	bne.n	8000a96 <__addsf3+0x92>
 8000aba:	fab0 fc80 	clz	ip, r0
 8000abe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ac6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aca:	bfaa      	itet	ge
 8000acc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad0:	4252      	neglt	r2, r2
 8000ad2:	4318      	orrge	r0, r3
 8000ad4:	bfbc      	itt	lt
 8000ad6:	40d0      	lsrlt	r0, r2
 8000ad8:	4318      	orrlt	r0, r3
 8000ada:	4770      	bx	lr
 8000adc:	f092 0f00 	teq	r2, #0
 8000ae0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae4:	bf06      	itte	eq
 8000ae6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aea:	3201      	addeq	r2, #1
 8000aec:	3b01      	subne	r3, #1
 8000aee:	e7b5      	b.n	8000a5c <__addsf3+0x58>
 8000af0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000af8:	bf18      	it	ne
 8000afa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afe:	d021      	beq.n	8000b44 <__addsf3+0x140>
 8000b00:	ea92 0f03 	teq	r2, r3
 8000b04:	d004      	beq.n	8000b10 <__addsf3+0x10c>
 8000b06:	f092 0f00 	teq	r2, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	4608      	moveq	r0, r1
 8000b0e:	4770      	bx	lr
 8000b10:	ea90 0f01 	teq	r0, r1
 8000b14:	bf1c      	itt	ne
 8000b16:	2000      	movne	r0, #0
 8000b18:	4770      	bxne	lr
 8000b1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b1e:	d104      	bne.n	8000b2a <__addsf3+0x126>
 8000b20:	0040      	lsls	r0, r0, #1
 8000b22:	bf28      	it	cs
 8000b24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	4770      	bx	lr
 8000b2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b2e:	bf3c      	itt	cc
 8000b30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bxcc	lr
 8000b36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	4770      	bx	lr
 8000b44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b48:	bf16      	itet	ne
 8000b4a:	4608      	movne	r0, r1
 8000b4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b50:	4601      	movne	r1, r0
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	bf06      	itte	eq
 8000b56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5a:	ea90 0f01 	teqeq	r0, r1
 8000b5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_ui2f>:
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e004      	b.n	8000b74 <__aeabi_i2f+0x8>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_i2f>:
 8000b6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	bf48      	it	mi
 8000b72:	4240      	negmi	r0, r0
 8000b74:	ea5f 0c00 	movs.w	ip, r0
 8000b78:	bf08      	it	eq
 8000b7a:	4770      	bxeq	lr
 8000b7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b80:	4601      	mov	r1, r0
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	e01c      	b.n	8000bc2 <__aeabi_l2f+0x2a>

08000b88 <__aeabi_ul2f>:
 8000b88:	ea50 0201 	orrs.w	r2, r0, r1
 8000b8c:	bf08      	it	eq
 8000b8e:	4770      	bxeq	lr
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	e00a      	b.n	8000bac <__aeabi_l2f+0x14>
 8000b96:	bf00      	nop

08000b98 <__aeabi_l2f>:
 8000b98:	ea50 0201 	orrs.w	r2, r0, r1
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__aeabi_l2f+0x14>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	ea5f 0c01 	movs.w	ip, r1
 8000bb0:	bf02      	ittt	eq
 8000bb2:	4684      	moveq	ip, r0
 8000bb4:	4601      	moveq	r1, r0
 8000bb6:	2000      	moveq	r0, #0
 8000bb8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bc6:	fabc f28c 	clz	r2, ip
 8000bca:	3a08      	subs	r2, #8
 8000bcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd0:	db10      	blt.n	8000bf4 <__aeabi_l2f+0x5c>
 8000bd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bdc:	f1c2 0220 	rsb	r2, r2, #32
 8000be0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be4:	fa20 f202 	lsr.w	r2, r0, r2
 8000be8:	eb43 0002 	adc.w	r0, r3, r2
 8000bec:	bf08      	it	eq
 8000bee:	f020 0001 	biceq.w	r0, r0, #1
 8000bf2:	4770      	bx	lr
 8000bf4:	f102 0220 	add.w	r2, r2, #32
 8000bf8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfc:	f1c2 0220 	rsb	r2, r2, #32
 8000c00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c04:	fa21 f202 	lsr.w	r2, r1, r2
 8000c08:	eb43 0002 	adc.w	r0, r3, r2
 8000c0c:	bf08      	it	eq
 8000c0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_fmul>:
 8000c14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c22:	ea92 0f0c 	teqne	r2, ip
 8000c26:	ea93 0f0c 	teqne	r3, ip
 8000c2a:	d06f      	beq.n	8000d0c <__aeabi_fmul+0xf8>
 8000c2c:	441a      	add	r2, r3
 8000c2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c32:	0240      	lsls	r0, r0, #9
 8000c34:	bf18      	it	ne
 8000c36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c3a:	d01e      	beq.n	8000c7a <__aeabi_fmul+0x66>
 8000c3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c48:	fba0 3101 	umull	r3, r1, r0, r1
 8000c4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c54:	bf3e      	ittt	cc
 8000c56:	0049      	lslcc	r1, r1, #1
 8000c58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c5c:	005b      	lslcc	r3, r3, #1
 8000c5e:	ea40 0001 	orr.w	r0, r0, r1
 8000c62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c66:	2afd      	cmp	r2, #253	; 0xfd
 8000c68:	d81d      	bhi.n	8000ca6 <__aeabi_fmul+0x92>
 8000c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c72:	bf08      	it	eq
 8000c74:	f020 0001 	biceq.w	r0, r0, #1
 8000c78:	4770      	bx	lr
 8000c7a:	f090 0f00 	teq	r0, #0
 8000c7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c82:	bf08      	it	eq
 8000c84:	0249      	lsleq	r1, r1, #9
 8000c86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c8e:	3a7f      	subs	r2, #127	; 0x7f
 8000c90:	bfc2      	ittt	gt
 8000c92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9a:	4770      	bxgt	lr
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	3a01      	subs	r2, #1
 8000ca6:	dc5d      	bgt.n	8000d64 <__aeabi_fmul+0x150>
 8000ca8:	f112 0f19 	cmn.w	r2, #25
 8000cac:	bfdc      	itt	le
 8000cae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cb2:	4770      	bxle	lr
 8000cb4:	f1c2 0200 	rsb	r2, r2, #0
 8000cb8:	0041      	lsls	r1, r0, #1
 8000cba:	fa21 f102 	lsr.w	r1, r1, r2
 8000cbe:	f1c2 0220 	rsb	r2, r2, #32
 8000cc2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cca:	f140 0000 	adc.w	r0, r0, #0
 8000cce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cd2:	bf08      	it	eq
 8000cd4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd8:	4770      	bx	lr
 8000cda:	f092 0f00 	teq	r2, #0
 8000cde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ce2:	bf02      	ittt	eq
 8000ce4:	0040      	lsleq	r0, r0, #1
 8000ce6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cea:	3a01      	subeq	r2, #1
 8000cec:	d0f9      	beq.n	8000ce2 <__aeabi_fmul+0xce>
 8000cee:	ea40 000c 	orr.w	r0, r0, ip
 8000cf2:	f093 0f00 	teq	r3, #0
 8000cf6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	bf02      	ittt	eq
 8000cfc:	0049      	lsleq	r1, r1, #1
 8000cfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d02:	3b01      	subeq	r3, #1
 8000d04:	d0f9      	beq.n	8000cfa <__aeabi_fmul+0xe6>
 8000d06:	ea41 010c 	orr.w	r1, r1, ip
 8000d0a:	e78f      	b.n	8000c2c <__aeabi_fmul+0x18>
 8000d0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d10:	ea92 0f0c 	teq	r2, ip
 8000d14:	bf18      	it	ne
 8000d16:	ea93 0f0c 	teqne	r3, ip
 8000d1a:	d00a      	beq.n	8000d32 <__aeabi_fmul+0x11e>
 8000d1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d20:	bf18      	it	ne
 8000d22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d26:	d1d8      	bne.n	8000cda <__aeabi_fmul+0xc6>
 8000d28:	ea80 0001 	eor.w	r0, r0, r1
 8000d2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f090 0f00 	teq	r0, #0
 8000d36:	bf17      	itett	ne
 8000d38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d3c:	4608      	moveq	r0, r1
 8000d3e:	f091 0f00 	teqne	r1, #0
 8000d42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d46:	d014      	beq.n	8000d72 <__aeabi_fmul+0x15e>
 8000d48:	ea92 0f0c 	teq	r2, ip
 8000d4c:	d101      	bne.n	8000d52 <__aeabi_fmul+0x13e>
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	d10f      	bne.n	8000d72 <__aeabi_fmul+0x15e>
 8000d52:	ea93 0f0c 	teq	r3, ip
 8000d56:	d103      	bne.n	8000d60 <__aeabi_fmul+0x14c>
 8000d58:	024b      	lsls	r3, r1, #9
 8000d5a:	bf18      	it	ne
 8000d5c:	4608      	movne	r0, r1
 8000d5e:	d108      	bne.n	8000d72 <__aeabi_fmul+0x15e>
 8000d60:	ea80 0001 	eor.w	r0, r0, r1
 8000d64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	4770      	bx	lr
 8000d72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fdiv>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d069      	beq.n	8000e68 <__aeabi_fdiv+0xec>
 8000d94:	eba2 0203 	sub.w	r2, r2, r3
 8000d98:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9c:	0249      	lsls	r1, r1, #9
 8000d9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000da2:	d037      	beq.n	8000e14 <__aeabi_fdiv+0x98>
 8000da4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000da8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000db0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db4:	428b      	cmp	r3, r1
 8000db6:	bf38      	it	cc
 8000db8:	005b      	lslcc	r3, r3, #1
 8000dba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	bf24      	itt	cs
 8000dc6:	1a5b      	subcs	r3, r3, r1
 8000dc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dde:	bf24      	itt	cs
 8000de0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000de8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dec:	bf24      	itt	cs
 8000dee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000df2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	bf18      	it	ne
 8000dfa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dfe:	d1e0      	bne.n	8000dc2 <__aeabi_fdiv+0x46>
 8000e00:	2afd      	cmp	r2, #253	; 0xfd
 8000e02:	f63f af50 	bhi.w	8000ca6 <__aeabi_fmul+0x92>
 8000e06:	428b      	cmp	r3, r1
 8000e08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e0c:	bf08      	it	eq
 8000e0e:	f020 0001 	biceq.w	r0, r0, #1
 8000e12:	4770      	bx	lr
 8000e14:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1c:	327f      	adds	r2, #127	; 0x7f
 8000e1e:	bfc2      	ittt	gt
 8000e20:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e28:	4770      	bxgt	lr
 8000e2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	3a01      	subs	r2, #1
 8000e34:	e737      	b.n	8000ca6 <__aeabi_fmul+0x92>
 8000e36:	f092 0f00 	teq	r2, #0
 8000e3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0040      	lsleq	r0, r0, #1
 8000e42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e46:	3a01      	subeq	r2, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fdiv+0xc2>
 8000e4a:	ea40 000c 	orr.w	r0, r0, ip
 8000e4e:	f093 0f00 	teq	r3, #0
 8000e52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	bf02      	ittt	eq
 8000e58:	0049      	lsleq	r1, r1, #1
 8000e5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5e:	3b01      	subeq	r3, #1
 8000e60:	d0f9      	beq.n	8000e56 <__aeabi_fdiv+0xda>
 8000e62:	ea41 010c 	orr.w	r1, r1, ip
 8000e66:	e795      	b.n	8000d94 <__aeabi_fdiv+0x18>
 8000e68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e6c:	ea92 0f0c 	teq	r2, ip
 8000e70:	d108      	bne.n	8000e84 <__aeabi_fdiv+0x108>
 8000e72:	0242      	lsls	r2, r0, #9
 8000e74:	f47f af7d 	bne.w	8000d72 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	f47f af70 	bne.w	8000d60 <__aeabi_fmul+0x14c>
 8000e80:	4608      	mov	r0, r1
 8000e82:	e776      	b.n	8000d72 <__aeabi_fmul+0x15e>
 8000e84:	ea93 0f0c 	teq	r3, ip
 8000e88:	d104      	bne.n	8000e94 <__aeabi_fdiv+0x118>
 8000e8a:	024b      	lsls	r3, r1, #9
 8000e8c:	f43f af4c 	beq.w	8000d28 <__aeabi_fmul+0x114>
 8000e90:	4608      	mov	r0, r1
 8000e92:	e76e      	b.n	8000d72 <__aeabi_fmul+0x15e>
 8000e94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e98:	bf18      	it	ne
 8000e9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e9e:	d1ca      	bne.n	8000e36 <__aeabi_fdiv+0xba>
 8000ea0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea4:	f47f af5c 	bne.w	8000d60 <__aeabi_fmul+0x14c>
 8000ea8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eac:	f47f af3c 	bne.w	8000d28 <__aeabi_fmul+0x114>
 8000eb0:	e75f      	b.n	8000d72 <__aeabi_fmul+0x15e>
 8000eb2:	bf00      	nop

08000eb4 <__gesf2>:
 8000eb4:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb8:	e006      	b.n	8000ec8 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__lesf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	e002      	b.n	8000ec8 <__cmpsf2+0x4>
 8000ec2:	bf00      	nop

08000ec4 <__cmpsf2>:
 8000ec4:	f04f 0c01 	mov.w	ip, #1
 8000ec8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ecc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed8:	bf18      	it	ne
 8000eda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ede:	d011      	beq.n	8000f04 <__cmpsf2+0x40>
 8000ee0:	b001      	add	sp, #4
 8000ee2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ee6:	bf18      	it	ne
 8000ee8:	ea90 0f01 	teqne	r0, r1
 8000eec:	bf58      	it	pl
 8000eee:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ef2:	bf88      	it	hi
 8000ef4:	17c8      	asrhi	r0, r1, #31
 8000ef6:	bf38      	it	cc
 8000ef8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000efc:	bf18      	it	ne
 8000efe:	f040 0001 	orrne.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f08:	d102      	bne.n	8000f10 <__cmpsf2+0x4c>
 8000f0a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f0e:	d105      	bne.n	8000f1c <__cmpsf2+0x58>
 8000f10:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f14:	d1e4      	bne.n	8000ee0 <__cmpsf2+0x1c>
 8000f16:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1a:	d0e1      	beq.n	8000ee0 <__cmpsf2+0x1c>
 8000f1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__aeabi_cfrcmple>:
 8000f24:	4684      	mov	ip, r0
 8000f26:	4608      	mov	r0, r1
 8000f28:	4661      	mov	r1, ip
 8000f2a:	e7ff      	b.n	8000f2c <__aeabi_cfcmpeq>

08000f2c <__aeabi_cfcmpeq>:
 8000f2c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f2e:	f7ff ffc9 	bl	8000ec4 <__cmpsf2>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	bf48      	it	mi
 8000f36:	f110 0f00 	cmnmi.w	r0, #0
 8000f3a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f3c <__aeabi_fcmpeq>:
 8000f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f40:	f7ff fff4 	bl	8000f2c <__aeabi_cfcmpeq>
 8000f44:	bf0c      	ite	eq
 8000f46:	2001      	moveq	r0, #1
 8000f48:	2000      	movne	r0, #0
 8000f4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4e:	bf00      	nop

08000f50 <__aeabi_fcmplt>:
 8000f50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f54:	f7ff ffea 	bl	8000f2c <__aeabi_cfcmpeq>
 8000f58:	bf34      	ite	cc
 8000f5a:	2001      	movcc	r0, #1
 8000f5c:	2000      	movcs	r0, #0
 8000f5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f62:	bf00      	nop

08000f64 <__aeabi_fcmple>:
 8000f64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f68:	f7ff ffe0 	bl	8000f2c <__aeabi_cfcmpeq>
 8000f6c:	bf94      	ite	ls
 8000f6e:	2001      	movls	r0, #1
 8000f70:	2000      	movhi	r0, #0
 8000f72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f76:	bf00      	nop

08000f78 <__aeabi_fcmpge>:
 8000f78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f7c:	f7ff ffd2 	bl	8000f24 <__aeabi_cfrcmple>
 8000f80:	bf94      	ite	ls
 8000f82:	2001      	movls	r0, #1
 8000f84:	2000      	movhi	r0, #0
 8000f86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8a:	bf00      	nop

08000f8c <__aeabi_fcmpgt>:
 8000f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f90:	f7ff ffc8 	bl	8000f24 <__aeabi_cfrcmple>
 8000f94:	bf34      	ite	cc
 8000f96:	2001      	movcc	r0, #1
 8000f98:	2000      	movcs	r0, #0
 8000f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_f2iz>:
 8000fa0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa8:	d30f      	bcc.n	8000fca <__aeabi_f2iz+0x2a>
 8000faa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d90d      	bls.n	8000fd0 <__aeabi_f2iz+0x30>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	bf18      	it	ne
 8000fc6:	4240      	negne	r0, r0
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2iz+0x3a>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d105      	bne.n	8000fe6 <__aeabi_f2iz+0x46>
 8000fda:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fde:	bf08      	it	eq
 8000fe0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr

08000fec <__aeabi_f2uiz>:
 8000fec:	0042      	lsls	r2, r0, #1
 8000fee:	d20e      	bcs.n	800100e <__aeabi_f2uiz+0x22>
 8000ff0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ff4:	d30b      	bcc.n	800100e <__aeabi_f2uiz+0x22>
 8000ff6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ffa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ffe:	d409      	bmi.n	8001014 <__aeabi_f2uiz+0x28>
 8001000:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001008:	fa23 f002 	lsr.w	r0, r3, r2
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2uiz+0x32>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d102      	bne.n	8001024 <__aeabi_f2uiz+0x38>
 800101e:	f04f 30ff 	mov.w	r0, #4294967295
 8001022:	4770      	bx	lr
 8001024:	f04f 0000 	mov.w	r0, #0
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_InitTick+0x3c>)
{
 8001030:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001032:	7818      	ldrb	r0, [r3, #0]
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	fbb3 f3f0 	udiv	r3, r3, r0
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_InitTick+0x40>)
 800103e:	6810      	ldr	r0, [r2, #0]
 8001040:	fbb0 f0f3 	udiv	r0, r0, r3
 8001044:	f000 fac8 	bl	80015d8 <HAL_SYSTICK_Config>
 8001048:	4604      	mov	r4, r0
 800104a:	b958      	cbnz	r0, 8001064 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104c:	2d0f      	cmp	r5, #15
 800104e:	d809      	bhi.n	8001064 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	4602      	mov	r2, r0
 8001052:	4629      	mov	r1, r5
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 fa7c 	bl	8001554 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <HAL_InitTick+0x44>)
 800105e:	4620      	mov	r0, r4
 8001060:	601d      	str	r5, [r3, #0]
 8001062:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001064:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	20000024 	.word	0x20000024
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x20>)
{
 8001076:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001082:	f000 fa55 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ffd0 	bl	800102c <HAL_InitTick>
  HAL_MspInit();
 800108c:	f003 f98c 	bl	80043a8 <HAL_MspInit>
}
 8001090:	2000      	movs	r0, #0
 8001092:	bd08      	pop	{r3, pc}
 8001094:	40022000 	.word	0x40022000

08001098 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_IncTick+0x10>)
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_IncTick+0x14>)
 800109c:	6811      	ldr	r1, [r2, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	440b      	add	r3, r1
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000018c 	.word	0x2000018c
 80010ac:	20000000 	.word	0x20000000

080010b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010b0:	4b01      	ldr	r3, [pc, #4]	; (80010b8 <HAL_GetTick+0x8>)
 80010b2:	6818      	ldr	r0, [r3, #0]
}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2000018c 	.word	0x2000018c

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b538      	push	{r3, r4, r5, lr}
 80010be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff fff6 	bl	80010b0 <HAL_GetTick>
 80010c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80010c8:	bf1e      	ittt	ne
 80010ca:	4b04      	ldrne	r3, [pc, #16]	; (80010dc <HAL_Delay+0x20>)
 80010cc:	781b      	ldrbne	r3, [r3, #0]
 80010ce:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	1b40      	subs	r0, r0, r5
 80010d6:	4284      	cmp	r4, r0
 80010d8:	d8fa      	bhi.n	80010d0 <HAL_Delay+0x14>
  {
  }
}
 80010da:	bd38      	pop	{r3, r4, r5, pc}
 80010dc:	20000000 	.word	0x20000000

080010e0 <HAL_ADC_ConvCpltCallback>:
 80010e0:	4770      	bx	lr

080010e2 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80010e4:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010e8:	f012 0f50 	tst.w	r2, #80	; 0x50
 80010ec:	d11b      	bne.n	8001126 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6892      	ldr	r2, [r2, #8]
 80010fa:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80010fe:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001102:	d10c      	bne.n	800111e <ADC_DMAConvCplt+0x3c>
 8001104:	7b1a      	ldrb	r2, [r3, #12]
 8001106:	b952      	cbnz	r2, 800111e <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800110a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001112:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001114:	bf5e      	ittt	pl
 8001116:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001118:	f042 0201 	orrpl.w	r2, r2, #1
 800111c:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffde 	bl	80010e0 <HAL_ADC_ConvCpltCallback>
 8001124:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001126:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8001128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4718      	bx	r3

08001130 <HAL_ADC_ConvHalfCpltCallback>:
 8001130:	4770      	bx	lr

08001132 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001132:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001134:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001136:	f7ff fffb 	bl	8001130 <HAL_ADC_ConvHalfCpltCallback>
 800113a:	bd08      	pop	{r3, pc}

0800113c <HAL_ADC_ErrorCallback>:
{
 800113c:	4770      	bx	lr

0800113e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800113e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001140:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001142:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001148:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800114a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001152:	f7ff fff3 	bl	800113c <HAL_ADC_ErrorCallback>
 8001156:	bd08      	pop	{r3, pc}

08001158 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001158:	2300      	movs	r3, #0
{ 
 800115a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800115c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800115e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001162:	2b01      	cmp	r3, #1
 8001164:	d074      	beq.n	8001250 <HAL_ADC_ConfigChannel+0xf8>
 8001166:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001168:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800116a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800116e:	2d06      	cmp	r5, #6
 8001170:	6802      	ldr	r2, [r0, #0]
 8001172:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001176:	680c      	ldr	r4, [r1, #0]
 8001178:	d825      	bhi.n	80011c6 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800117a:	442b      	add	r3, r5
 800117c:	251f      	movs	r5, #31
 800117e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001180:	3b05      	subs	r3, #5
 8001182:	409d      	lsls	r5, r3
 8001184:	ea26 0505 	bic.w	r5, r6, r5
 8001188:	fa04 f303 	lsl.w	r3, r4, r3
 800118c:	432b      	orrs	r3, r5
 800118e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001190:	2c09      	cmp	r4, #9
 8001192:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001196:	688d      	ldr	r5, [r1, #8]
 8001198:	d92f      	bls.n	80011fa <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800119a:	2607      	movs	r6, #7
 800119c:	4423      	add	r3, r4
 800119e:	68d1      	ldr	r1, [r2, #12]
 80011a0:	3b1e      	subs	r3, #30
 80011a2:	409e      	lsls	r6, r3
 80011a4:	ea21 0106 	bic.w	r1, r1, r6
 80011a8:	fa05 f303 	lsl.w	r3, r5, r3
 80011ac:	430b      	orrs	r3, r1
 80011ae:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011b0:	f1a4 0310 	sub.w	r3, r4, #16
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d92b      	bls.n	8001210 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	b002      	add	sp, #8
 80011c4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80011c6:	2d0c      	cmp	r5, #12
 80011c8:	d80b      	bhi.n	80011e2 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011ca:	442b      	add	r3, r5
 80011cc:	251f      	movs	r5, #31
 80011ce:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80011d0:	3b23      	subs	r3, #35	; 0x23
 80011d2:	409d      	lsls	r5, r3
 80011d4:	ea26 0505 	bic.w	r5, r6, r5
 80011d8:	fa04 f303 	lsl.w	r3, r4, r3
 80011dc:	432b      	orrs	r3, r5
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	e7d6      	b.n	8001190 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011e2:	442b      	add	r3, r5
 80011e4:	251f      	movs	r5, #31
 80011e6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80011e8:	3b41      	subs	r3, #65	; 0x41
 80011ea:	409d      	lsls	r5, r3
 80011ec:	ea26 0505 	bic.w	r5, r6, r5
 80011f0:	fa04 f303 	lsl.w	r3, r4, r3
 80011f4:	432b      	orrs	r3, r5
 80011f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011f8:	e7ca      	b.n	8001190 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011fa:	2607      	movs	r6, #7
 80011fc:	6911      	ldr	r1, [r2, #16]
 80011fe:	4423      	add	r3, r4
 8001200:	409e      	lsls	r6, r3
 8001202:	ea21 0106 	bic.w	r1, r1, r6
 8001206:	fa05 f303 	lsl.w	r3, r5, r3
 800120a:	430b      	orrs	r3, r1
 800120c:	6113      	str	r3, [r2, #16]
 800120e:	e7cf      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_ADC_ConfigChannel+0xfc>)
 8001212:	429a      	cmp	r2, r3
 8001214:	d116      	bne.n	8001244 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001216:	6893      	ldr	r3, [r2, #8]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	d4cd      	bmi.n	80011b8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800121c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800121e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001220:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001224:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001226:	d1c7      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_ADC_ConfigChannel+0x100>)
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_ADC_ConfigChannel+0x104>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001232:	230a      	movs	r3, #10
 8001234:	4353      	muls	r3, r2
            wait_loop_index--;
 8001236:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001238:	9b01      	ldr	r3, [sp, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0bc      	beq.n	80011b8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800123e:	9b01      	ldr	r3, [sp, #4]
 8001240:	3b01      	subs	r3, #1
 8001242:	e7f8      	b.n	8001236 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001244:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e7b4      	b.n	80011ba <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001250:	2302      	movs	r3, #2
 8001252:	e7b5      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x68>
 8001254:	40012400 	.word	0x40012400
 8001258:	20000024 	.word	0x20000024
 800125c:	000f4240 	.word	0x000f4240

08001260 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001260:	2300      	movs	r3, #0
{
 8001262:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001264:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001266:	6803      	ldr	r3, [r0, #0]
{
 8001268:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	07d2      	lsls	r2, r2, #31
 800126e:	d502      	bpl.n	8001276 <ADC_Enable+0x16>
  return HAL_OK;
 8001270:	2000      	movs	r0, #0
}
 8001272:	b002      	add	sp, #8
 8001274:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	f042 0201 	orr.w	r2, r2, #1
 800127c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <ADC_Enable+0x68>)
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <ADC_Enable+0x6c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001288:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800128a:	9b01      	ldr	r3, [sp, #4]
 800128c:	b9c3      	cbnz	r3, 80012c0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800128e:	f7ff ff0f 	bl	80010b0 <HAL_GetTick>
 8001292:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	689d      	ldr	r5, [r3, #8]
 8001298:	f015 0501 	ands.w	r5, r5, #1
 800129c:	d1e8      	bne.n	8001270 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800129e:	f7ff ff07 	bl	80010b0 <HAL_GetTick>
 80012a2:	1b80      	subs	r0, r0, r6
 80012a4:	2802      	cmp	r0, #2
 80012a6:	d9f5      	bls.n	8001294 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80012aa:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80012b6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80012be:	e7d8      	b.n	8001272 <ADC_Enable+0x12>
      wait_loop_index--;
 80012c0:	9b01      	ldr	r3, [sp, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	e7e0      	b.n	8001288 <ADC_Enable+0x28>
 80012c6:	bf00      	nop
 80012c8:	20000024 	.word	0x20000024
 80012cc:	000f4240 	.word	0x000f4240

080012d0 <HAL_ADC_Start_DMA>:
{
 80012d0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80012d4:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <HAL_ADC_Start_DMA+0x108>)
 80012d8:	6802      	ldr	r2, [r0, #0]
{
 80012da:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012dc:	429a      	cmp	r2, r3
{
 80012de:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012e0:	d002      	beq.n	80012e8 <HAL_ADC_Start_DMA+0x18>
 80012e2:	493e      	ldr	r1, [pc, #248]	; (80013dc <HAL_ADC_Start_DMA+0x10c>)
 80012e4:	428a      	cmp	r2, r1
 80012e6:	d103      	bne.n	80012f0 <HAL_ADC_Start_DMA+0x20>
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80012ee:	d16e      	bne.n	80013ce <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80012f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d06c      	beq.n	80013d2 <HAL_ADC_Start_DMA+0x102>
 80012f8:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80012fa:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80012fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001300:	f7ff ffae 	bl	8001260 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001304:	4606      	mov	r6, r0
 8001306:	2800      	cmp	r0, #0
 8001308:	d15d      	bne.n	80013c6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800130a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800130c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800130e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001312:	4b32      	ldr	r3, [pc, #200]	; (80013dc <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001314:	f020 0001 	bic.w	r0, r0, #1
 8001318:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800131c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800131e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001320:	d104      	bne.n	800132c <HAL_ADC_Start_DMA+0x5c>
 8001322:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <HAL_ADC_Start_DMA+0x108>)
 8001324:	6853      	ldr	r3, [r2, #4]
 8001326:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800132a:	d13e      	bne.n	80013aa <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800132c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800132e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001332:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001334:	684b      	ldr	r3, [r1, #4]
 8001336:	055a      	lsls	r2, r3, #21
 8001338:	d505      	bpl.n	8001346 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800133a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800133c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001344:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001348:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800134a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134e:	bf18      	it	ne
 8001350:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001352:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001354:	bf18      	it	ne
 8001356:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800135a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800135c:	2300      	movs	r3, #0
 800135e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001364:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001366:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <HAL_ADC_Start_DMA+0x114>)
 800136a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_ADC_Start_DMA+0x118>)
 800136e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001370:	f06f 0302 	mvn.w	r3, #2
 8001374:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001378:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001384:	4643      	mov	r3, r8
 8001386:	f000 f96d 	bl	8001664 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001392:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	bf0c      	ite	eq
 800139a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800139e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80013a2:	609a      	str	r2, [r3, #8]
}
 80013a4:	4630      	mov	r0, r6
 80013a6:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013b0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013b2:	6853      	ldr	r3, [r2, #4]
 80013b4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013b6:	bf41      	itttt	mi
 80013b8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80013ba:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80013be:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80013c2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80013c4:	e7bf      	b.n	8001346 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80013c6:	2300      	movs	r3, #0
 80013c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80013cc:	e7ea      	b.n	80013a4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80013ce:	2601      	movs	r6, #1
 80013d0:	e7e8      	b.n	80013a4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80013d2:	2602      	movs	r6, #2
 80013d4:	e7e6      	b.n	80013a4 <HAL_ADC_Start_DMA+0xd4>
 80013d6:	bf00      	nop
 80013d8:	40012400 	.word	0x40012400
 80013dc:	40012800 	.word	0x40012800
 80013e0:	080010e3 	.word	0x080010e3
 80013e4:	08001133 	.word	0x08001133
 80013e8:	0800113f 	.word	0x0800113f

080013ec <ADC_ConversionStop_Disable>:
{
 80013ec:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013ee:	6803      	ldr	r3, [r0, #0]
{
 80013f0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	07d2      	lsls	r2, r2, #31
 80013f6:	d401      	bmi.n	80013fc <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80013f8:	2000      	movs	r0, #0
 80013fa:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001404:	f7ff fe54 	bl	80010b0 <HAL_GetTick>
 8001408:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	07db      	lsls	r3, r3, #31
 8001410:	d5f2      	bpl.n	80013f8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001412:	f7ff fe4d 	bl	80010b0 <HAL_GetTick>
 8001416:	1b40      	subs	r0, r0, r5
 8001418:	2802      	cmp	r0, #2
 800141a:	d9f6      	bls.n	800140a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001426:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800142e:	bd38      	pop	{r3, r4, r5, pc}

08001430 <HAL_ADC_Init>:
{
 8001430:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001432:	4604      	mov	r4, r0
 8001434:	2800      	cmp	r0, #0
 8001436:	d071      	beq.n	800151c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001438:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800143a:	b923      	cbnz	r3, 8001446 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800143c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800143e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001442:	f002 fb61 	bl	8003b08 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001446:	4620      	mov	r0, r4
 8001448:	f7ff ffd0 	bl	80013ec <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800144c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800144e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001454:	d164      	bne.n	8001520 <HAL_ADC_Init+0xf0>
 8001456:	2800      	cmp	r0, #0
 8001458:	d162      	bne.n	8001520 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800145a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001460:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	f023 0302 	bic.w	r3, r3, #2
 8001466:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800146a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800146c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800146e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001470:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001472:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001476:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800147a:	d038      	beq.n	80014ee <HAL_ADC_Init+0xbe>
 800147c:	2901      	cmp	r1, #1
 800147e:	bf14      	ite	ne
 8001480:	4606      	movne	r6, r0
 8001482:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001486:	7d25      	ldrb	r5, [r4, #20]
 8001488:	2d01      	cmp	r5, #1
 800148a:	d107      	bne.n	800149c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800148c:	2b00      	cmp	r3, #0
 800148e:	d130      	bne.n	80014f2 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001490:	69a3      	ldr	r3, [r4, #24]
 8001492:	3b01      	subs	r3, #1
 8001494:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001498:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800149c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800149e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80014a2:	685d      	ldr	r5, [r3, #4]
 80014a4:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80014a8:	ea45 0506 	orr.w	r5, r5, r6
 80014ac:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80014ae:	689e      	ldr	r6, [r3, #8]
 80014b0:	4d1d      	ldr	r5, [pc, #116]	; (8001528 <HAL_ADC_Init+0xf8>)
 80014b2:	ea05 0506 	and.w	r5, r5, r6
 80014b6:	ea45 0502 	orr.w	r5, r5, r2
 80014ba:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014bc:	d001      	beq.n	80014c2 <HAL_ADC_Init+0x92>
 80014be:	2901      	cmp	r1, #1
 80014c0:	d120      	bne.n	8001504 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014c2:	6921      	ldr	r1, [r4, #16]
 80014c4:	3901      	subs	r1, #1
 80014c6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80014c8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80014ca:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80014ce:	4329      	orrs	r1, r5
 80014d0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014d2:	6899      	ldr	r1, [r3, #8]
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_ADC_Init+0xfc>)
 80014d6:	400b      	ands	r3, r1
 80014d8:	429a      	cmp	r2, r3
 80014da:	d115      	bne.n	8001508 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80014dc:	2300      	movs	r3, #0
 80014de:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80014e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014e2:	f023 0303 	bic.w	r3, r3, #3
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80014ec:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014ee:	460e      	mov	r6, r1
 80014f0:	e7c9      	b.n	8001486 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001502:	e7cb      	b.n	800149c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001504:	2100      	movs	r1, #0
 8001506:	e7df      	b.n	80014c8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800150a:	f023 0312 	bic.w	r3, r3, #18
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800151c:	2001      	movs	r0, #1
}
 800151e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	62a3      	str	r3, [r4, #40]	; 0x28
 8001526:	e7f9      	b.n	800151c <HAL_ADC_Init+0xec>
 8001528:	ffe1f7fd 	.word	0xffe1f7fd
 800152c:	ff1f0efe 	.word	0xff1f0efe

08001530 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001532:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001536:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	0c1b      	lsrs	r3, r3, #16
 8001542:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800154a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800154c:	60d3      	str	r3, [r2, #12]
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b530      	push	{r4, r5, lr}
 8001558:	68dc      	ldr	r4, [r3, #12]
 800155a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	2b04      	cmp	r3, #4
 8001566:	bf28      	it	cs
 8001568:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001570:	bf98      	it	ls
 8001572:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	fa05 f303 	lsl.w	r3, r5, r3
 8001578:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157c:	bf88      	it	hi
 800157e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4019      	ands	r1, r3
 8001582:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	fa05 f404 	lsl.w	r4, r5, r4
 8001588:	3c01      	subs	r4, #1
 800158a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800158c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158e:	ea42 0201 	orr.w	r2, r2, r1
 8001592:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	bfa9      	itett	ge
 8001598:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	4b06      	ldrlt	r3, [pc, #24]	; (80015b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	b2d2      	uxtbge	r2, r2
 80015a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	bfbb      	ittet	lt
 80015a6:	f000 000f 	andlt.w	r0, r0, #15
 80015aa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	541a      	strblt	r2, [r3, r0]
 80015b2:	bd30      	pop	{r4, r5, pc}
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	e000ed14 	.word	0xe000ed14

080015bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015bc:	2800      	cmp	r0, #0
 80015be:	db08      	blt.n	80015d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c0:	2301      	movs	r3, #1
 80015c2:	0942      	lsrs	r2, r0, #5
 80015c4:	f000 001f 	and.w	r0, r0, #31
 80015c8:	fa03 f000 	lsl.w	r0, r3, r0
 80015cc:	4b01      	ldr	r3, [pc, #4]	; (80015d4 <HAL_NVIC_EnableIRQ+0x18>)
 80015ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	3801      	subs	r0, #1
 80015da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015de:	d20a      	bcs.n	80015f6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001604:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001606:	b330      	cbz	r0, 8001656 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001608:	2214      	movs	r2, #20
 800160a:	6801      	ldr	r1, [r0, #0]
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800160e:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001610:	440b      	add	r3, r1
 8001612:	fbb3 f3f2 	udiv	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 800161c:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800161e:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001620:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001622:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001626:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001628:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800162a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162e:	4323      	orrs	r3, r4
 8001630:	6904      	ldr	r4, [r0, #16]
 8001632:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001634:	6944      	ldr	r4, [r0, #20]
 8001636:	4323      	orrs	r3, r4
 8001638:	6984      	ldr	r4, [r0, #24]
 800163a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800163c:	69c4      	ldr	r4, [r0, #28]
 800163e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001640:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001642:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001644:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001646:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001648:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800164e:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001652:	4618      	mov	r0, r3
 8001654:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001656:	2001      	movs	r0, #1
}
 8001658:	bd10      	pop	{r4, pc}
 800165a:	bf00      	nop
 800165c:	bffdfff8 	.word	0xbffdfff8
 8001660:	40020000 	.word	0x40020000

08001664 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001666:	f890 4020 	ldrb.w	r4, [r0, #32]
 800166a:	2c01      	cmp	r4, #1
 800166c:	d035      	beq.n	80016da <HAL_DMA_Start_IT+0x76>
 800166e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001670:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001674:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001678:	42a5      	cmp	r5, r4
 800167a:	f04f 0600 	mov.w	r6, #0
 800167e:	f04f 0402 	mov.w	r4, #2
 8001682:	d128      	bne.n	80016d6 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001684:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001688:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800168c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800168e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001690:	f026 0601 	bic.w	r6, r6, #1
 8001694:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001696:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001698:	40bd      	lsls	r5, r7
 800169a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800169c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800169e:	6843      	ldr	r3, [r0, #4]
 80016a0:	6805      	ldr	r5, [r0, #0]
 80016a2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80016a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016a6:	bf0b      	itete	eq
 80016a8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80016aa:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80016ac:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80016ae:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80016b0:	b14b      	cbz	r3, 80016c6 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016b8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80016ba:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016bc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	602b      	str	r3, [r5, #0]
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	f043 030a 	orr.w	r3, r3, #10
 80016d4:	e7f0      	b.n	80016b8 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80016d6:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80016da:	2002      	movs	r0, #2
}
 80016dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016e0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80016e4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d003      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ea:	2304      	movs	r3, #4
 80016ec:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80016ee:	2001      	movs	r0, #1
 80016f0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f2:	6803      	ldr	r3, [r0, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	f022 020e 	bic.w	r2, r2, #14
 80016fa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_DMA_Abort_IT+0x88>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01f      	beq.n	800174a <HAL_DMA_Abort_IT+0x6a>
 800170a:	3214      	adds	r2, #20
 800170c:	4293      	cmp	r3, r2
 800170e:	d01e      	beq.n	800174e <HAL_DMA_Abort_IT+0x6e>
 8001710:	3214      	adds	r2, #20
 8001712:	4293      	cmp	r3, r2
 8001714:	d01d      	beq.n	8001752 <HAL_DMA_Abort_IT+0x72>
 8001716:	3214      	adds	r2, #20
 8001718:	4293      	cmp	r3, r2
 800171a:	d01d      	beq.n	8001758 <HAL_DMA_Abort_IT+0x78>
 800171c:	3214      	adds	r2, #20
 800171e:	4293      	cmp	r3, r2
 8001720:	d01d      	beq.n	800175e <HAL_DMA_Abort_IT+0x7e>
 8001722:	3214      	adds	r2, #20
 8001724:	4293      	cmp	r3, r2
 8001726:	bf0c      	ite	eq
 8001728:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800172c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001732:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001734:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001736:	2301      	movs	r3, #1
 8001738:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 800173c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800173e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001742:	b17b      	cbz	r3, 8001764 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001744:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001746:	4620      	mov	r0, r4
 8001748:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800174a:	2301      	movs	r3, #1
 800174c:	e7f0      	b.n	8001730 <HAL_DMA_Abort_IT+0x50>
 800174e:	2310      	movs	r3, #16
 8001750:	e7ee      	b.n	8001730 <HAL_DMA_Abort_IT+0x50>
 8001752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001756:	e7eb      	b.n	8001730 <HAL_DMA_Abort_IT+0x50>
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	e7e8      	b.n	8001730 <HAL_DMA_Abort_IT+0x50>
 800175e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001762:	e7e5      	b.n	8001730 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001764:	4618      	mov	r0, r3
}
 8001766:	bd10      	pop	{r4, pc}
 8001768:	40020008 	.word	0x40020008
 800176c:	40020000 	.word	0x40020000

08001770 <HAL_DMA_IRQHandler>:
{
 8001770:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001772:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001774:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001776:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001778:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800177a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800177c:	4095      	lsls	r5, r2
 800177e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001780:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001782:	d032      	beq.n	80017ea <HAL_DMA_IRQHandler+0x7a>
 8001784:	074d      	lsls	r5, r1, #29
 8001786:	d530      	bpl.n	80017ea <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800178c:	bf5e      	ittt	pl
 800178e:	681a      	ldrpl	r2, [r3, #0]
 8001790:	f022 0204 	bicpl.w	r2, r2, #4
 8001794:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001796:	4a3e      	ldr	r2, [pc, #248]	; (8001890 <HAL_DMA_IRQHandler+0x120>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d019      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x60>
 800179c:	3214      	adds	r2, #20
 800179e:	4293      	cmp	r3, r2
 80017a0:	d018      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x64>
 80017a2:	3214      	adds	r2, #20
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d017      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x68>
 80017a8:	3214      	adds	r2, #20
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d017      	beq.n	80017de <HAL_DMA_IRQHandler+0x6e>
 80017ae:	3214      	adds	r2, #20
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d017      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x74>
 80017b4:	3214      	adds	r2, #20
 80017b6:	4293      	cmp	r3, r2
 80017b8:	bf0c      	ite	eq
 80017ba:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80017be:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80017c2:	4a34      	ldr	r2, [pc, #208]	; (8001894 <HAL_DMA_IRQHandler+0x124>)
 80017c4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80017c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d05e      	beq.n	800188a <HAL_DMA_IRQHandler+0x11a>
}
 80017cc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80017ce:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017d0:	2304      	movs	r3, #4
 80017d2:	e7f6      	b.n	80017c2 <HAL_DMA_IRQHandler+0x52>
 80017d4:	2340      	movs	r3, #64	; 0x40
 80017d6:	e7f4      	b.n	80017c2 <HAL_DMA_IRQHandler+0x52>
 80017d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017dc:	e7f1      	b.n	80017c2 <HAL_DMA_IRQHandler+0x52>
 80017de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017e2:	e7ee      	b.n	80017c2 <HAL_DMA_IRQHandler+0x52>
 80017e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017e8:	e7eb      	b.n	80017c2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017ea:	2502      	movs	r5, #2
 80017ec:	4095      	lsls	r5, r2
 80017ee:	4225      	tst	r5, r4
 80017f0:	d035      	beq.n	800185e <HAL_DMA_IRQHandler+0xee>
 80017f2:	078d      	lsls	r5, r1, #30
 80017f4:	d533      	bpl.n	800185e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	0694      	lsls	r4, r2, #26
 80017fa:	d406      	bmi.n	800180a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f022 020a 	bic.w	r2, r2, #10
 8001802:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001804:	2201      	movs	r2, #1
 8001806:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <HAL_DMA_IRQHandler+0x120>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d019      	beq.n	8001844 <HAL_DMA_IRQHandler+0xd4>
 8001810:	3214      	adds	r2, #20
 8001812:	4293      	cmp	r3, r2
 8001814:	d018      	beq.n	8001848 <HAL_DMA_IRQHandler+0xd8>
 8001816:	3214      	adds	r2, #20
 8001818:	4293      	cmp	r3, r2
 800181a:	d017      	beq.n	800184c <HAL_DMA_IRQHandler+0xdc>
 800181c:	3214      	adds	r2, #20
 800181e:	4293      	cmp	r3, r2
 8001820:	d017      	beq.n	8001852 <HAL_DMA_IRQHandler+0xe2>
 8001822:	3214      	adds	r2, #20
 8001824:	4293      	cmp	r3, r2
 8001826:	d017      	beq.n	8001858 <HAL_DMA_IRQHandler+0xe8>
 8001828:	3214      	adds	r2, #20
 800182a:	4293      	cmp	r3, r2
 800182c:	bf0c      	ite	eq
 800182e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001832:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001836:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_DMA_IRQHandler+0x124>)
 8001838:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800183a:	2300      	movs	r3, #0
 800183c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001840:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001842:	e7c1      	b.n	80017c8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001844:	2302      	movs	r3, #2
 8001846:	e7f6      	b.n	8001836 <HAL_DMA_IRQHandler+0xc6>
 8001848:	2320      	movs	r3, #32
 800184a:	e7f4      	b.n	8001836 <HAL_DMA_IRQHandler+0xc6>
 800184c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001850:	e7f1      	b.n	8001836 <HAL_DMA_IRQHandler+0xc6>
 8001852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001856:	e7ee      	b.n	8001836 <HAL_DMA_IRQHandler+0xc6>
 8001858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800185c:	e7eb      	b.n	8001836 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800185e:	2508      	movs	r5, #8
 8001860:	4095      	lsls	r5, r2
 8001862:	4225      	tst	r5, r4
 8001864:	d011      	beq.n	800188a <HAL_DMA_IRQHandler+0x11a>
 8001866:	0709      	lsls	r1, r1, #28
 8001868:	d50f      	bpl.n	800188a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186a:	6819      	ldr	r1, [r3, #0]
 800186c:	f021 010e 	bic.w	r1, r1, #14
 8001870:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001872:	2301      	movs	r3, #1
 8001874:	fa03 f202 	lsl.w	r2, r3, r2
 8001878:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800187a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800187c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001880:	2300      	movs	r3, #0
 8001882:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001886:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001888:	e79e      	b.n	80017c8 <HAL_DMA_IRQHandler+0x58>
}
 800188a:	bc70      	pop	{r4, r5, r6}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40020008 	.word	0x40020008
 8001894:	40020000 	.word	0x40020000

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800189c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800189e:	4626      	mov	r6, r4
 80018a0:	4b66      	ldr	r3, [pc, #408]	; (8001a3c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001a4c <HAL_GPIO_Init+0x1b4>
 80018a6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001a50 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	680a      	ldr	r2, [r1, #0]
 80018ac:	fa32 f506 	lsrs.w	r5, r2, r6
 80018b0:	d102      	bne.n	80018b8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80018b2:	b003      	add	sp, #12
 80018b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80018b8:	f04f 0801 	mov.w	r8, #1
 80018bc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80018c4:	4590      	cmp	r8, r2
 80018c6:	d17f      	bne.n	80019c8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80018c8:	684d      	ldr	r5, [r1, #4]
 80018ca:	2d12      	cmp	r5, #18
 80018cc:	f000 80aa 	beq.w	8001a24 <HAL_GPIO_Init+0x18c>
 80018d0:	f200 8083 	bhi.w	80019da <HAL_GPIO_Init+0x142>
 80018d4:	2d02      	cmp	r5, #2
 80018d6:	f000 80a2 	beq.w	8001a1e <HAL_GPIO_Init+0x186>
 80018da:	d877      	bhi.n	80019cc <HAL_GPIO_Init+0x134>
 80018dc:	2d00      	cmp	r5, #0
 80018de:	f000 8089 	beq.w	80019f4 <HAL_GPIO_Init+0x15c>
 80018e2:	2d01      	cmp	r5, #1
 80018e4:	f000 8099 	beq.w	8001a1a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ec:	2aff      	cmp	r2, #255	; 0xff
 80018ee:	bf93      	iteet	ls
 80018f0:	4682      	movls	sl, r0
 80018f2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80018f6:	3d08      	subhi	r5, #8
 80018f8:	f8d0 b000 	ldrls.w	fp, [r0]
 80018fc:	bf92      	itee	ls
 80018fe:	00b5      	lslls	r5, r6, #2
 8001900:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001904:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001906:	fa09 f805 	lsl.w	r8, r9, r5
 800190a:	ea2b 0808 	bic.w	r8, fp, r8
 800190e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001912:	bf88      	it	hi
 8001914:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001918:	ea48 0505 	orr.w	r5, r8, r5
 800191c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001920:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001924:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001928:	d04e      	beq.n	80019c8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800192a:	4d45      	ldr	r5, [pc, #276]	; (8001a40 <HAL_GPIO_Init+0x1a8>)
 800192c:	4f44      	ldr	r7, [pc, #272]	; (8001a40 <HAL_GPIO_Init+0x1a8>)
 800192e:	69ad      	ldr	r5, [r5, #24]
 8001930:	f026 0803 	bic.w	r8, r6, #3
 8001934:	f045 0501 	orr.w	r5, r5, #1
 8001938:	61bd      	str	r5, [r7, #24]
 800193a:	69bd      	ldr	r5, [r7, #24]
 800193c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001940:	f005 0501 	and.w	r5, r5, #1
 8001944:	9501      	str	r5, [sp, #4]
 8001946:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800194e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001950:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001954:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001958:	fa09 f90b 	lsl.w	r9, r9, fp
 800195c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001960:	4d38      	ldr	r5, [pc, #224]	; (8001a44 <HAL_GPIO_Init+0x1ac>)
 8001962:	42a8      	cmp	r0, r5
 8001964:	d063      	beq.n	8001a2e <HAL_GPIO_Init+0x196>
 8001966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196a:	42a8      	cmp	r0, r5
 800196c:	d061      	beq.n	8001a32 <HAL_GPIO_Init+0x19a>
 800196e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001972:	42a8      	cmp	r0, r5
 8001974:	d05f      	beq.n	8001a36 <HAL_GPIO_Init+0x19e>
 8001976:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800197a:	42a8      	cmp	r0, r5
 800197c:	bf0c      	ite	eq
 800197e:	2503      	moveq	r5, #3
 8001980:	2504      	movne	r5, #4
 8001982:	fa05 f50b 	lsl.w	r5, r5, fp
 8001986:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800198a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800198e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001990:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001994:	bf14      	ite	ne
 8001996:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001998:	4395      	biceq	r5, r2
 800199a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800199c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80019a2:	bf14      	ite	ne
 80019a4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a6:	4395      	biceq	r5, r2
 80019a8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80019aa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b0:	bf14      	ite	ne
 80019b2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019b4:	4395      	biceq	r5, r2
 80019b6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ba:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80019be:	bf14      	ite	ne
 80019c0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c2:	ea25 0202 	biceq.w	r2, r5, r2
 80019c6:	60da      	str	r2, [r3, #12]
	position++;
 80019c8:	3601      	adds	r6, #1
 80019ca:	e76e      	b.n	80018aa <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80019cc:	2d03      	cmp	r5, #3
 80019ce:	d022      	beq.n	8001a16 <HAL_GPIO_Init+0x17e>
 80019d0:	2d11      	cmp	r5, #17
 80019d2:	d189      	bne.n	80018e8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d4:	68cc      	ldr	r4, [r1, #12]
 80019d6:	3404      	adds	r4, #4
          break;
 80019d8:	e786      	b.n	80018e8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80019da:	4f1b      	ldr	r7, [pc, #108]	; (8001a48 <HAL_GPIO_Init+0x1b0>)
 80019dc:	42bd      	cmp	r5, r7
 80019de:	d009      	beq.n	80019f4 <HAL_GPIO_Init+0x15c>
 80019e0:	d812      	bhi.n	8001a08 <HAL_GPIO_Init+0x170>
 80019e2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001a54 <HAL_GPIO_Init+0x1bc>
 80019e6:	454d      	cmp	r5, r9
 80019e8:	d004      	beq.n	80019f4 <HAL_GPIO_Init+0x15c>
 80019ea:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80019ee:	454d      	cmp	r5, r9
 80019f0:	f47f af7a 	bne.w	80018e8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f4:	688c      	ldr	r4, [r1, #8]
 80019f6:	b1c4      	cbz	r4, 8001a2a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80019fa:	bf0c      	ite	eq
 80019fc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001a00:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a04:	2408      	movs	r4, #8
 8001a06:	e76f      	b.n	80018e8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001a08:	4575      	cmp	r5, lr
 8001a0a:	d0f3      	beq.n	80019f4 <HAL_GPIO_Init+0x15c>
 8001a0c:	4565      	cmp	r5, ip
 8001a0e:	d0f1      	beq.n	80019f4 <HAL_GPIO_Init+0x15c>
 8001a10:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001a58 <HAL_GPIO_Init+0x1c0>
 8001a14:	e7eb      	b.n	80019ee <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a16:	2400      	movs	r4, #0
 8001a18:	e766      	b.n	80018e8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a1a:	68cc      	ldr	r4, [r1, #12]
          break;
 8001a1c:	e764      	b.n	80018e8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a1e:	68cc      	ldr	r4, [r1, #12]
 8001a20:	3408      	adds	r4, #8
          break;
 8001a22:	e761      	b.n	80018e8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a24:	68cc      	ldr	r4, [r1, #12]
 8001a26:	340c      	adds	r4, #12
          break;
 8001a28:	e75e      	b.n	80018e8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a2a:	2404      	movs	r4, #4
 8001a2c:	e75c      	b.n	80018e8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a2e:	2500      	movs	r5, #0
 8001a30:	e7a7      	b.n	8001982 <HAL_GPIO_Init+0xea>
 8001a32:	2501      	movs	r5, #1
 8001a34:	e7a5      	b.n	8001982 <HAL_GPIO_Init+0xea>
 8001a36:	2502      	movs	r5, #2
 8001a38:	e7a3      	b.n	8001982 <HAL_GPIO_Init+0xea>
 8001a3a:	bf00      	nop
 8001a3c:	40010400 	.word	0x40010400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010800 	.word	0x40010800
 8001a48:	10210000 	.word	0x10210000
 8001a4c:	10310000 	.word	0x10310000
 8001a50:	10320000 	.word	0x10320000
 8001a54:	10110000 	.word	0x10110000
 8001a58:	10220000 	.word	0x10220000

08001a5c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a5c:	6801      	ldr	r1, [r0, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	694b      	ldr	r3, [r1, #20]
 8001a62:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001a66:	d010      	beq.n	8001a8a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a68:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001a6c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a6e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a70:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a76:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a7a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001a86:	2001      	movs	r0, #1
 8001a88:	4770      	bx	lr
  }
  return HAL_OK;
 8001a8a:	4618      	mov	r0, r3
}
 8001a8c:	4770      	bx	lr

08001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001a8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a92:	4604      	mov	r4, r0
 8001a94:	4617      	mov	r7, r2
 8001a96:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a98:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001a9c:	b28e      	uxth	r6, r1
 8001a9e:	6825      	ldr	r5, [r4, #0]
 8001aa0:	f1b8 0f01 	cmp.w	r8, #1
 8001aa4:	bf0c      	ite	eq
 8001aa6:	696b      	ldreq	r3, [r5, #20]
 8001aa8:	69ab      	ldrne	r3, [r5, #24]
 8001aaa:	ea36 0303 	bics.w	r3, r6, r3
 8001aae:	bf14      	ite	ne
 8001ab0:	2001      	movne	r0, #1
 8001ab2:	2000      	moveq	r0, #0
 8001ab4:	b908      	cbnz	r0, 8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aba:	696b      	ldr	r3, [r5, #20]
 8001abc:	055a      	lsls	r2, r3, #21
 8001abe:	d516      	bpl.n	8001aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac0:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ac2:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aca:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001ace:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ad4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001adc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ade:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001ae4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001ae8:	2001      	movs	r0, #1
 8001aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001aee:	1c7b      	adds	r3, r7, #1
 8001af0:	d0d5      	beq.n	8001a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af2:	f7ff fadd 	bl	80010b0 <HAL_GetTick>
 8001af6:	eba0 0009 	sub.w	r0, r0, r9
 8001afa:	4287      	cmp	r7, r0
 8001afc:	d301      	bcc.n	8001b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8001afe:	2f00      	cmp	r7, #0
 8001b00:	d1cd      	bne.n	8001a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b02:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b04:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b06:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b12:	f042 0220 	orr.w	r2, r2, #32
 8001b16:	e7e4      	b.n	8001ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08001b18 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	460d      	mov	r5, r1
 8001b1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	075b      	lsls	r3, r3, #29
 8001b26:	d501      	bpl.n	8001b2c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b28:	2000      	movs	r0, #0
 8001b2a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff ff95 	bl	8001a5c <I2C_IsAcknowledgeFailed>
 8001b32:	b9a8      	cbnz	r0, 8001b60 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001b34:	1c6a      	adds	r2, r5, #1
 8001b36:	d0f3      	beq.n	8001b20 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b38:	f7ff faba 	bl	80010b0 <HAL_GetTick>
 8001b3c:	1b80      	subs	r0, r0, r6
 8001b3e:	4285      	cmp	r5, r0
 8001b40:	d301      	bcc.n	8001b46 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001b42:	2d00      	cmp	r5, #0
 8001b44:	d1ec      	bne.n	8001b20 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b46:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b48:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b4a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b54:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001b60:	2001      	movs	r0, #1
}
 8001b62:	bd70      	pop	{r4, r5, r6, pc}

08001b64 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	4604      	mov	r4, r0
 8001b68:	460d      	mov	r5, r1
 8001b6a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b6c:	6820      	ldr	r0, [r4, #0]
 8001b6e:	6943      	ldr	r3, [r0, #20]
 8001b70:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001b74:	d001      	beq.n	8001b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001b76:	2000      	movs	r0, #0
}
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b7a:	6942      	ldr	r2, [r0, #20]
 8001b7c:	06d2      	lsls	r2, r2, #27
 8001b7e:	d50e      	bpl.n	8001b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b80:	f06f 0210 	mvn.w	r2, #16
 8001b84:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b86:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b88:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001b92:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b94:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9e:	f7ff fa87 	bl	80010b0 <HAL_GetTick>
 8001ba2:	1b80      	subs	r0, r0, r6
 8001ba4:	42a8      	cmp	r0, r5
 8001ba6:	d801      	bhi.n	8001bac <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001ba8:	2d00      	cmp	r5, #0
 8001baa:	d1df      	bne.n	8001b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bac:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bae:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bb0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001bbc:	f042 0220 	orr.w	r2, r2, #32
 8001bc0:	e7e8      	b.n	8001b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001bc2 <I2C_WaitOnFlagUntilTimeout>:
{
 8001bc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4690      	mov	r8, r2
 8001bca:	461f      	mov	r7, r3
 8001bcc:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bce:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001bd2:	b28d      	uxth	r5, r1
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	f1b9 0f01 	cmp.w	r9, #1
 8001bda:	bf0c      	ite	eq
 8001bdc:	695b      	ldreq	r3, [r3, #20]
 8001bde:	699b      	ldrne	r3, [r3, #24]
 8001be0:	ea35 0303 	bics.w	r3, r5, r3
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	4543      	cmp	r3, r8
 8001bec:	d002      	beq.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001bee:	2000      	movs	r0, #0
}
 8001bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001bf4:	1c7b      	adds	r3, r7, #1
 8001bf6:	d0ed      	beq.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf8:	f7ff fa5a 	bl	80010b0 <HAL_GetTick>
 8001bfc:	1b80      	subs	r0, r0, r6
 8001bfe:	4287      	cmp	r7, r0
 8001c00:	d301      	bcc.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c02:	2f00      	cmp	r7, #0
 8001c04:	d1e6      	bne.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c06:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c08:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c14:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c1a:	f042 0220 	orr.w	r2, r2, #32
 8001c1e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c20:	2001      	movs	r0, #1
 8001c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c26 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001c26:	b570      	push	{r4, r5, r6, lr}
 8001c28:	4604      	mov	r4, r0
 8001c2a:	460d      	mov	r5, r1
 8001c2c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	061b      	lsls	r3, r3, #24
 8001c34:	d501      	bpl.n	8001c3a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
 8001c38:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff ff0e 	bl	8001a5c <I2C_IsAcknowledgeFailed>
 8001c40:	b9a8      	cbnz	r0, 8001c6e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001c42:	1c6a      	adds	r2, r5, #1
 8001c44:	d0f3      	beq.n	8001c2e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c46:	f7ff fa33 	bl	80010b0 <HAL_GetTick>
 8001c4a:	1b80      	subs	r0, r0, r6
 8001c4c:	4285      	cmp	r5, r0
 8001c4e:	d301      	bcc.n	8001c54 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001c50:	2d00      	cmp	r5, #0
 8001c52:	d1ec      	bne.n	8001c2e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c54:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c56:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c58:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c62:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c68:	f042 0220 	orr.w	r2, r2, #32
 8001c6c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c6e:	2001      	movs	r0, #1
}
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08001c74 <HAL_I2C_Init>:
{
 8001c74:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001c76:	4604      	mov	r4, r0
 8001c78:	b908      	cbnz	r0, 8001c7e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c86:	b91b      	cbnz	r3, 8001c90 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001c88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c8c:	f001 ffe0 	bl	8003c50 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c90:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001c92:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca0:	f000 fdf4 	bl	800288c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ca4:	6865      	ldr	r5, [r4, #4]
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_I2C_Init+0x138>)
 8001ca8:	429d      	cmp	r5, r3
 8001caa:	d84d      	bhi.n	8001d48 <HAL_I2C_Init+0xd4>
 8001cac:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <HAL_I2C_Init+0x13c>)
 8001cae:	4298      	cmp	r0, r3
 8001cb0:	d9e3      	bls.n	8001c7a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001cb2:	4940      	ldr	r1, [pc, #256]	; (8001db4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001cb6:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cba:	6853      	ldr	r3, [r2, #4]
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cc4:	6a13      	ldr	r3, [r2, #32]
 8001cc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cca:	3101      	adds	r1, #1
 8001ccc:	4319      	orrs	r1, r3
 8001cce:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cd0:	69d1      	ldr	r1, [r2, #28]
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_I2C_Init+0x138>)
 8001cd4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001cd8:	429d      	cmp	r5, r3
 8001cda:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cde:	f100 30ff 	add.w	r0, r0, #4294967295
 8001ce2:	d848      	bhi.n	8001d76 <HAL_I2C_Init+0x102>
 8001ce4:	006d      	lsls	r5, r5, #1
 8001ce6:	fbb0 f0f5 	udiv	r0, r0, r5
 8001cea:	3001      	adds	r0, #1
 8001cec:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	bf38      	it	cc
 8001cf4:	2304      	movcc	r3, #4
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cfa:	6811      	ldr	r1, [r2, #0]
 8001cfc:	6a20      	ldr	r0, [r4, #32]
 8001cfe:	69e3      	ldr	r3, [r4, #28]
 8001d00:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001d04:	4303      	orrs	r3, r0
 8001d06:	430b      	orrs	r3, r1
 8001d08:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d0a:	6891      	ldr	r1, [r2, #8]
 8001d0c:	68e0      	ldr	r0, [r4, #12]
 8001d0e:	6923      	ldr	r3, [r4, #16]
 8001d10:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001d14:	4303      	orrs	r3, r0
 8001d16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d1e:	68d1      	ldr	r1, [r2, #12]
 8001d20:	69a0      	ldr	r0, [r4, #24]
 8001d22:	6963      	ldr	r3, [r4, #20]
 8001d24:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001d28:	4303      	orrs	r3, r0
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d2e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001d38:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d40:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d42:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001d46:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_I2C_Init+0x144>)
 8001d4a:	4298      	cmp	r0, r3
 8001d4c:	d995      	bls.n	8001c7a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001d4e:	4e19      	ldr	r6, [pc, #100]	; (8001db4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d50:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001d54:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d58:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d5a:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d5c:	6853      	ldr	r3, [r2, #4]
 8001d5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d62:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d64:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d68:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d6a:	6a13      	ldr	r3, [r2, #32]
 8001d6c:	fbb1 f1f6 	udiv	r1, r1, r6
 8001d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d74:	e7a9      	b.n	8001cca <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d76:	68a3      	ldr	r3, [r4, #8]
 8001d78:	b953      	cbnz	r3, 8001d90 <HAL_I2C_Init+0x11c>
 8001d7a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001d7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d82:	1c43      	adds	r3, r0, #1
 8001d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d88:	b16b      	cbz	r3, 8001da6 <HAL_I2C_Init+0x132>
 8001d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8e:	e7b2      	b.n	8001cf6 <HAL_I2C_Init+0x82>
 8001d90:	2319      	movs	r3, #25
 8001d92:	436b      	muls	r3, r5
 8001d94:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d98:	1c43      	adds	r3, r0, #1
 8001d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9e:	b113      	cbz	r3, 8001da6 <HAL_I2C_Init+0x132>
 8001da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da4:	e7a7      	b.n	8001cf6 <HAL_I2C_Init+0x82>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e7a5      	b.n	8001cf6 <HAL_I2C_Init+0x82>
 8001daa:	bf00      	nop
 8001dac:	000186a0 	.word	0x000186a0
 8001db0:	001e847f 	.word	0x001e847f
 8001db4:	000f4240 	.word	0x000f4240
 8001db8:	003d08ff 	.word	0x003d08ff

08001dbc <HAL_I2C_Master_Transmit>:
{
 8001dbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	461f      	mov	r7, r3
 8001dc4:	460d      	mov	r5, r1
 8001dc6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff f972 	bl	80010b0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dcc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d004      	beq.n	8001de0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001dd6:	2502      	movs	r5, #2
}
 8001dd8:	4628      	mov	r0, r5
 8001dda:	b004      	add	sp, #16
 8001ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de0:	9000      	str	r0, [sp, #0]
 8001de2:	2319      	movs	r3, #25
 8001de4:	2201      	movs	r2, #1
 8001de6:	4958      	ldr	r1, [pc, #352]	; (8001f48 <HAL_I2C_Master_Transmit+0x18c>)
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff feea 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d1f1      	bne.n	8001dd6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001df2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d0ed      	beq.n	8001dd6 <HAL_I2C_Master_Transmit+0x1a>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001e06:	bf5e      	ittt	pl
 8001e08:	681a      	ldrpl	r2, [r3, #0]
 8001e0a:	f042 0201 	orrpl.w	r2, r2, #1
 8001e0e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e16:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e18:	2221      	movs	r2, #33	; 0x21
 8001e1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e1e:	2210      	movs	r2, #16
 8001e20:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e24:	2200      	movs	r2, #0
 8001e26:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001e28:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001e2c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001e30:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e32:	4a46      	ldr	r2, [pc, #280]	; (8001f4c <HAL_I2C_Master_Transmit+0x190>)
 8001e34:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e38:	2a08      	cmp	r2, #8
 8001e3a:	d004      	beq.n	8001e46 <HAL_I2C_Master_Transmit+0x8a>
 8001e3c:	2a01      	cmp	r2, #1
 8001e3e:	d002      	beq.n	8001e46 <HAL_I2C_Master_Transmit+0x8a>
 8001e40:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e44:	d104      	bne.n	8001e50 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e002      	b.n	8001e56 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e52:	2a12      	cmp	r2, #18
 8001e54:	d0f7      	beq.n	8001e46 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e56:	9600      	str	r6, [sp, #0]
 8001e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff feae 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 8001e66:	b108      	cbz	r0, 8001e6c <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8001e68:	2501      	movs	r5, #1
 8001e6a:	e7b5      	b.n	8001dd8 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e6c:	6923      	ldr	r3, [r4, #16]
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e74:	d113      	bne.n	8001e9e <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e76:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001e7a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e7c:	4633      	mov	r3, r6
 8001e7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e80:	4933      	ldr	r1, [pc, #204]	; (8001f50 <HAL_I2C_Master_Transmit+0x194>)
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7ff fe03 	bl	8001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e88:	4605      	mov	r5, r0
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d1ec      	bne.n	8001e68 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	9003      	str	r0, [sp, #12]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	9203      	str	r2, [sp, #12]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	9303      	str	r3, [sp, #12]
 8001e9a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001e9c:	e044      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e9e:	11eb      	asrs	r3, r5, #7
 8001ea0:	f003 0306 	and.w	r3, r3, #6
 8001ea4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001ea8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001eaa:	492a      	ldr	r1, [pc, #168]	; (8001f54 <HAL_I2C_Master_Transmit+0x198>)
 8001eac:	4633      	mov	r3, r6
 8001eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f7ff fdec 	bl	8001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	d1d6      	bne.n	8001e68 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	b2ed      	uxtb	r5, r5
 8001ebe:	611d      	str	r5, [r3, #16]
 8001ec0:	e7dc      	b.n	8001e7c <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec2:	4632      	mov	r2, r6
 8001ec4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7ff fead 	bl	8001c26 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ecc:	b140      	cbz	r0, 8001ee0 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed0:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed2:	bf01      	itttt	eq
 8001ed4:	6822      	ldreq	r2, [r4, #0]
 8001ed6:	6813      	ldreq	r3, [r2, #0]
 8001ed8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001edc:	6013      	streq	r3, [r2, #0]
 8001ede:	e7c3      	b.n	8001e68 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ee2:	6820      	ldr	r0, [r4, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001eea:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001eec:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001eee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	b292      	uxth	r2, r2
 8001ef4:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ef6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ef8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001efa:	1e51      	subs	r1, r2, #1
 8001efc:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001efe:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001f00:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f02:	d50a      	bpl.n	8001f1a <HAL_I2C_Master_Transmit+0x15e>
 8001f04:	b149      	cbz	r1, 8001f1a <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f06:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8001f08:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f0a:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001f0c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001f0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001f10:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001f18:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1a:	4632      	mov	r2, r6
 8001f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fdfa 	bl	8001b18 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d1d2      	bne.n	8001ece <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8001f28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1c9      	bne.n	8001ec2 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2e:	6821      	ldr	r1, [r4, #0]
 8001f30:	680a      	ldr	r2, [r1, #0]
 8001f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f36:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f38:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001f3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001f46:	e747      	b.n	8001dd8 <HAL_I2C_Master_Transmit+0x1c>
 8001f48:	00100002 	.word	0x00100002
 8001f4c:	ffff0000 	.word	0xffff0000
 8001f50:	00010002 	.word	0x00010002
 8001f54:	00010008 	.word	0x00010008

08001f58 <HAL_I2C_Master_Receive>:
{
 8001f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	4698      	mov	r8, r3
 8001f62:	460f      	mov	r7, r1
 8001f64:	4691      	mov	r9, r2
 8001f66:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff f8a2 	bl	80010b0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001f70:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d004      	beq.n	8001f80 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001f76:	2702      	movs	r7, #2
}
 8001f78:	4638      	mov	r0, r7
 8001f7a:	b009      	add	sp, #36	; 0x24
 8001f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f80:	9000      	str	r0, [sp, #0]
 8001f82:	2319      	movs	r3, #25
 8001f84:	2201      	movs	r2, #1
 8001f86:	499c      	ldr	r1, [pc, #624]	; (80021f8 <HAL_I2C_Master_Receive+0x2a0>)
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff fe1a 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d1f1      	bne.n	8001f76 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001f92:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d0ed      	beq.n	8001f76 <HAL_I2C_Master_Receive+0x1e>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001fa6:	bf5e      	ittt	pl
 8001fa8:	681a      	ldrpl	r2, [r3, #0]
 8001faa:	f042 0201 	orrpl.w	r2, r2, #1
 8001fae:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fb8:	2222      	movs	r2, #34	; 0x22
 8001fba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001fc8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fcc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001fce:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001fd2:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd4:	4a89      	ldr	r2, [pc, #548]	; (80021fc <HAL_I2C_Master_Receive+0x2a4>)
 8001fd6:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fda:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fdc:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fde:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001fe2:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fe4:	d004      	beq.n	8001ff0 <HAL_I2C_Master_Receive+0x98>
 8001fe6:	2a01      	cmp	r2, #1
 8001fe8:	d002      	beq.n	8001ff0 <HAL_I2C_Master_Receive+0x98>
 8001fea:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001fee:	d104      	bne.n	8001ffa <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e002      	b.n	8002000 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ffa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ffc:	2a11      	cmp	r2, #17
 8001ffe:	d0f7      	beq.n	8001ff0 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002000:	9500      	str	r5, [sp, #0]
 8002002:	4633      	mov	r3, r6
 8002004:	2200      	movs	r2, #0
 8002006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff fdd9 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 8002010:	b108      	cbz	r0, 8002016 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8002012:	2701      	movs	r7, #1
 8002014:	e7b0      	b.n	8001f78 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002016:	6923      	ldr	r3, [r4, #16]
 8002018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	d143      	bne.n	80020a8 <HAL_I2C_Master_Receive+0x150>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002020:	f047 0701 	orr.w	r7, r7, #1
 8002024:	b2ff      	uxtb	r7, r7
 8002026:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002028:	462b      	mov	r3, r5
 800202a:	4632      	mov	r2, r6
 800202c:	4974      	ldr	r1, [pc, #464]	; (8002200 <HAL_I2C_Master_Receive+0x2a8>)
 800202e:	4620      	mov	r0, r4
 8002030:	f7ff fd2d 	bl	8001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002034:	4607      	mov	r7, r0
 8002036:	2800      	cmp	r0, #0
 8002038:	d1eb      	bne.n	8002012 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 800203a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	2a00      	cmp	r2, #0
 8002040:	d066      	beq.n	8002110 <HAL_I2C_Master_Receive+0x1b8>
    else if (hi2c->XferSize == 1U)
 8002042:	2a01      	cmp	r2, #1
 8002044:	d177      	bne.n	8002136 <HAL_I2C_Master_Receive+0x1de>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	9704      	str	r7, [sp, #16]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	9204      	str	r2, [sp, #16]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	9204      	str	r2, [sp, #16]
 800205c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002064:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002066:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002068:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8002208 <HAL_I2C_Master_Receive+0x2b0>
    while (hi2c->XferSize > 0U)
 800206c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	d058      	beq.n	8002124 <HAL_I2C_Master_Receive+0x1cc>
      if (hi2c->XferSize <= 3U)
 8002072:	2b03      	cmp	r3, #3
 8002074:	f200 80ca 	bhi.w	800220c <HAL_I2C_Master_Receive+0x2b4>
        if (hi2c->XferSize == 1U)
 8002078:	2b01      	cmp	r3, #1
 800207a:	d178      	bne.n	800216e <HAL_I2C_Master_Receive+0x216>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207c:	462a      	mov	r2, r5
 800207e:	4631      	mov	r1, r6
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff fd6f 	bl	8001b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002086:	2800      	cmp	r0, #0
 8002088:	d1c3      	bne.n	8002012 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208a:	6822      	ldr	r2, [r4, #0]
 800208c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800208e:	6912      	ldr	r2, [r2, #16]
 8002090:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002094:	3301      	adds	r3, #1
 8002096:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002098:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800209e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80020a6:	e7e1      	b.n	800206c <HAL_I2C_Master_Receive+0x114>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020a8:	ea4f 18e7 	mov.w	r8, r7, asr #7
 80020ac:	f008 0806 	and.w	r8, r8, #6
 80020b0:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80020b4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020b6:	4953      	ldr	r1, [pc, #332]	; (8002204 <HAL_I2C_Master_Receive+0x2ac>)
 80020b8:	462b      	mov	r3, r5
 80020ba:	4632      	mov	r2, r6
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff fce6 	bl	8001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d1a5      	bne.n	8002012 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	b2ff      	uxtb	r7, r7
 80020ca:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020cc:	4632      	mov	r2, r6
 80020ce:	462b      	mov	r3, r5
 80020d0:	494b      	ldr	r1, [pc, #300]	; (8002200 <HAL_I2C_Master_Receive+0x2a8>)
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff fcdb 	bl	8001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d8:	4602      	mov	r2, r0
 80020da:	2800      	cmp	r0, #0
 80020dc:	d199      	bne.n	8002012 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	9007      	str	r0, [sp, #28]
 80020e2:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e4:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e6:	9107      	str	r1, [sp, #28]
 80020e8:	6999      	ldr	r1, [r3, #24]
 80020ea:	9107      	str	r1, [sp, #28]
 80020ec:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80020f4:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f6:	9500      	str	r5, [sp, #0]
 80020f8:	4633      	mov	r3, r6
 80020fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020fe:	f7ff fd60 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 8002102:	2800      	cmp	r0, #0
 8002104:	d185      	bne.n	8002012 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002106:	6822      	ldr	r2, [r4, #0]
 8002108:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800210c:	6113      	str	r3, [r2, #16]
 800210e:	e78b      	b.n	8002028 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002110:	9703      	str	r7, [sp, #12]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	9203      	str	r2, [sp, #12]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	9203      	str	r2, [sp, #12]
 800211a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002122:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002124:	2320      	movs	r3, #32
 8002126:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800212a:	2300      	movs	r3, #0
 800212c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002130:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002134:	e720      	b.n	8001f78 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 8002136:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002138:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800213a:	d10e      	bne.n	800215a <HAL_I2C_Master_Receive+0x202>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800213c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002140:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002142:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	9705      	str	r7, [sp, #20]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	9205      	str	r2, [sp, #20]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	9205      	str	r2, [sp, #20]
 8002150:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002158:	e784      	b.n	8002064 <HAL_I2C_Master_Receive+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800215e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002160:	9706      	str	r7, [sp, #24]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	9206      	str	r2, [sp, #24]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	9306      	str	r3, [sp, #24]
 800216a:	9b06      	ldr	r3, [sp, #24]
 800216c:	e77c      	b.n	8002068 <HAL_I2C_Master_Receive+0x110>
        else if (hi2c->XferSize == 2U)
 800216e:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002170:	9500      	str	r5, [sp, #0]
 8002172:	4633      	mov	r3, r6
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4641      	mov	r1, r8
 800217a:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800217c:	d119      	bne.n	80021b2 <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800217e:	f7ff fd20 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 8002182:	2800      	cmp	r0, #0
 8002184:	f47f af45 	bne.w	8002012 <HAL_I2C_Master_Receive+0xba>
 8002188:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002192:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002198:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800219a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800219c:	3301      	adds	r3, #1
 800219e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80021a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021a2:	3b01      	subs	r3, #1
 80021a4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80021a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021ae:	b662      	cpsie	i
 80021b0:	e76b      	b.n	800208a <HAL_I2C_Master_Receive+0x132>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021b2:	f7ff fd06 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4602      	mov	r2, r0
 80021b8:	2800      	cmp	r0, #0
 80021ba:	f47f af2a 	bne.w	8002012 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021be:	6821      	ldr	r1, [r4, #0]
 80021c0:	680b      	ldr	r3, [r1, #0]
 80021c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021c6:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021c8:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ca:	6821      	ldr	r1, [r4, #0]
 80021cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021ce:	6909      	ldr	r1, [r1, #16]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d0:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d2:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80021d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d6:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 80021d8:	3301      	adds	r3, #1
 80021da:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80021dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021de:	4641      	mov	r1, r8
          hi2c->XferSize--;
 80021e0:	3b01      	subs	r3, #1
 80021e2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80021e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ec:	4633      	mov	r3, r6
 80021ee:	f7ff fce8 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d0c9      	beq.n	800218a <HAL_I2C_Master_Receive+0x232>
 80021f6:	e70c      	b.n	8002012 <HAL_I2C_Master_Receive+0xba>
 80021f8:	00100002 	.word	0x00100002
 80021fc:	ffff0000 	.word	0xffff0000
 8002200:	00010002 	.word	0x00010002
 8002204:	00010008 	.word	0x00010008
 8002208:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	462a      	mov	r2, r5
 800220e:	4631      	mov	r1, r6
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff fca7 	bl	8001b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002216:	2800      	cmp	r0, #0
 8002218:	f47f aefb 	bne.w	8002012 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800221c:	6822      	ldr	r2, [r4, #0]
 800221e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002220:	6912      	ldr	r2, [r2, #16]
 8002222:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002224:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002226:	1c53      	adds	r3, r2, #1
 8002228:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800222a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800222c:	3b01      	subs	r3, #1
 800222e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002230:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002232:	3b01      	subs	r3, #1
 8002234:	b29b      	uxth	r3, r3
 8002236:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	6959      	ldr	r1, [r3, #20]
 800223c:	0749      	lsls	r1, r1, #29
 800223e:	f57f af15 	bpl.w	800206c <HAL_I2C_Master_Receive+0x114>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	7053      	strb	r3, [r2, #1]
 8002246:	e724      	b.n	8002092 <HAL_I2C_Master_Receive+0x13a>

08002248 <HAL_I2C_IsDeviceReady>:
{
 8002248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800224c:	4604      	mov	r4, r0
 800224e:	b085      	sub	sp, #20
 8002250:	4698      	mov	r8, r3
 8002252:	4689      	mov	r9, r1
 8002254:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8002256:	f7fe ff2b 	bl	80010b0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800225a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800225e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002260:	2b20      	cmp	r3, #32
 8002262:	d003      	beq.n	800226c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002264:	2002      	movs	r0, #2
}
 8002266:	b005      	add	sp, #20
 8002268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226c:	9000      	str	r0, [sp, #0]
 800226e:	2319      	movs	r3, #25
 8002270:	2201      	movs	r2, #1
 8002272:	4949      	ldr	r1, [pc, #292]	; (8002398 <HAL_I2C_IsDeviceReady+0x150>)
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff fca4 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 800227a:	2800      	cmp	r0, #0
 800227c:	d1f2      	bne.n	8002264 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 800227e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002282:	2b01      	cmp	r3, #1
 8002284:	d0ee      	beq.n	8002264 <HAL_I2C_IsDeviceReady+0x1c>
 8002286:	2301      	movs	r3, #1
 8002288:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800228c:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 800228e:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002290:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002292:	f8df b104 	ldr.w	fp, [pc, #260]	; 8002398 <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002296:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002298:	bf58      	it	pl
 800229a:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800229c:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 80022a0:	bf5c      	itt	pl
 80022a2:	f042 0201 	orrpl.w	r2, r2, #1
 80022a6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ae:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022b0:	2324      	movs	r3, #36	; 0x24
 80022b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ba:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80022be:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022c0:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022c6:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022c8:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022d0:	9500      	str	r5, [sp, #0]
 80022d2:	4643      	mov	r3, r8
 80022d4:	2200      	movs	r2, #0
 80022d6:	f7ff fc74 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 80022da:	b108      	cbz	r0, 80022e0 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 80022dc:	2001      	movs	r0, #1
 80022de:	e7c2      	b.n	8002266 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022e0:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022e2:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022e4:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80022e8:	f7fe fee2 	bl	80010b0 <HAL_GetTick>
 80022ec:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022f2:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022f4:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022f8:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022fc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002300:	29a0      	cmp	r1, #160	; 0xa0
 8002302:	d001      	beq.n	8002308 <HAL_I2C_IsDeviceReady+0xc0>
 8002304:	b902      	cbnz	r2, 8002308 <HAL_I2C_IsDeviceReady+0xc0>
 8002306:	b303      	cbz	r3, 800234a <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 8002308:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800230a:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800230c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231c:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800231e:	d026      	beq.n	800236e <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002320:	2200      	movs	r2, #0
 8002322:	9203      	str	r2, [sp, #12]
 8002324:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002326:	491c      	ldr	r1, [pc, #112]	; (8002398 <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002328:	9203      	str	r2, [sp, #12]
 800232a:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800232c:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232e:	9303      	str	r3, [sp, #12]
 8002330:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002332:	9500      	str	r5, [sp, #0]
 8002334:	2319      	movs	r3, #25
 8002336:	4620      	mov	r0, r4
 8002338:	f7ff fc43 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 800233c:	2800      	cmp	r0, #0
 800233e:	d1cd      	bne.n	80022dc <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 8002340:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002344:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8002348:	e78d      	b.n	8002266 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7fe feb1 	bl	80010b0 <HAL_GetTick>
 800234e:	1b40      	subs	r0, r0, r5
 8002350:	4580      	cmp	r8, r0
 8002352:	d302      	bcc.n	800235a <HAL_I2C_IsDeviceReady+0x112>
 8002354:	f1b8 0f00 	cmp.w	r8, #0
 8002358:	d101      	bne.n	800235e <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800235a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002362:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002364:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002368:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800236c:	e7c6      	b.n	80022fc <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800236e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002372:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002374:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002376:	4620      	mov	r0, r4
 8002378:	9500      	str	r5, [sp, #0]
 800237a:	2319      	movs	r3, #25
 800237c:	2201      	movs	r2, #1
 800237e:	f7ff fc20 	bl	8001bc2 <I2C_WaitOnFlagUntilTimeout>
 8002382:	2800      	cmp	r0, #0
 8002384:	d1aa      	bne.n	80022dc <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 8002386:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8002388:	4557      	cmp	r7, sl
 800238a:	d399      	bcc.n	80022c0 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 800238c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002390:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8002394:	e7a2      	b.n	80022dc <HAL_I2C_IsDeviceReady+0x94>
 8002396:	bf00      	nop
 8002398:	00100002 	.word	0x00100002

0800239c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a0:	4605      	mov	r5, r0
 80023a2:	b908      	cbnz	r0, 80023a8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
 80023a6:	e03c      	b.n	8002422 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a8:	6803      	ldr	r3, [r0, #0]
 80023aa:	07db      	lsls	r3, r3, #31
 80023ac:	d410      	bmi.n	80023d0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	079f      	lsls	r7, r3, #30
 80023b2:	d45d      	bmi.n	8002470 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	0719      	lsls	r1, r3, #28
 80023b8:	f100 8094 	bmi.w	80024e4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	075a      	lsls	r2, r3, #29
 80023c0:	f100 80be 	bmi.w	8002540 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c4:	69e8      	ldr	r0, [r5, #28]
 80023c6:	2800      	cmp	r0, #0
 80023c8:	f040 812c 	bne.w	8002624 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80023cc:	2000      	movs	r0, #0
 80023ce:	e028      	b.n	8002422 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d0:	4c8f      	ldr	r4, [pc, #572]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80023d2:	6863      	ldr	r3, [r4, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d007      	beq.n	80023ec <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023dc:	6863      	ldr	r3, [r4, #4]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
 80023e6:	6863      	ldr	r3, [r4, #4]
 80023e8:	03de      	lsls	r6, r3, #15
 80023ea:	d506      	bpl.n	80023fa <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	039c      	lsls	r4, r3, #14
 80023f0:	d5dd      	bpl.n	80023ae <HAL_RCC_OscConfig+0x12>
 80023f2:	686b      	ldr	r3, [r5, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1da      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
 80023f8:	e7d4      	b.n	80023a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	686b      	ldr	r3, [r5, #4]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d112      	bne.n	8002428 <HAL_RCC_OscConfig+0x8c>
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800240a:	f7fe fe51 	bl	80010b0 <HAL_GetTick>
 800240e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	0398      	lsls	r0, r3, #14
 8002414:	d4cb      	bmi.n	80023ae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002416:	f7fe fe4b 	bl	80010b0 <HAL_GetTick>
 800241a:	1b80      	subs	r0, r0, r6
 800241c:	2864      	cmp	r0, #100	; 0x64
 800241e:	d9f7      	bls.n	8002410 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002420:	2003      	movs	r0, #3
}
 8002422:	b002      	add	sp, #8
 8002424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002428:	b99b      	cbnz	r3, 8002452 <HAL_RCC_OscConfig+0xb6>
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002430:	6023      	str	r3, [r4, #0]
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002438:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800243a:	f7fe fe39 	bl	80010b0 <HAL_GetTick>
 800243e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	0399      	lsls	r1, r3, #14
 8002444:	d5b3      	bpl.n	80023ae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002446:	f7fe fe33 	bl	80010b0 <HAL_GetTick>
 800244a:	1b80      	subs	r0, r0, r6
 800244c:	2864      	cmp	r0, #100	; 0x64
 800244e:	d9f7      	bls.n	8002440 <HAL_RCC_OscConfig+0xa4>
 8002450:	e7e6      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	d103      	bne.n	8002462 <HAL_RCC_OscConfig+0xc6>
 800245a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245e:	6023      	str	r3, [r4, #0]
 8002460:	e7cf      	b.n	8002402 <HAL_RCC_OscConfig+0x66>
 8002462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002466:	6023      	str	r3, [r4, #0]
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	e7cb      	b.n	8002408 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002470:	4c67      	ldr	r4, [pc, #412]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002472:	6863      	ldr	r3, [r4, #4]
 8002474:	f013 0f0c 	tst.w	r3, #12
 8002478:	d007      	beq.n	800248a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800247a:	6863      	ldr	r3, [r4, #4]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d110      	bne.n	80024a6 <HAL_RCC_OscConfig+0x10a>
 8002484:	6863      	ldr	r3, [r4, #4]
 8002486:	03da      	lsls	r2, r3, #15
 8002488:	d40d      	bmi.n	80024a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	079b      	lsls	r3, r3, #30
 800248e:	d502      	bpl.n	8002496 <HAL_RCC_OscConfig+0xfa>
 8002490:	692b      	ldr	r3, [r5, #16]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d186      	bne.n	80023a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	696a      	ldr	r2, [r5, #20]
 800249a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800249e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80024a2:	6023      	str	r3, [r4, #0]
 80024a4:	e786      	b.n	80023b4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a6:	692a      	ldr	r2, [r5, #16]
 80024a8:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_RCC_OscConfig+0x278>)
 80024aa:	b16a      	cbz	r2, 80024c8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024b0:	f7fe fdfe 	bl	80010b0 <HAL_GetTick>
 80024b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	079f      	lsls	r7, r3, #30
 80024ba:	d4ec      	bmi.n	8002496 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe fdf8 	bl	80010b0 <HAL_GetTick>
 80024c0:	1b80      	subs	r0, r0, r6
 80024c2:	2802      	cmp	r0, #2
 80024c4:	d9f7      	bls.n	80024b6 <HAL_RCC_OscConfig+0x11a>
 80024c6:	e7ab      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80024c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024ca:	f7fe fdf1 	bl	80010b0 <HAL_GetTick>
 80024ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	0798      	lsls	r0, r3, #30
 80024d4:	f57f af6e 	bpl.w	80023b4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d8:	f7fe fdea 	bl	80010b0 <HAL_GetTick>
 80024dc:	1b80      	subs	r0, r0, r6
 80024de:	2802      	cmp	r0, #2
 80024e0:	d9f6      	bls.n	80024d0 <HAL_RCC_OscConfig+0x134>
 80024e2:	e79d      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e4:	69aa      	ldr	r2, [r5, #24]
 80024e6:	4c4a      	ldr	r4, [pc, #296]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	b1da      	cbz	r2, 8002524 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024f0:	f7fe fdde 	bl	80010b0 <HAL_GetTick>
 80024f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024f8:	079b      	lsls	r3, r3, #30
 80024fa:	d50d      	bpl.n	8002518 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002500:	4b46      	ldr	r3, [pc, #280]	; (800261c <HAL_RCC_OscConfig+0x280>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fbb3 f3f2 	udiv	r3, r3, r2
 8002508:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800250a:	bf00      	nop
  }
  while (Delay --);
 800250c:	9b01      	ldr	r3, [sp, #4]
 800250e:	1e5a      	subs	r2, r3, #1
 8002510:	9201      	str	r2, [sp, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <HAL_RCC_OscConfig+0x16e>
 8002516:	e751      	b.n	80023bc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe fdca 	bl	80010b0 <HAL_GetTick>
 800251c:	1b80      	subs	r0, r0, r6
 800251e:	2802      	cmp	r0, #2
 8002520:	d9e9      	bls.n	80024f6 <HAL_RCC_OscConfig+0x15a>
 8002522:	e77d      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002524:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002526:	f7fe fdc3 	bl	80010b0 <HAL_GetTick>
 800252a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800252e:	079f      	lsls	r7, r3, #30
 8002530:	f57f af44 	bpl.w	80023bc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe fdbc 	bl	80010b0 <HAL_GetTick>
 8002538:	1b80      	subs	r0, r0, r6
 800253a:	2802      	cmp	r0, #2
 800253c:	d9f6      	bls.n	800252c <HAL_RCC_OscConfig+0x190>
 800253e:	e76f      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002540:	4c33      	ldr	r4, [pc, #204]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002542:	69e3      	ldr	r3, [r4, #28]
 8002544:	00d8      	lsls	r0, r3, #3
 8002546:	d424      	bmi.n	8002592 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8002548:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	69e3      	ldr	r3, [r4, #28]
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	61e3      	str	r3, [r4, #28]
 8002552:	69e3      	ldr	r3, [r4, #28]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	4e30      	ldr	r6, [pc, #192]	; (8002620 <HAL_RCC_OscConfig+0x284>)
 800255e:	6833      	ldr	r3, [r6, #0]
 8002560:	05d9      	lsls	r1, r3, #23
 8002562:	d518      	bpl.n	8002596 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	68eb      	ldr	r3, [r5, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d126      	bne.n	80025b8 <HAL_RCC_OscConfig+0x21c>
 800256a:	6a23      	ldr	r3, [r4, #32]
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002572:	f7fe fd9d 	bl	80010b0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800257a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	6a23      	ldr	r3, [r4, #32]
 800257e:	079b      	lsls	r3, r3, #30
 8002580:	d53f      	bpl.n	8002602 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8002582:	2f00      	cmp	r7, #0
 8002584:	f43f af1e 	beq.w	80023c4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	69e3      	ldr	r3, [r4, #28]
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	61e3      	str	r3, [r4, #28]
 8002590:	e718      	b.n	80023c4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2700      	movs	r7, #0
 8002594:	e7e2      	b.n	800255c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	6833      	ldr	r3, [r6, #0]
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800259e:	f7fe fd87 	bl	80010b0 <HAL_GetTick>
 80025a2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	6833      	ldr	r3, [r6, #0]
 80025a6:	05da      	lsls	r2, r3, #23
 80025a8:	d4dc      	bmi.n	8002564 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fe fd81 	bl	80010b0 <HAL_GetTick>
 80025ae:	eba0 0008 	sub.w	r0, r0, r8
 80025b2:	2864      	cmp	r0, #100	; 0x64
 80025b4:	d9f6      	bls.n	80025a4 <HAL_RCC_OscConfig+0x208>
 80025b6:	e733      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	b9ab      	cbnz	r3, 80025e6 <HAL_RCC_OscConfig+0x24a>
 80025ba:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6223      	str	r3, [r4, #32]
 80025c6:	6a23      	ldr	r3, [r4, #32]
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80025ce:	f7fe fd6f 	bl	80010b0 <HAL_GetTick>
 80025d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	6a23      	ldr	r3, [r4, #32]
 80025d6:	0798      	lsls	r0, r3, #30
 80025d8:	d5d3      	bpl.n	8002582 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fd69 	bl	80010b0 <HAL_GetTick>
 80025de:	1b80      	subs	r0, r0, r6
 80025e0:	4540      	cmp	r0, r8
 80025e2:	d9f7      	bls.n	80025d4 <HAL_RCC_OscConfig+0x238>
 80025e4:	e71c      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	6a23      	ldr	r3, [r4, #32]
 80025ea:	d103      	bne.n	80025f4 <HAL_RCC_OscConfig+0x258>
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6223      	str	r3, [r4, #32]
 80025f2:	e7ba      	b.n	800256a <HAL_RCC_OscConfig+0x1ce>
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6223      	str	r3, [r4, #32]
 80025fa:	6a23      	ldr	r3, [r4, #32]
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	e7b6      	b.n	8002570 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe fd55 	bl	80010b0 <HAL_GetTick>
 8002606:	eba0 0008 	sub.w	r0, r0, r8
 800260a:	42b0      	cmp	r0, r6
 800260c:	d9b6      	bls.n	800257c <HAL_RCC_OscConfig+0x1e0>
 800260e:	e707      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
 8002610:	40021000 	.word	0x40021000
 8002614:	42420000 	.word	0x42420000
 8002618:	42420480 	.word	0x42420480
 800261c:	20000024 	.word	0x20000024
 8002620:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002624:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <HAL_RCC_OscConfig+0x334>)
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	461c      	mov	r4, r3
 800262a:	f002 020c 	and.w	r2, r2, #12
 800262e:	2a08      	cmp	r2, #8
 8002630:	d03d      	beq.n	80026ae <HAL_RCC_OscConfig+0x312>
 8002632:	2300      	movs	r3, #0
 8002634:	4e27      	ldr	r6, [pc, #156]	; (80026d4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002636:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002638:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263a:	d12b      	bne.n	8002694 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800263c:	f7fe fd38 	bl	80010b0 <HAL_GetTick>
 8002640:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	0199      	lsls	r1, r3, #6
 8002646:	d41f      	bmi.n	8002688 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002648:	6a2b      	ldr	r3, [r5, #32]
 800264a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264e:	d105      	bne.n	800265c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002650:	6862      	ldr	r2, [r4, #4]
 8002652:	68a9      	ldr	r1, [r5, #8]
 8002654:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002658:	430a      	orrs	r2, r1
 800265a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800265e:	6862      	ldr	r2, [r4, #4]
 8002660:	430b      	orrs	r3, r1
 8002662:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002666:	4313      	orrs	r3, r2
 8002668:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800266a:	2301      	movs	r3, #1
 800266c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800266e:	f7fe fd1f 	bl	80010b0 <HAL_GetTick>
 8002672:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	019a      	lsls	r2, r3, #6
 8002678:	f53f aea8 	bmi.w	80023cc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fd18 	bl	80010b0 <HAL_GetTick>
 8002680:	1b40      	subs	r0, r0, r5
 8002682:	2802      	cmp	r0, #2
 8002684:	d9f6      	bls.n	8002674 <HAL_RCC_OscConfig+0x2d8>
 8002686:	e6cb      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fd12 	bl	80010b0 <HAL_GetTick>
 800268c:	1bc0      	subs	r0, r0, r7
 800268e:	2802      	cmp	r0, #2
 8002690:	d9d7      	bls.n	8002642 <HAL_RCC_OscConfig+0x2a6>
 8002692:	e6c5      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002694:	f7fe fd0c 	bl	80010b0 <HAL_GetTick>
 8002698:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	f57f ae95 	bpl.w	80023cc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe fd05 	bl	80010b0 <HAL_GetTick>
 80026a6:	1b40      	subs	r0, r0, r5
 80026a8:	2802      	cmp	r0, #2
 80026aa:	d9f6      	bls.n	800269a <HAL_RCC_OscConfig+0x2fe>
 80026ac:	e6b8      	b.n	8002420 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ae:	2801      	cmp	r0, #1
 80026b0:	f43f aeb7 	beq.w	8002422 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80026b4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	6a2b      	ldr	r3, [r5, #32]
 80026b8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80026bc:	429a      	cmp	r2, r3
 80026be:	f47f ae71 	bne.w	80023a4 <HAL_RCC_OscConfig+0x8>
 80026c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026c4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80026c8:	1ac0      	subs	r0, r0, r3
 80026ca:	bf18      	it	ne
 80026cc:	2001      	movne	r0, #1
 80026ce:	e6a8      	b.n	8002422 <HAL_RCC_OscConfig+0x86>
 80026d0:	40021000 	.word	0x40021000
 80026d4:	42420060 	.word	0x42420060

080026d8 <HAL_RCC_GetSysClockFreq>:
{
 80026d8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80026dc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026de:	ac02      	add	r4, sp, #8
 80026e0:	f103 0510 	add.w	r5, r3, #16
 80026e4:	4622      	mov	r2, r4
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	3308      	adds	r3, #8
 80026ec:	c203      	stmia	r2!, {r0, r1}
 80026ee:	42ab      	cmp	r3, r5
 80026f0:	4614      	mov	r4, r2
 80026f2:	d1f7      	bne.n	80026e4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026f4:	2301      	movs	r3, #1
 80026f6:	f88d 3004 	strb.w	r3, [sp, #4]
 80026fa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80026fc:	4911      	ldr	r1, [pc, #68]	; (8002744 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026fe:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002702:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002704:	f003 020c 	and.w	r2, r3, #12
 8002708:	2a08      	cmp	r2, #8
 800270a:	d117      	bne.n	800273c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800270c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002710:	a806      	add	r0, sp, #24
 8002712:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002714:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002716:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800271a:	d50c      	bpl.n	8002736 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800271c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271e:	480a      	ldr	r0, [pc, #40]	; (8002748 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002720:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002724:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002726:	aa06      	add	r2, sp, #24
 8002728:	4413      	add	r3, r2
 800272a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800272e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002732:	b007      	add	sp, #28
 8002734:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <HAL_RCC_GetSysClockFreq+0x74>)
 8002738:	4350      	muls	r0, r2
 800273a:	e7fa      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800273e:	e7f8      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x5a>
 8002740:	08004dc0 	.word	0x08004dc0
 8002744:	40021000 	.word	0x40021000
 8002748:	007a1200 	.word	0x007a1200
 800274c:	003d0900 	.word	0x003d0900

08002750 <HAL_RCC_ClockConfig>:
{
 8002750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002754:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002756:	4604      	mov	r4, r0
 8002758:	b910      	cbnz	r0, 8002760 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800275a:	2001      	movs	r0, #1
 800275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4a45      	ldr	r2, [pc, #276]	; (8002878 <HAL_RCC_ClockConfig+0x128>)
 8002762:	6813      	ldr	r3, [r2, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	428b      	cmp	r3, r1
 800276a:	d329      	bcc.n	80027c0 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	6821      	ldr	r1, [r4, #0]
 800276e:	078e      	lsls	r6, r1, #30
 8002770:	d431      	bmi.n	80027d6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	07ca      	lsls	r2, r1, #31
 8002774:	d444      	bmi.n	8002800 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002776:	4a40      	ldr	r2, [pc, #256]	; (8002878 <HAL_RCC_ClockConfig+0x128>)
 8002778:	6813      	ldr	r3, [r2, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	429d      	cmp	r5, r3
 8002780:	d367      	bcc.n	8002852 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002782:	6822      	ldr	r2, [r4, #0]
 8002784:	4d3d      	ldr	r5, [pc, #244]	; (800287c <HAL_RCC_ClockConfig+0x12c>)
 8002786:	f012 0f04 	tst.w	r2, #4
 800278a:	d16e      	bne.n	800286a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	0713      	lsls	r3, r2, #28
 800278e:	d506      	bpl.n	800279e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002790:	686b      	ldr	r3, [r5, #4]
 8002792:	6922      	ldr	r2, [r4, #16]
 8002794:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002798:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800279c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800279e:	f7ff ff9b 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 80027a2:	686b      	ldr	r3, [r5, #4]
 80027a4:	4a36      	ldr	r2, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x130>)
 80027a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	40d8      	lsrs	r0, r3
 80027ae:	4b35      	ldr	r3, [pc, #212]	; (8002884 <HAL_RCC_ClockConfig+0x134>)
 80027b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80027b2:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_RCC_ClockConfig+0x138>)
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	f7fe fc39 	bl	800102c <HAL_InitTick>
  return HAL_OK;
 80027ba:	2000      	movs	r0, #0
 80027bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c0:	6813      	ldr	r3, [r2, #0]
 80027c2:	f023 0307 	bic.w	r3, r3, #7
 80027c6:	430b      	orrs	r3, r1
 80027c8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	6813      	ldr	r3, [r2, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4299      	cmp	r1, r3
 80027d2:	d1c2      	bne.n	800275a <HAL_RCC_ClockConfig+0xa>
 80027d4:	e7ca      	b.n	800276c <HAL_RCC_ClockConfig+0x1c>
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	bf1e      	ittt	ne
 80027de:	685a      	ldrne	r2, [r3, #4]
 80027e0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80027e4:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e8:	bf42      	ittt	mi
 80027ea:	685a      	ldrmi	r2, [r3, #4]
 80027ec:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80027f0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	68a0      	ldr	r0, [r4, #8]
 80027f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027fa:	4302      	orrs	r2, r0
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	e7b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002800:	6862      	ldr	r2, [r4, #4]
 8002802:	4e1e      	ldr	r6, [pc, #120]	; (800287c <HAL_RCC_ClockConfig+0x12c>)
 8002804:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002808:	d11b      	bne.n	8002842 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	d0a4      	beq.n	800275a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002810:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002812:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	4313      	orrs	r3, r2
 800281c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800281e:	f7fe fc47 	bl	80010b0 <HAL_GetTick>
 8002822:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002824:	6873      	ldr	r3, [r6, #4]
 8002826:	6862      	ldr	r2, [r4, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002830:	d0a1      	beq.n	8002776 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002832:	f7fe fc3d 	bl	80010b0 <HAL_GetTick>
 8002836:	1bc0      	subs	r0, r0, r7
 8002838:	4540      	cmp	r0, r8
 800283a:	d9f3      	bls.n	8002824 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800283c:	2003      	movs	r0, #3
}
 800283e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002842:	2a02      	cmp	r2, #2
 8002844:	d102      	bne.n	800284c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800284a:	e7e0      	b.n	800280e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284c:	f013 0f02 	tst.w	r3, #2
 8002850:	e7dd      	b.n	800280e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	6813      	ldr	r3, [r2, #0]
 8002854:	f023 0307 	bic.w	r3, r3, #7
 8002858:	432b      	orrs	r3, r5
 800285a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285c:	6813      	ldr	r3, [r2, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	429d      	cmp	r5, r3
 8002864:	f47f af79 	bne.w	800275a <HAL_RCC_ClockConfig+0xa>
 8002868:	e78b      	b.n	8002782 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286a:	686b      	ldr	r3, [r5, #4]
 800286c:	68e1      	ldr	r1, [r4, #12]
 800286e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002872:	430b      	orrs	r3, r1
 8002874:	606b      	str	r3, [r5, #4]
 8002876:	e789      	b.n	800278c <HAL_RCC_ClockConfig+0x3c>
 8002878:	40022000 	.word	0x40022000
 800287c:	40021000 	.word	0x40021000
 8002880:	08004e66 	.word	0x08004e66
 8002884:	20000024 	.word	0x20000024
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800289a:	6810      	ldr	r0, [r2, #0]
}
 800289c:	40d8      	lsrs	r0, r3
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08004e76 	.word	0x08004e76
 80028a8:	20000024 	.word	0x20000024

080028ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80028ae:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028ba:	6810      	ldr	r0, [r2, #0]
}
 80028bc:	40d8      	lsrs	r0, r3
 80028be:	4770      	bx	lr
 80028c0:	40021000 	.word	0x40021000
 80028c4:	08004e76 	.word	0x08004e76
 80028c8:	20000024 	.word	0x20000024

080028cc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028cc:	6803      	ldr	r3, [r0, #0]
{
 80028ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028d2:	07d9      	lsls	r1, r3, #31
{
 80028d4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028d6:	d520      	bpl.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d8:	4c35      	ldr	r4, [pc, #212]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80028da:	69e3      	ldr	r3, [r4, #28]
 80028dc:	00da      	lsls	r2, r3, #3
 80028de:	d432      	bmi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80028e0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	69e3      	ldr	r3, [r4, #28]
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	61e3      	str	r3, [r4, #28]
 80028ea:	69e3      	ldr	r3, [r4, #28]
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4e2f      	ldr	r6, [pc, #188]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028f6:	6833      	ldr	r3, [r6, #0]
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	d526      	bpl.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028fc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028fe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002902:	d136      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002904:	6a23      	ldr	r3, [r4, #32]
 8002906:	686a      	ldr	r2, [r5, #4]
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	4313      	orrs	r3, r2
 800290e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002910:	b11f      	cbz	r7, 800291a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	69e3      	ldr	r3, [r4, #28]
 8002914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002918:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800291a:	6828      	ldr	r0, [r5, #0]
 800291c:	0783      	lsls	r3, r0, #30
 800291e:	d506      	bpl.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002920:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002922:	68a9      	ldr	r1, [r5, #8]
 8002924:	6853      	ldr	r3, [r2, #4]
 8002926:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800292a:	430b      	orrs	r3, r1
 800292c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800292e:	f010 0010 	ands.w	r0, r0, #16
 8002932:	d01b      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002934:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002936:	68e9      	ldr	r1, [r5, #12]
 8002938:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800293a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800293c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002940:	430b      	orrs	r3, r1
 8002942:	6053      	str	r3, [r2, #4]
 8002944:	e012      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002946:	2700      	movs	r7, #0
 8002948:	e7d4      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294a:	6833      	ldr	r3, [r6, #0]
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002952:	f7fe fbad 	bl	80010b0 <HAL_GetTick>
 8002956:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	6833      	ldr	r3, [r6, #0]
 800295a:	05d8      	lsls	r0, r3, #23
 800295c:	d4ce      	bmi.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7fe fba7 	bl	80010b0 <HAL_GetTick>
 8002962:	eba0 0008 	sub.w	r0, r0, r8
 8002966:	2864      	cmp	r0, #100	; 0x64
 8002968:	d9f6      	bls.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800296a:	2003      	movs	r0, #3
}
 800296c:	b002      	add	sp, #8
 800296e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002972:	686a      	ldr	r2, [r5, #4]
 8002974:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002978:	4293      	cmp	r3, r2
 800297a:	d0c3      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800297c:	2001      	movs	r0, #1
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002980:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002982:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002984:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002986:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800298a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800298c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800298e:	07d9      	lsls	r1, r3, #31
 8002990:	d5b8      	bpl.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002992:	f7fe fb8d 	bl	80010b0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800299a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	6a23      	ldr	r3, [r4, #32]
 800299e:	079a      	lsls	r2, r3, #30
 80029a0:	d4b0      	bmi.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fe fb85 	bl	80010b0 <HAL_GetTick>
 80029a6:	1b80      	subs	r0, r0, r6
 80029a8:	4540      	cmp	r0, r8
 80029aa:	d9f7      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80029ac:	e7dd      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	42420440 	.word	0x42420440

080029bc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029bc:	6a03      	ldr	r3, [r0, #32]
{
 80029be:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80029d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80029d6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80029da:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029dc:	4d0a      	ldr	r5, [pc, #40]	; (8002a08 <TIM_OC1_SetConfig+0x4c>)
 80029de:	42a8      	cmp	r0, r5
 80029e0:	d10b      	bne.n	80029fa <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029e2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80029e4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80029e8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029ea:	698e      	ldr	r6, [r1, #24]
 80029ec:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80029f2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80029f4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80029f8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029fa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029fc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029fe:	684a      	ldr	r2, [r1, #4]
 8002a00:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a02:	6203      	str	r3, [r0, #32]
 8002a04:	bd70      	pop	{r4, r5, r6, pc}
 8002a06:	bf00      	nop
 8002a08:	40012c00 	.word	0x40012c00

08002a0c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a0c:	6a03      	ldr	r3, [r0, #32]
{
 8002a0e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a14:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a16:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a18:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a1a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a1e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002a22:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a24:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002a26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a2e:	4d0b      	ldr	r5, [pc, #44]	; (8002a5c <TIM_OC3_SetConfig+0x50>)
 8002a30:	42a8      	cmp	r0, r5
 8002a32:	d10d      	bne.n	8002a50 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a34:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a3a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a3e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a40:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a42:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a46:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a4c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a50:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a52:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a54:	684a      	ldr	r2, [r1, #4]
 8002a56:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a58:	6203      	str	r3, [r0, #32]
 8002a5a:	bd70      	pop	{r4, r5, r6, pc}
 8002a5c:	40012c00 	.word	0x40012c00

08002a60 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a60:	6a03      	ldr	r3, [r0, #32]
{
 8002a62:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a6e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a72:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a7a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a80:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a84:	4d06      	ldr	r5, [pc, #24]	; (8002aa0 <TIM_OC4_SetConfig+0x40>)
 8002a86:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a88:	bf02      	ittt	eq
 8002a8a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a8c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a90:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a94:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a96:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a98:	684a      	ldr	r2, [r1, #4]
 8002a9a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9c:	6203      	str	r3, [r0, #32]
 8002a9e:	bd30      	pop	{r4, r5, pc}
 8002aa0:	40012c00 	.word	0x40012c00

08002aa4 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aaa:	6803      	ldr	r3, [r0, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002ab4:	bf1e      	ittt	ne
 8002ab6:	681a      	ldrne	r2, [r3, #0]
 8002ab8:	f042 0201 	orrne.w	r2, r2, #1
 8002abc:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac8:	6803      	ldr	r3, [r0, #0]
}
 8002aca:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ada:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002adc:	bf1e      	ittt	ne
 8002ade:	681a      	ldrne	r2, [r3, #0]
 8002ae0:	f042 0201 	orrne.w	r2, r2, #1
 8002ae4:	601a      	strne	r2, [r3, #0]
}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIM_PWM_MspInit>:
 8002ae8:	4770      	bx	lr

08002aea <HAL_TIM_PeriodElapsedCallback>:
 8002aea:	4770      	bx	lr

08002aec <HAL_TIM_OC_DelayElapsedCallback>:
 8002aec:	4770      	bx	lr

08002aee <HAL_TIM_IC_CaptureCallback>:
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002af0:	4770      	bx	lr

08002af2 <HAL_TIM_TriggerCallback>:
 8002af2:	4770      	bx	lr

08002af4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af4:	6803      	ldr	r3, [r0, #0]
{
 8002af6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af8:	691a      	ldr	r2, [r3, #16]
{
 8002afa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002afc:	0791      	lsls	r1, r2, #30
 8002afe:	d50e      	bpl.n	8002b1e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	0792      	lsls	r2, r2, #30
 8002b04:	d50b      	bpl.n	8002b1e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b06:	f06f 0202 	mvn.w	r2, #2
 8002b0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b0c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b0e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b10:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b12:	079b      	lsls	r3, r3, #30
 8002b14:	d077      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	f7ff ffea 	bl	8002aee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	0750      	lsls	r0, r2, #29
 8002b24:	d510      	bpl.n	8002b48 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	0751      	lsls	r1, r2, #29
 8002b2a:	d50d      	bpl.n	8002b48 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b2c:	f06f 0204 	mvn.w	r2, #4
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b32:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b34:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b36:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b38:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b3e:	d068      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b40:	f7ff ffd5 	bl	8002aee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b44:	2300      	movs	r3, #0
 8002b46:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	0712      	lsls	r2, r2, #28
 8002b4e:	d50f      	bpl.n	8002b70 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	0710      	lsls	r0, r2, #28
 8002b54:	d50c      	bpl.n	8002b70 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b56:	f06f 0208 	mvn.w	r2, #8
 8002b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b5c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b5e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b60:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b62:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002b64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b66:	d05a      	beq.n	8002c1e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b68:	f7ff ffc1 	bl	8002aee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	06d2      	lsls	r2, r2, #27
 8002b76:	d510      	bpl.n	8002b9a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	06d0      	lsls	r0, r2, #27
 8002b7c:	d50d      	bpl.n	8002b9a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b7e:	f06f 0210 	mvn.w	r2, #16
 8002b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b84:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b86:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b88:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b8a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b90:	d04b      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	f7ff ffac 	bl	8002aee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	2300      	movs	r3, #0
 8002b98:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	07d1      	lsls	r1, r2, #31
 8002ba0:	d508      	bpl.n	8002bb4 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	07d2      	lsls	r2, r2, #31
 8002ba6:	d505      	bpl.n	8002bb4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb0:	f7ff ff9b 	bl	8002aea <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	0610      	lsls	r0, r2, #24
 8002bba:	d508      	bpl.n	8002bce <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	0611      	lsls	r1, r2, #24
 8002bc0:	d505      	bpl.n	8002bce <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002bc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002bca:	f000 fa16 	bl	8002ffa <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	0652      	lsls	r2, r2, #25
 8002bd4:	d508      	bpl.n	8002be8 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	0650      	lsls	r0, r2, #25
 8002bda:	d505      	bpl.n	8002be8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002be0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002be4:	f7ff ff85 	bl	8002af2 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	0691      	lsls	r1, r2, #26
 8002bee:	d522      	bpl.n	8002c36 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	0692      	lsls	r2, r2, #26
 8002bf4:	d51f      	bpl.n	8002c36 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002bfa:	4620      	mov	r0, r4
}
 8002bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002c02:	f000 b9f9 	b.w	8002ff8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	f7ff ff71 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff ff70 	bl	8002af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c10:	e783      	b.n	8002b1a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	f7ff ff6b 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff ff6a 	bl	8002af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c1c:	e792      	b.n	8002b44 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	f7ff ff65 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff ff64 	bl	8002af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c28:	e7a0      	b.n	8002b6c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	f7ff ff5f 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff ff5e 	bl	8002af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c34:	e7af      	b.n	8002b96 <HAL_TIM_IRQHandler+0xa2>
 8002c36:	bd10      	pop	{r4, pc}

08002c38 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c38:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002c3a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c3c:	4290      	cmp	r0, r2
 8002c3e:	d00a      	beq.n	8002c56 <TIM_Base_SetConfig+0x1e>
 8002c40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0x1e>
 8002c46:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c4a:	4290      	cmp	r0, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0x1e>
 8002c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c52:	4290      	cmp	r0, r2
 8002c54:	d115      	bne.n	8002c82 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002c56:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c5c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5e:	4a11      	ldr	r2, [pc, #68]	; (8002ca4 <TIM_Base_SetConfig+0x6c>)
 8002c60:	4290      	cmp	r0, r2
 8002c62:	d00a      	beq.n	8002c7a <TIM_Base_SetConfig+0x42>
 8002c64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x42>
 8002c6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c6e:	4290      	cmp	r0, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x42>
 8002c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c76:	4290      	cmp	r0, r2
 8002c78:	d103      	bne.n	8002c82 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c82:	694a      	ldr	r2, [r1, #20]
 8002c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c88:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002c8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c8c:	688b      	ldr	r3, [r1, #8]
 8002c8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c90:	680b      	ldr	r3, [r1, #0]
 8002c92:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <TIM_Base_SetConfig+0x6c>)
 8002c96:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002c98:	bf04      	itt	eq
 8002c9a:	690b      	ldreq	r3, [r1, #16]
 8002c9c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	6143      	str	r3, [r0, #20]
 8002ca2:	4770      	bx	lr
 8002ca4:	40012c00 	.word	0x40012c00

08002ca8 <HAL_TIM_Base_Init>:
{
 8002ca8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002caa:	4604      	mov	r4, r0
 8002cac:	b1a0      	cbz	r0, 8002cd8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cb6:	b91b      	cbnz	r3, 8002cc0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002cb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002cbc:	f001 fc26 	bl	800450c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	1d21      	adds	r1, r4, #4
 8002cca:	f7ff ffb5 	bl	8002c38 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002cce:	2301      	movs	r3, #1
  return HAL_OK;
 8002cd0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002cd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002cd6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cd8:	2001      	movs	r0, #1
}
 8002cda:	bd10      	pop	{r4, pc}

08002cdc <HAL_TIM_PWM_Init>:
{
 8002cdc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002cde:	4604      	mov	r4, r0
 8002ce0:	b1a0      	cbz	r0, 8002d0c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ce6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cea:	b91b      	cbnz	r3, 8002cf4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002cec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002cf0:	f7ff fefa 	bl	8002ae8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfc:	1d21      	adds	r1, r4, #4
 8002cfe:	f7ff ff9b 	bl	8002c38 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002d02:	2301      	movs	r3, #1
  return HAL_OK;
 8002d04:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d0c:	2001      	movs	r0, #1
}
 8002d0e:	bd10      	pop	{r4, pc}

08002d10 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d10:	6a03      	ldr	r3, [r0, #32]
{
 8002d12:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d14:	f023 0310 	bic.w	r3, r3, #16
 8002d18:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002d1a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002d1c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002d1e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d22:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d2a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002d2c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d34:	4d0b      	ldr	r5, [pc, #44]	; (8002d64 <TIM_OC2_SetConfig+0x54>)
 8002d36:	42a8      	cmp	r0, r5
 8002d38:	d10d      	bne.n	8002d56 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d3a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d44:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d46:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d48:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d4c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d52:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002d56:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d58:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d5a:	684a      	ldr	r2, [r1, #4]
 8002d5c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002d5e:	6203      	str	r3, [r0, #32]
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
 8002d62:	bf00      	nop
 8002d64:	40012c00 	.word	0x40012c00

08002d68 <HAL_TIM_PWM_ConfigChannel>:
{
 8002d68:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002d6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d6e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	f04f 0002 	mov.w	r0, #2
 8002d76:	d025      	beq.n	8002dc4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002d78:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002d7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002d82:	2a0c      	cmp	r2, #12
 8002d84:	d818      	bhi.n	8002db8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002d86:	e8df f002 	tbb	[pc, r2]
 8002d8a:	1707      	.short	0x1707
 8002d8c:	171e1717 	.word	0x171e1717
 8002d90:	172f1717 	.word	0x172f1717
 8002d94:	1717      	.short	0x1717
 8002d96:	40          	.byte	0x40
 8002d97:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d98:	6820      	ldr	r0, [r4, #0]
 8002d9a:	f7ff fe0f 	bl	80029bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d9e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002da0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	f042 0208 	orr.w	r2, r2, #8
 8002da8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	f022 0204 	bic.w	r2, r2, #4
 8002db0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002db8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002dba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002dc0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002dc4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	f7ff ffa2 	bl	8002d10 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dcc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dce:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002de6:	e7e6      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002de8:	6820      	ldr	r0, [r4, #0]
 8002dea:	f7ff fe0f 	bl	8002a0c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	f042 0208 	orr.w	r2, r2, #8
 8002df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	f022 0204 	bic.w	r2, r2, #4
 8002e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e06:	61da      	str	r2, [r3, #28]
      break;
 8002e08:	e7d6      	b.n	8002db8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e0a:	6820      	ldr	r0, [r4, #0]
 8002e0c:	f7ff fe28 	bl	8002a60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e10:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e12:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e2a:	e7ec      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e2c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e2e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e30:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e32:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e36:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002e3a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3c:	6083      	str	r3, [r0, #8]
 8002e3e:	bd10      	pop	{r4, pc}

08002e40 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002e40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002e44:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002e46:	2b01      	cmp	r3, #1
{
 8002e48:	4604      	mov	r4, r0
 8002e4a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002e4e:	d019      	beq.n	8002e84 <HAL_TIM_ConfigClockSource+0x44>
 8002e50:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002e52:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002e56:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002e58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002e66:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002e68:	680b      	ldr	r3, [r1, #0]
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d065      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0xfa>
 8002e6e:	d815      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x5c>
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d00c      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x4e>
 8002e74:	d807      	bhi.n	8002e86 <HAL_TIM_ConfigClockSource+0x46>
 8002e76:	b153      	cbz	r3, 8002e8e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002e7a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002e80:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e84:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d001      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x4e>
 8002e8a:	2b30      	cmp	r3, #48	; 0x30
 8002e8c:	d1f4      	bne.n	8002e78 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002e8e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e90:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	e01a      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002e9c:	2b60      	cmp	r3, #96	; 0x60
 8002e9e:	d034      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0xca>
 8002ea0:	d819      	bhi.n	8002ed6 <HAL_TIM_ConfigClockSource+0x96>
 8002ea2:	2b50      	cmp	r3, #80	; 0x50
 8002ea4:	d1e8      	bne.n	8002e78 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	684a      	ldr	r2, [r1, #4]
 8002ea8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002eaa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eac:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eae:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb2:	f025 0501 	bic.w	r5, r5, #1
 8002eb6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002eba:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ec0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002ec4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ec6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002ec8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ece:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002ed2:	6083      	str	r3, [r0, #8]
 8002ed4:	e7d0      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002ed6:	2b70      	cmp	r3, #112	; 0x70
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_TIM_ConfigClockSource+0xb4>
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ede:	d1cb      	bne.n	8002e78 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002ee0:	68cb      	ldr	r3, [r1, #12]
 8002ee2:	684a      	ldr	r2, [r1, #4]
 8002ee4:	6889      	ldr	r1, [r1, #8]
 8002ee6:	f7ff ffa1 	bl	8002e2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eea:	6822      	ldr	r2, [r4, #0]
 8002eec:	6893      	ldr	r3, [r2, #8]
 8002eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef2:	e008      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002ef4:	68cb      	ldr	r3, [r1, #12]
 8002ef6:	684a      	ldr	r2, [r1, #4]
 8002ef8:	6889      	ldr	r1, [r1, #8]
 8002efa:	f7ff ff97 	bl	8002e2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002efe:	6822      	ldr	r2, [r4, #0]
 8002f00:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f06:	6093      	str	r3, [r2, #8]
      break;
 8002f08:	e7b6      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0a:	684d      	ldr	r5, [r1, #4]
 8002f0c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0e:	6a01      	ldr	r1, [r0, #32]
 8002f10:	f021 0110 	bic.w	r1, r1, #16
 8002f14:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f16:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002f18:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f1a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f22:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f26:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002f2a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f2c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f2e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f34:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002f38:	e7cb      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3a:	684a      	ldr	r2, [r1, #4]
 8002f3c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f3e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f40:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f42:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f46:	f025 0501 	bic.w	r5, r5, #1
 8002f4a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002f4e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f54:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002f58:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f5a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f5c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f62:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002f66:	e7b4      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x92>

08002f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f68:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f6a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f6c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f6e:	f001 011f 	and.w	r1, r1, #31
 8002f72:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002f74:	ea23 0304 	bic.w	r3, r3, r4
 8002f78:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f7a:	6a03      	ldr	r3, [r0, #32]
 8002f7c:	408a      	lsls	r2, r1
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	6202      	str	r2, [r0, #32]
 8002f82:	bd10      	pop	{r4, pc}

08002f84 <HAL_TIM_PWM_Start>:
{
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f88:	2201      	movs	r2, #1
 8002f8a:	6800      	ldr	r0, [r0, #0]
 8002f8c:	f7ff ffec 	bl	8002f68 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <HAL_TIM_PWM_Start+0x34>)
}
 8002f94:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f96:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8002f98:	bf02      	ittt	eq
 8002f9a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002f9c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002fa0:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002faa:	bf1e      	ittt	ne
 8002fac:	681a      	ldrne	r2, [r3, #0]
 8002fae:	f042 0201 	orrne.w	r2, r2, #1
 8002fb2:	601a      	strne	r2, [r3, #0]
}
 8002fb4:	bd10      	pop	{r4, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40012c00 	.word	0x40012c00

08002fbc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002fc0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f04f 0302 	mov.w	r3, #2
 8002fc8:	d014      	beq.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fca:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002fd0:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd2:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd4:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd6:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe0:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fe4:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fe6:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002ff4:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002ff6:	bd30      	pop	{r4, r5, pc}

08002ff8 <HAL_TIMEx_CommutCallback>:
 8002ff8:	4770      	bx	lr

08002ffa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ffa:	4770      	bx	lr

08002ffc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ffc:	6803      	ldr	r3, [r0, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003004:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800300e:	2320      	movs	r3, #32
 8003010:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003014:	4770      	bx	lr
	...

08003018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800301c:	6803      	ldr	r3, [r0, #0]
 800301e:	68c1      	ldr	r1, [r0, #12]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	2419      	movs	r4, #25
 8003024:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003028:	430a      	orrs	r2, r1
 800302a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800302c:	6882      	ldr	r2, [r0, #8]
 800302e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003030:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003032:	4302      	orrs	r2, r0
 8003034:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003036:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800303a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800303e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003040:	430a      	orrs	r2, r1
 8003042:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	69a9      	ldr	r1, [r5, #24]
 8003048:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800304c:	430a      	orrs	r2, r1
 800304e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003050:	4a0d      	ldr	r2, [pc, #52]	; (8003088 <UART_SetConfig+0x70>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d114      	bne.n	8003080 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003056:	f7ff fc29 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305a:	4360      	muls	r0, r4
 800305c:	686c      	ldr	r4, [r5, #4]
 800305e:	2264      	movs	r2, #100	; 0x64
 8003060:	00a4      	lsls	r4, r4, #2
 8003062:	fbb0 f0f4 	udiv	r0, r0, r4
 8003066:	fbb0 f4f2 	udiv	r4, r0, r2
 800306a:	fb02 0314 	mls	r3, r2, r4, r0
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	3332      	adds	r3, #50	; 0x32
 8003072:	fbb3 f3f2 	udiv	r3, r3, r2
 8003076:	6829      	ldr	r1, [r5, #0]
 8003078:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800307c:	608b      	str	r3, [r1, #8]
 800307e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003080:	f7ff fc04 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8003084:	e7e9      	b.n	800305a <UART_SetConfig+0x42>
 8003086:	bf00      	nop
 8003088:	40013800 	.word	0x40013800

0800308c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	4604      	mov	r4, r0
 8003090:	460e      	mov	r6, r1
 8003092:	4617      	mov	r7, r2
 8003094:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003096:	6821      	ldr	r1, [r4, #0]
 8003098:	680b      	ldr	r3, [r1, #0]
 800309a:	ea36 0303 	bics.w	r3, r6, r3
 800309e:	d101      	bne.n	80030a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80030a0:	2000      	movs	r0, #0
}
 80030a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80030a4:	1c6b      	adds	r3, r5, #1
 80030a6:	d0f7      	beq.n	8003098 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030a8:	b995      	cbnz	r5, 80030d0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030aa:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80030ac:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80030be:	2320      	movs	r3, #32
 80030c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80030c4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80030c8:	2300      	movs	r3, #0
 80030ca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80030ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030d0:	f7fd ffee 	bl	80010b0 <HAL_GetTick>
 80030d4:	1bc0      	subs	r0, r0, r7
 80030d6:	4285      	cmp	r5, r0
 80030d8:	d2dd      	bcs.n	8003096 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80030da:	e7e6      	b.n	80030aa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080030dc <HAL_UART_Init>:
{
 80030dc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80030de:	4604      	mov	r4, r0
 80030e0:	b340      	cbz	r0, 8003134 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80030e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80030e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030ea:	b91b      	cbnz	r3, 80030f4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80030ec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80030f0:	f001 fad4 	bl	800469c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80030f4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80030f6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80030fc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80030fe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003104:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003106:	f7ff ff87 	bl	8003018 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800311c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003124:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003126:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003128:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800312a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800312e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003132:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003134:	2001      	movs	r0, #1
}
 8003136:	bd10      	pop	{r4, pc}

08003138 <HAL_UART_Transmit>:
{
 8003138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800313c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800313e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003142:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003144:	2b20      	cmp	r3, #32
{
 8003146:	460d      	mov	r5, r1
 8003148:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800314a:	d14e      	bne.n	80031ea <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 800314c:	2900      	cmp	r1, #0
 800314e:	d049      	beq.n	80031e4 <HAL_UART_Transmit+0xac>
 8003150:	2a00      	cmp	r2, #0
 8003152:	d047      	beq.n	80031e4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003154:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003158:	2b01      	cmp	r3, #1
 800315a:	d046      	beq.n	80031ea <HAL_UART_Transmit+0xb2>
 800315c:	2301      	movs	r3, #1
 800315e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003162:	2300      	movs	r3, #0
 8003164:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003166:	2321      	movs	r3, #33	; 0x21
 8003168:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800316c:	f7fd ffa0 	bl	80010b0 <HAL_GetTick>
 8003170:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003172:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003176:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800317a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800317c:	b29b      	uxth	r3, r3
 800317e:	b96b      	cbnz	r3, 800319c <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003180:	463b      	mov	r3, r7
 8003182:	4632      	mov	r2, r6
 8003184:	2140      	movs	r1, #64	; 0x40
 8003186:	4620      	mov	r0, r4
 8003188:	f7ff ff80 	bl	800308c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800318c:	b9a8      	cbnz	r0, 80031ba <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800318e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003190:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003194:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800319c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031a6:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a8:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ae:	4620      	mov	r0, r4
 80031b0:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031b2:	d10e      	bne.n	80031d2 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b4:	f7ff ff6a 	bl	800308c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80031b8:	b110      	cbz	r0, 80031c0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80031ba:	2003      	movs	r0, #3
 80031bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031c0:	882b      	ldrh	r3, [r5, #0]
 80031c2:	6822      	ldr	r2, [r4, #0]
 80031c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c8:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031ca:	6923      	ldr	r3, [r4, #16]
 80031cc:	b943      	cbnz	r3, 80031e0 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 80031ce:	3502      	adds	r5, #2
 80031d0:	e7d3      	b.n	800317a <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031d2:	f7ff ff5b 	bl	800308c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d1ef      	bne.n	80031ba <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	782a      	ldrb	r2, [r5, #0]
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	3501      	adds	r5, #1
 80031e2:	e7ca      	b.n	800317a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80031e4:	2001      	movs	r0, #1
 80031e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80031ea:	2002      	movs	r0, #2
}
 80031ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031f0 <HAL_UART_Receive>:
{
 80031f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f4:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80031fa:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80031fc:	2b20      	cmp	r3, #32
{
 80031fe:	460d      	mov	r5, r1
 8003200:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003202:	d151      	bne.n	80032a8 <HAL_UART_Receive+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8003204:	2900      	cmp	r1, #0
 8003206:	d04c      	beq.n	80032a2 <HAL_UART_Receive+0xb2>
 8003208:	2a00      	cmp	r2, #0
 800320a:	d04a      	beq.n	80032a2 <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 800320c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003210:	2b01      	cmp	r3, #1
 8003212:	d049      	beq.n	80032a8 <HAL_UART_Receive+0xb8>
 8003214:	2301      	movs	r3, #1
 8003216:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321a:	2300      	movs	r3, #0
 800321c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800321e:	2322      	movs	r3, #34	; 0x22
 8003220:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8003224:	f7fd ff44 	bl	80010b0 <HAL_GetTick>
 8003228:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 800322a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800322e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003232:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003234:	b280      	uxth	r0, r0
 8003236:	b930      	cbnz	r0, 8003246 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8003238:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800323a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 800323e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8003242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8003246:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003248:	4632      	mov	r2, r6
      huart->RxXferCount--;
 800324a:	3b01      	subs	r3, #1
 800324c:	b29b      	uxth	r3, r3
 800324e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003250:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	2120      	movs	r1, #32
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003258:	4620      	mov	r0, r4
 800325a:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800325c:	d112      	bne.n	8003284 <HAL_UART_Receive+0x94>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800325e:	f7ff ff15 	bl	800308c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003262:	b110      	cbz	r0, 800326a <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8003264:	2003      	movs	r0, #3
 8003266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800326a:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800326c:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800326e:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003270:	b922      	cbnz	r2, 800327c <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	f825 3b02 	strh.w	r3, [r5], #2
 800327a:	e7da      	b.n	8003232 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f825 3b01 	strh.w	r3, [r5], #1
 8003282:	e7d6      	b.n	8003232 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003284:	f7ff ff02 	bl	800308c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003288:	2800      	cmp	r0, #0
 800328a:	d1eb      	bne.n	8003264 <HAL_UART_Receive+0x74>
 800328c:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800328e:	6921      	ldr	r1, [r4, #16]
 8003290:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003292:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003294:	b911      	cbnz	r1, 800329c <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003296:	702b      	strb	r3, [r5, #0]
 8003298:	4615      	mov	r5, r2
 800329a:	e7ca      	b.n	8003232 <HAL_UART_Receive+0x42>
 800329c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a0:	e7f9      	b.n	8003296 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 80032a2:	2001      	movs	r0, #1
 80032a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80032a8:	2002      	movs	r0, #2
}
 80032aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032ae <HAL_UART_TxCpltCallback>:
 80032ae:	4770      	bx	lr

080032b0 <HAL_UART_RxCpltCallback>:
 80032b0:	4770      	bx	lr

080032b2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032b2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80032b6:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032b8:	2b22      	cmp	r3, #34	; 0x22
 80032ba:	d136      	bne.n	800332a <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032bc:	6883      	ldr	r3, [r0, #8]
 80032be:	6901      	ldr	r1, [r0, #16]
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c4:	6802      	ldr	r2, [r0, #0]
 80032c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80032c8:	d123      	bne.n	8003312 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ca:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032cc:	b9e9      	cbnz	r1, 800330a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80032d6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80032d8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80032da:	3c01      	subs	r4, #1
 80032dc:	b2a4      	uxth	r4, r4
 80032de:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80032e0:	b98c      	cbnz	r4, 8003306 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032e2:	6803      	ldr	r3, [r0, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	f022 0220 	bic.w	r2, r2, #32
 80032ea:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f2:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80032fc:	2320      	movs	r3, #32
 80032fe:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003302:	f7ff ffd5 	bl	80032b0 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8003306:	2000      	movs	r0, #0
}
 8003308:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f823 2b01 	strh.w	r2, [r3], #1
 8003310:	e7e1      	b.n	80032d6 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003312:	b921      	cbnz	r1, 800331e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003314:	1c59      	adds	r1, r3, #1
 8003316:	6852      	ldr	r2, [r2, #4]
 8003318:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e7dc      	b.n	80032d8 <UART_Receive_IT+0x26>
 800331e:	6852      	ldr	r2, [r2, #4]
 8003320:	1c59      	adds	r1, r3, #1
 8003322:	6281      	str	r1, [r0, #40]	; 0x28
 8003324:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003328:	e7f7      	b.n	800331a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800332a:	2002      	movs	r0, #2
 800332c:	bd10      	pop	{r4, pc}

0800332e <HAL_UART_ErrorCallback>:
 800332e:	4770      	bx	lr

08003330 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003330:	6803      	ldr	r3, [r0, #0]
{
 8003332:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003334:	681a      	ldr	r2, [r3, #0]
{
 8003336:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003338:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800333a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800333c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800333e:	d107      	bne.n	8003350 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003340:	0696      	lsls	r6, r2, #26
 8003342:	d55a      	bpl.n	80033fa <HAL_UART_IRQHandler+0xca>
 8003344:	068d      	lsls	r5, r1, #26
 8003346:	d558      	bpl.n	80033fa <HAL_UART_IRQHandler+0xca>
}
 8003348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800334c:	f7ff bfb1 	b.w	80032b2 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003350:	f015 0501 	ands.w	r5, r5, #1
 8003354:	d102      	bne.n	800335c <HAL_UART_IRQHandler+0x2c>
 8003356:	f411 7f90 	tst.w	r1, #288	; 0x120
 800335a:	d04e      	beq.n	80033fa <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800335c:	07d3      	lsls	r3, r2, #31
 800335e:	d505      	bpl.n	800336c <HAL_UART_IRQHandler+0x3c>
 8003360:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003362:	bf42      	ittt	mi
 8003364:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003366:	f043 0301 	orrmi.w	r3, r3, #1
 800336a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800336c:	0750      	lsls	r0, r2, #29
 800336e:	d504      	bpl.n	800337a <HAL_UART_IRQHandler+0x4a>
 8003370:	b11d      	cbz	r5, 800337a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003372:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800337a:	0793      	lsls	r3, r2, #30
 800337c:	d504      	bpl.n	8003388 <HAL_UART_IRQHandler+0x58>
 800337e:	b11d      	cbz	r5, 8003388 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003388:	0716      	lsls	r6, r2, #28
 800338a:	d504      	bpl.n	8003396 <HAL_UART_IRQHandler+0x66>
 800338c:	b11d      	cbz	r5, 8003396 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800338e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003390:	f043 0308 	orr.w	r3, r3, #8
 8003394:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d066      	beq.n	800346a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800339c:	0695      	lsls	r5, r2, #26
 800339e:	d504      	bpl.n	80033aa <HAL_UART_IRQHandler+0x7a>
 80033a0:	0688      	lsls	r0, r1, #26
 80033a2:	d502      	bpl.n	80033aa <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7ff ff84 	bl	80032b2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033aa:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80033ac:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033ae:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033b2:	0711      	lsls	r1, r2, #28
 80033b4:	d402      	bmi.n	80033bc <HAL_UART_IRQHandler+0x8c>
 80033b6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80033ba:	d01a      	beq.n	80033f2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80033bc:	f7ff fe1e 	bl	8002ffc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	0652      	lsls	r2, r2, #25
 80033c6:	d510      	bpl.n	80033ea <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80033ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80033d2:	b150      	cbz	r0, 80033ea <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <HAL_UART_IRQHandler+0x13c>)
 80033d6:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d8:	f7fe f982 	bl	80016e0 <HAL_DMA_Abort_IT>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d044      	beq.n	800346a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80033e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033e8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7ff ff9f 	bl	800332e <HAL_UART_ErrorCallback>
 80033f0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80033f2:	f7ff ff9c 	bl	800332e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033fa:	0616      	lsls	r6, r2, #24
 80033fc:	d527      	bpl.n	800344e <HAL_UART_IRQHandler+0x11e>
 80033fe:	060d      	lsls	r5, r1, #24
 8003400:	d525      	bpl.n	800344e <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003402:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003406:	2a21      	cmp	r2, #33	; 0x21
 8003408:	d12f      	bne.n	800346a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800340a:	68a2      	ldr	r2, [r4, #8]
 800340c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003410:	6a22      	ldr	r2, [r4, #32]
 8003412:	d117      	bne.n	8003444 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003414:	8811      	ldrh	r1, [r2, #0]
 8003416:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800341a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800341c:	6921      	ldr	r1, [r4, #16]
 800341e:	b979      	cbnz	r1, 8003440 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8003420:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8003422:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003424:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003426:	3a01      	subs	r2, #1
 8003428:	b292      	uxth	r2, r2
 800342a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800342c:	b9ea      	cbnz	r2, 800346a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003434:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8003440:	3201      	adds	r2, #1
 8003442:	e7ee      	b.n	8003422 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003444:	1c51      	adds	r1, r2, #1
 8003446:	6221      	str	r1, [r4, #32]
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	e7ea      	b.n	8003424 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800344e:	0650      	lsls	r0, r2, #25
 8003450:	d50b      	bpl.n	800346a <HAL_UART_IRQHandler+0x13a>
 8003452:	064a      	lsls	r2, r1, #25
 8003454:	d509      	bpl.n	800346a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003456:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003458:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800345a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003460:	2320      	movs	r3, #32
 8003462:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003466:	f7ff ff22 	bl	80032ae <HAL_UART_TxCpltCallback>
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	08003471 	.word	0x08003471

08003470 <UART_DMAAbortOnError>:
{
 8003470:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003472:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003474:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003476:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003478:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800347a:	f7ff ff58 	bl	800332e <HAL_UART_ErrorCallback>
 800347e:	bd08      	pop	{r3, pc}

08003480 <clear_uart_buffer>:
#include "string.h"
#include "stdlib.h"
#include "math.h"

void clear_uart_buffer(uint8_t counter, uint8_t len,
		               uint8_t buffer[len]){
 8003480:	b510      	push	{r4, lr}
	for(uint8_t i=0; i<len; i++){
 8003482:	4610      	mov	r0, r2
		buffer[i]='\0';
 8003484:	2400      	movs	r4, #0
	for(uint8_t i=0; i<len; i++){
 8003486:	1a83      	subs	r3, r0, r2
 8003488:	b2db      	uxtb	r3, r3
 800348a:	4299      	cmp	r1, r3
 800348c:	d800      	bhi.n	8003490 <clear_uart_buffer+0x10>
	}
}
 800348e:	bd10      	pop	{r4, pc}
		buffer[i]='\0';
 8003490:	f800 4b01 	strb.w	r4, [r0], #1
 8003494:	e7f7      	b.n	8003486 <clear_uart_buffer+0x6>

08003496 <UART_Transmit_string_CR_LF>:
	HAL_Delay(10);
}

void UART_Transmit_string_CR_LF(UART_HandleTypeDef *huart,
		                    char *pData, uint32_t Timeout)
{
 8003496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t end_code  = 13; //ASCII '\r'
 8003498:	230d      	movs	r3, #13
	uint8_t enter_code  = 10; //ASCII '\r'
 800349a:	240a      	movs	r4, #10
{
 800349c:	4605      	mov	r5, r0

	HAL_UART_Transmit(huart, pData, strlen(pData), Timeout);
 800349e:	4608      	mov	r0, r1
{
 80034a0:	4616      	mov	r6, r2
 80034a2:	460f      	mov	r7, r1
	uint8_t end_code  = 13; //ASCII '\r'
 80034a4:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t enter_code  = 10; //ASCII '\r'
 80034a8:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_UART_Transmit(huart, pData, strlen(pData), Timeout);
 80034ac:	f7fc fe5a 	bl	8000164 <strlen>
 80034b0:	4633      	mov	r3, r6
 80034b2:	b282      	uxth	r2, r0
 80034b4:	4639      	mov	r1, r7
 80034b6:	4628      	mov	r0, r5
 80034b8:	f7ff fe3e 	bl	8003138 <HAL_UART_Transmit>
	HAL_Delay(10);
 80034bc:	4620      	mov	r0, r4
 80034be:	f7fd fdfd 	bl	80010bc <HAL_Delay>
	HAL_UART_Transmit(huart, &end_code, 1, Timeout);
 80034c2:	4633      	mov	r3, r6
 80034c4:	f10d 0106 	add.w	r1, sp, #6
 80034c8:	2201      	movs	r2, #1
 80034ca:	4628      	mov	r0, r5
 80034cc:	f7ff fe34 	bl	8003138 <HAL_UART_Transmit>
	HAL_Delay(10);
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7fd fdf3 	bl	80010bc <HAL_Delay>
	HAL_UART_Transmit(huart, &enter_code, 1, Timeout);
 80034d6:	4633      	mov	r3, r6
 80034d8:	2201      	movs	r2, #1
 80034da:	f10d 0107 	add.w	r1, sp, #7
 80034de:	4628      	mov	r0, r5
 80034e0:	f7ff fe2a 	bl	8003138 <HAL_UART_Transmit>
	HAL_Delay(10);
 80034e4:	4620      	mov	r0, r4
 80034e6:	f7fd fde9 	bl	80010bc <HAL_Delay>

}
 80034ea:	b003      	add	sp, #12
 80034ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080034f0 <UART_send_float>:

void UART_send_float(float number)
{
 80034f0:	b530      	push	{r4, r5, lr}
	char* point = ".";
	char temp[100] = "";
 80034f2:	2400      	movs	r4, #0
{
 80034f4:	b09d      	sub	sp, #116	; 0x74
	char temp[100] = "";
 80034f6:	4621      	mov	r1, r4
 80034f8:	2260      	movs	r2, #96	; 0x60
{
 80034fa:	4605      	mov	r5, r0
	char temp[100] = "";
 80034fc:	a804      	add	r0, sp, #16
 80034fe:	9403      	str	r4, [sp, #12]
 8003500:	f001 f97a 	bl	80047f8 <memset>
	volatile int n = 0;

    volatile float reminder, quotient = 0.0;
 8003504:	2300      	movs	r3, #0

	quotient = (int)(number);
 8003506:	4628      	mov	r0, r5
	volatile int n = 0;
 8003508:	9400      	str	r4, [sp, #0]
    volatile float reminder, quotient = 0.0;
 800350a:	9302      	str	r3, [sp, #8]
	quotient = (int)(number);
 800350c:	f7fd fd48 	bl	8000fa0 <__aeabi_f2iz>
 8003510:	f7fd fb2c 	bl	8000b6c <__aeabi_i2f>
 8003514:	9002      	str	r0, [sp, #8]
	n = quotient;
 8003516:	9802      	ldr	r0, [sp, #8]
 8003518:	f7fd fd42 	bl	8000fa0 <__aeabi_f2iz>
 800351c:	9000      	str	r0, [sp, #0]

	itoa(n, temp, 10);
 800351e:	a903      	add	r1, sp, #12
 8003520:	220a      	movs	r2, #10
 8003522:	9800      	ldr	r0, [sp, #0]
 8003524:	f001 f966 	bl	80047f4 <itoa>
	HAL_UART_Transmit(&huart1, temp, strlen(temp), 10);
 8003528:	a803      	add	r0, sp, #12
 800352a:	f7fc fe1b 	bl	8000164 <strlen>
 800352e:	4c19      	ldr	r4, [pc, #100]	; (8003594 <UART_send_float+0xa4>)
 8003530:	b282      	uxth	r2, r0
 8003532:	a903      	add	r1, sp, #12
 8003534:	230a      	movs	r3, #10
 8003536:	4620      	mov	r0, r4
 8003538:	f7ff fdfe 	bl	8003138 <HAL_UART_Transmit>
	HAL_Delay(10);
 800353c:	200a      	movs	r0, #10
 800353e:	f7fd fdbd 	bl	80010bc <HAL_Delay>

	HAL_UART_Transmit(&huart1, point, 1, 10);
 8003542:	230a      	movs	r3, #10
 8003544:	2201      	movs	r2, #1
 8003546:	4914      	ldr	r1, [pc, #80]	; (8003598 <UART_send_float+0xa8>)
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff fdf5 	bl	8003138 <HAL_UART_Transmit>
	HAL_Delay(10);
 800354e:	200a      	movs	r0, #10
 8003550:	f7fd fdb4 	bl	80010bc <HAL_Delay>

	reminder = fabs(number - quotient);
 8003554:	9902      	ldr	r1, [sp, #8]
 8003556:	4628      	mov	r0, r5
 8003558:	f7fd fa52 	bl	8000a00 <__aeabi_fsub>
 800355c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003560:	9001      	str	r0, [sp, #4]
	reminder = (int)(reminder*1000);
 8003562:	9801      	ldr	r0, [sp, #4]
 8003564:	490d      	ldr	r1, [pc, #52]	; (800359c <UART_send_float+0xac>)
 8003566:	f7fd fb55 	bl	8000c14 <__aeabi_fmul>
 800356a:	f7fd fd19 	bl	8000fa0 <__aeabi_f2iz>
 800356e:	f7fd fafd 	bl	8000b6c <__aeabi_i2f>
 8003572:	9001      	str	r0, [sp, #4]
	n = reminder;
 8003574:	9801      	ldr	r0, [sp, #4]
 8003576:	f7fd fd13 	bl	8000fa0 <__aeabi_f2iz>
 800357a:	9000      	str	r0, [sp, #0]
	itoa(n, temp, 10);
 800357c:	a903      	add	r1, sp, #12
 800357e:	9800      	ldr	r0, [sp, #0]
 8003580:	220a      	movs	r2, #10
 8003582:	f001 f937 	bl	80047f4 <itoa>

	UART_Transmit_string_CR_LF(&huart1, temp, 10);
 8003586:	220a      	movs	r2, #10
 8003588:	a903      	add	r1, sp, #12
 800358a:	4620      	mov	r0, r4
 800358c:	f7ff ff83 	bl	8003496 <UART_Transmit_string_CR_LF>
}
 8003590:	b01d      	add	sp, #116	; 0x74
 8003592:	bd30      	pop	{r4, r5, pc}
 8003594:	200004f4 	.word	0x200004f4
 8003598:	08004dd0 	.word	0x08004dd0
 800359c:	447a0000 	.word	0x447a0000

080035a0 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80035a0:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <DWT_Init+0x20>)
 80035a2:	68d3      	ldr	r3, [r2, #12]
 80035a4:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 80035a8:	d109      	bne.n	80035be <DWT_Init+0x1e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80035aa:	68d1      	ldr	r1, [r2, #12]
 80035ac:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80035b0:	60d1      	str	r1, [r2, #12]
        DWT->CYCCNT = 0;
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <DWT_Init+0x24>)
 80035b4:	6053      	str	r3, [r2, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4770      	bx	lr
 80035c0:	e000edf0 	.word	0xe000edf0
 80035c4:	e0001000 	.word	0xe0001000

080035c8 <array_averaging>:
	return number;
}

float array_averaging(int len, float array[len])
{
	volatile float averaged = 0;
 80035c8:	2300      	movs	r3, #0
{
 80035ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035cc:	4605      	mov	r5, r0
 80035ce:	460e      	mov	r6, r1
	for(int i = 0; i < len; i++)
 80035d0:	2400      	movs	r4, #0
	volatile float averaged = 0;
 80035d2:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < len; i++)
 80035d4:	42ac      	cmp	r4, r5
 80035d6:	db0b      	blt.n	80035f0 <array_averaging+0x28>
	{
		averaged += array[i];
	}
	averaged = averaged/(float)len;
 80035d8:	4628      	mov	r0, r5
 80035da:	f7fd fac7 	bl	8000b6c <__aeabi_i2f>
 80035de:	9c01      	ldr	r4, [sp, #4]
 80035e0:	4601      	mov	r1, r0
 80035e2:	4620      	mov	r0, r4
 80035e4:	f7fd fbca 	bl	8000d7c <__aeabi_fdiv>
 80035e8:	9001      	str	r0, [sp, #4]
	return averaged;
 80035ea:	9801      	ldr	r0, [sp, #4]
}
 80035ec:	b002      	add	sp, #8
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
		averaged += array[i];
 80035f0:	9801      	ldr	r0, [sp, #4]
 80035f2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80035f6:	f7fd fa05 	bl	8000a04 <__addsf3>
	for(int i = 0; i < len; i++)
 80035fa:	3401      	adds	r4, #1
		averaged += array[i];
 80035fc:	9001      	str	r0, [sp, #4]
 80035fe:	e7e9      	b.n	80035d4 <array_averaging+0xc>

08003600 <arrays_xy_averaging>:

float arrays_xy_averaging(int len, float x_array[len], float y_array[len])
{
	volatile float xy = 0;
 8003600:	2300      	movs	r3, #0
{
 8003602:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003606:	4605      	mov	r5, r0
 8003608:	460e      	mov	r6, r1
 800360a:	4617      	mov	r7, r2
	for(int i = 0; i < len; i++)
 800360c:	2400      	movs	r4, #0
	volatile float xy = 0;
 800360e:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < len; i++)
 8003610:	42ac      	cmp	r4, r5
 8003612:	db0c      	blt.n	800362e <arrays_xy_averaging+0x2e>
	{
		xy += (x_array[i]*y_array[i]);

	}
	xy = xy/(float)len;
 8003614:	4628      	mov	r0, r5
 8003616:	f7fd faa9 	bl	8000b6c <__aeabi_i2f>
 800361a:	9c01      	ldr	r4, [sp, #4]
 800361c:	4601      	mov	r1, r0
 800361e:	4620      	mov	r0, r4
 8003620:	f7fd fbac 	bl	8000d7c <__aeabi_fdiv>
 8003624:	9001      	str	r0, [sp, #4]
	return xy;
 8003626:	9801      	ldr	r0, [sp, #4]
}
 8003628:	b002      	add	sp, #8
 800362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xy += (x_array[i]*y_array[i]);
 800362e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003632:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8003636:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800363a:	f7fd faeb 	bl	8000c14 <__aeabi_fmul>
 800363e:	4641      	mov	r1, r8
 8003640:	f7fd f9e0 	bl	8000a04 <__addsf3>
	for(int i = 0; i < len; i++)
 8003644:	3401      	adds	r4, #1
		xy += (x_array[i]*y_array[i]);
 8003646:	9001      	str	r0, [sp, #4]
 8003648:	e7e2      	b.n	8003610 <arrays_xy_averaging+0x10>

0800364a <disperssion>:

float disperssion(int len, float array[len])
{
	volatile float S, averaged = 0;
 800364a:	2300      	movs	r3, #0
{
 800364c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800364e:	4605      	mov	r5, r0
 8003650:	460e      	mov	r6, r1
	for(int i = 0; i < len; i++)
 8003652:	2400      	movs	r4, #0
	volatile float S, averaged = 0;
 8003654:	9301      	str	r3, [sp, #4]
	for(int i = 0; i < len; i++)
 8003656:	42ac      	cmp	r4, r5
 8003658:	db1e      	blt.n	8003698 <disperssion+0x4e>
	{
		S += (array[i]*array[i]);
		HAL_Delay(1);
	}

	averaged = array_averaging(len,array);
 800365a:	4631      	mov	r1, r6
 800365c:	4628      	mov	r0, r5
 800365e:	f7ff ffb3 	bl	80035c8 <array_averaging>
 8003662:	9001      	str	r0, [sp, #4]

	S = (S/len - (averaged*averaged));
 8003664:	4628      	mov	r0, r5
 8003666:	f7fd fa81 	bl	8000b6c <__aeabi_i2f>
 800366a:	9c00      	ldr	r4, [sp, #0]
 800366c:	4601      	mov	r1, r0
 800366e:	4620      	mov	r0, r4
 8003670:	f7fd fb84 	bl	8000d7c <__aeabi_fdiv>
 8003674:	9e01      	ldr	r6, [sp, #4]
 8003676:	9f01      	ldr	r7, [sp, #4]
 8003678:	4604      	mov	r4, r0
 800367a:	4639      	mov	r1, r7
 800367c:	4630      	mov	r0, r6
 800367e:	f7fd fac9 	bl	8000c14 <__aeabi_fmul>
 8003682:	4601      	mov	r1, r0
 8003684:	4620      	mov	r0, r4
 8003686:	f7fd f9bb 	bl	8000a00 <__aeabi_fsub>
 800368a:	9000      	str	r0, [sp, #0]
	HAL_Delay(1);
 800368c:	2001      	movs	r0, #1
 800368e:	f7fd fd15 	bl	80010bc <HAL_Delay>

	return S;
 8003692:	9800      	ldr	r0, [sp, #0]
}
 8003694:	b003      	add	sp, #12
 8003696:	bdf0      	pop	{r4, r5, r6, r7, pc}
		S += (array[i]*array[i]);
 8003698:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800369c:	9f00      	ldr	r7, [sp, #0]
 800369e:	4608      	mov	r0, r1
 80036a0:	f7fd fab8 	bl	8000c14 <__aeabi_fmul>
 80036a4:	4639      	mov	r1, r7
 80036a6:	f7fd f9ad 	bl	8000a04 <__addsf3>
 80036aa:	9000      	str	r0, [sp, #0]
		HAL_Delay(1);
 80036ac:	2001      	movs	r0, #1
 80036ae:	f7fd fd05 	bl	80010bc <HAL_Delay>
	for(int i = 0; i < len; i++)
 80036b2:	3401      	adds	r4, #1
 80036b4:	e7cf      	b.n	8003656 <disperssion+0xc>

080036b6 <linear_regression>:

void linear_regression(int len, float X[len], float Y[len],
		               float* a, float* b)
{
 80036b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b8:	461f      	mov	r7, r3
	volatile float res_a, res_b, x_averaged, y_averaged, xy_averaged, Sx = 0;
 80036ba:	2300      	movs	r3, #0
{
 80036bc:	b087      	sub	sp, #28
	volatile float res_a, res_b, x_averaged, y_averaged, xy_averaged, Sx = 0;
 80036be:	9305      	str	r3, [sp, #20]
{
 80036c0:	4604      	mov	r4, r0
 80036c2:	460d      	mov	r5, r1
 80036c4:	4616      	mov	r6, r2

	x_averaged = array_averaging(len,X);
 80036c6:	f7ff ff7f 	bl	80035c8 <array_averaging>

    y_averaged = array_averaging(len,Y);
 80036ca:	4631      	mov	r1, r6
	x_averaged = array_averaging(len,X);
 80036cc:	9002      	str	r0, [sp, #8]
    y_averaged = array_averaging(len,Y);
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff ff7a 	bl	80035c8 <array_averaging>

    xy_averaged = arrays_xy_averaging(len,X,Y);
 80036d4:	4632      	mov	r2, r6
    y_averaged = array_averaging(len,Y);
 80036d6:	9003      	str	r0, [sp, #12]
    xy_averaged = arrays_xy_averaging(len,X,Y);
 80036d8:	4629      	mov	r1, r5
 80036da:	4620      	mov	r0, r4
 80036dc:	f7ff ff90 	bl	8003600 <arrays_xy_averaging>

    Sx = disperssion(len,X);
 80036e0:	4629      	mov	r1, r5
    xy_averaged = arrays_xy_averaging(len,X,Y);
 80036e2:	9004      	str	r0, [sp, #16]
    Sx = disperssion(len,X);
 80036e4:	4620      	mov	r0, r4
 80036e6:	f7ff ffb0 	bl	800364a <disperssion>
 80036ea:	9005      	str	r0, [sp, #20]

    res_b = (xy_averaged - x_averaged*y_averaged)/Sx;
 80036ec:	9d04      	ldr	r5, [sp, #16]
 80036ee:	9802      	ldr	r0, [sp, #8]
 80036f0:	9903      	ldr	r1, [sp, #12]
 80036f2:	f7fd fa8f 	bl	8000c14 <__aeabi_fmul>
 80036f6:	9c05      	ldr	r4, [sp, #20]
 80036f8:	4601      	mov	r1, r0
 80036fa:	4628      	mov	r0, r5
 80036fc:	f7fd f980 	bl	8000a00 <__aeabi_fsub>
 8003700:	4621      	mov	r1, r4
 8003702:	f7fd fb3b 	bl	8000d7c <__aeabi_fdiv>
 8003706:	9001      	str	r0, [sp, #4]

    res_a = y_averaged - res_b*x_averaged;
 8003708:	9c03      	ldr	r4, [sp, #12]
 800370a:	9801      	ldr	r0, [sp, #4]
 800370c:	9902      	ldr	r1, [sp, #8]
 800370e:	f7fd fa81 	bl	8000c14 <__aeabi_fmul>
 8003712:	4601      	mov	r1, r0
 8003714:	4620      	mov	r0, r4
 8003716:	f7fd f973 	bl	8000a00 <__aeabi_fsub>
 800371a:	9000      	str	r0, [sp, #0]

    *a = res_a;
 800371c:	9b00      	ldr	r3, [sp, #0]
    *b = res_b;
 800371e:	9a01      	ldr	r2, [sp, #4]
    *a = res_a;
 8003720:	603b      	str	r3, [r7, #0]
    *b = res_b;
 8003722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    HAL_Delay(1);
 8003724:	2001      	movs	r0, #1
    *b = res_b;
 8003726:	601a      	str	r2, [r3, #0]
    HAL_Delay(1);
 8003728:	f7fd fcc8 	bl	80010bc <HAL_Delay>

}
 800372c:	b007      	add	sp, #28
 800372e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003730 <PID_init>:
//That is, a->b is equivalent to (*a).b

PIDtypedef* PID_init(PIDtypedef* PID, float *KP, float *KI, float *KD, float *hold)
{

	PID->Kp = *KP;
 8003730:	6809      	ldr	r1, [r1, #0]
{
 8003732:	b510      	push	{r4, lr}
	PID->Kp = *KP;
 8003734:	6001      	str	r1, [r0, #0]
	PID->Ki = *KI;
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	6042      	str	r2, [r0, #4]
	PID->Kd = *KD;
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6083      	str	r3, [r0, #8]

	PID->hold = *hold;
 800373e:	9b02      	ldr	r3, [sp, #8]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60c3      	str	r3, [r0, #12]

	PID->out = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	6103      	str	r3, [r0, #16]
	PID->e = 0;
 8003748:	6143      	str	r3, [r0, #20]


	return PID;
}
 800374a:	bd10      	pop	{r4, pc}

0800374c <integral_part>:




void integral_part(PIDtypedef *PID, float PID_e)
{
 800374c:	b510      	push	{r4, lr}
 800374e:	4604      	mov	r4, r0
 8003750:	4608      	mov	r0, r1
	PID->e=PID_e;
 8003752:	6161      	str	r1, [r4, #20]
	PID->I += PID->Ki * PID->e;
 8003754:	6861      	ldr	r1, [r4, #4]
 8003756:	f7fd fa5d 	bl	8000c14 <__aeabi_fmul>
 800375a:	4601      	mov	r1, r0
 800375c:	69e0      	ldr	r0, [r4, #28]
 800375e:	f7fd f951 	bl	8000a04 <__addsf3>
 8003762:	61e0      	str	r0, [r4, #28]
 8003764:	bd10      	pop	{r4, pc}

08003766 <differential_part>:
}

void differential_part(PIDtypedef *PID, float PID_e)
{
 8003766:	b538      	push	{r3, r4, r5, lr}
 8003768:	4604      	mov	r4, r0

	//PID->e=PID_e;
	PID->D = PID->Kd * (PID->e - PID_e);
 800376a:	6940      	ldr	r0, [r0, #20]
{
 800376c:	460d      	mov	r5, r1
	PID->D = PID->Kd * (PID->e - PID_e);
 800376e:	f7fd f947 	bl	8000a00 <__aeabi_fsub>
 8003772:	68a1      	ldr	r1, [r4, #8]
 8003774:	f7fd fa4e 	bl	8000c14 <__aeabi_fmul>
	PID->e=PID_e;
 8003778:	6165      	str	r5, [r4, #20]
	PID->D = PID->Kd * (PID->e - PID_e);
 800377a:	6220      	str	r0, [r4, #32]
	PID->e=PID_e;
 800377c:	bd38      	pop	{r3, r4, r5, pc}

0800377e <PID>:
	PID->e = PID_e;
	PID->P=PID->Kp*PID->e;
}

void PID(PIDtypedef *PID, float PID_e)
{
 800377e:	b538      	push	{r3, r4, r5, lr}
 8003780:	4604      	mov	r4, r0
	PID->P=PID->Kp*PID->e;
 8003782:	6800      	ldr	r0, [r0, #0]
	PID->e = PID_e;
 8003784:	6161      	str	r1, [r4, #20]
{
 8003786:	460d      	mov	r5, r1
	PID->P=PID->Kp*PID->e;
 8003788:	f7fd fa44 	bl	8000c14 <__aeabi_fmul>
	proportional_part(PID, PID_e);
	differential_part(PID, PID_e);
 800378c:	4629      	mov	r1, r5
	PID->P=PID->Kp*PID->e;
 800378e:	61a0      	str	r0, [r4, #24]
	differential_part(PID, PID_e);
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff ffe8 	bl	8003766 <differential_part>
	integral_part(PID, PID_e);
 8003796:	4629      	mov	r1, r5
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff ffd7 	bl	800374c <integral_part>
	PID->out=PID->P+PID->I+PID->D;
 800379e:	69e1      	ldr	r1, [r4, #28]
 80037a0:	69a0      	ldr	r0, [r4, #24]
 80037a2:	f7fd f92f 	bl	8000a04 <__addsf3>
 80037a6:	6a21      	ldr	r1, [r4, #32]
 80037a8:	f7fd f92c 	bl	8000a04 <__addsf3>
 80037ac:	6120      	str	r0, [r4, #16]
 80037ae:	bd38      	pop	{r3, r4, r5, pc}

080037b0 <SD_MPU6050_SetDataRate>:
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 80037b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 80037b2:	2319      	movs	r3, #25
{
 80037b4:	4605      	mov	r5, r0
	d[1] = rate;

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80037b6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t address = DataStruct->Address;
 80037ba:	780c      	ldrb	r4, [r1, #0]
	d[0] = MPU6050_SMPLRT_DIV;
 80037bc:	f88d 300c 	strb.w	r3, [sp, #12]
	d[1] = rate;
 80037c0:	f88d 200d 	strb.w	r2, [sp, #13]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80037c4:	b2a4      	uxth	r4, r4
 80037c6:	9600      	str	r6, [sp, #0]
 80037c8:	2302      	movs	r3, #2
 80037ca:	aa03      	add	r2, sp, #12
 80037cc:	4621      	mov	r1, r4
 80037ce:	4628      	mov	r0, r5
 80037d0:	f7fe faf4 	bl	8001dbc <HAL_I2C_Master_Transmit>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d1f6      	bne.n	80037c6 <SD_MPU6050_SetDataRate+0x16>
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 80037d8:	b004      	add	sp, #16
 80037da:	bd70      	pop	{r4, r5, r6, pc}

080037dc <SD_MPU6050_SetAccelerometer>:
SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80037dc:	231c      	movs	r3, #28
{
 80037de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037e2:	4607      	mov	r7, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	4616      	mov	r6, r2

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80037e8:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 80037ec:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 80037ee:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80037f0:	f10d 0810 	add.w	r8, sp, #16
 80037f4:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80037f8:	b2ad      	uxth	r5, r5
 80037fa:	f8cd 9000 	str.w	r9, [sp]
 80037fe:	2301      	movs	r3, #1
 8003800:	4642      	mov	r2, r8
 8003802:	4629      	mov	r1, r5
 8003804:	4638      	mov	r0, r7
 8003806:	f7fe fad9 	bl	8001dbc <HAL_I2C_Master_Transmit>
 800380a:	2800      	cmp	r0, #0
 800380c:	d1f5      	bne.n	80037fa <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800380e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8003812:	f8cd 8000 	str.w	r8, [sp]
 8003816:	2301      	movs	r3, #1
 8003818:	f10d 020e 	add.w	r2, sp, #14
 800381c:	4629      	mov	r1, r5
 800381e:	4638      	mov	r0, r7
 8003820:	f7fe fb9a 	bl	8001f58 <HAL_I2C_Master_Receive>
 8003824:	2800      	cmp	r0, #0
 8003826:	d1f4      	bne.n	8003812 <SD_MPU6050_SetAccelerometer+0x36>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8003828:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 800382c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003830:	f023 0318 	bic.w	r3, r3, #24
 8003834:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 8003838:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800383c:	f8cd 8000 	str.w	r8, [sp]
 8003840:	2301      	movs	r3, #1
 8003842:	f10d 020e 	add.w	r2, sp, #14
 8003846:	4629      	mov	r1, r5
 8003848:	4638      	mov	r0, r7
 800384a:	f7fe fab7 	bl	8001dbc <HAL_I2C_Master_Transmit>
 800384e:	2800      	cmp	r0, #0
 8003850:	d1f4      	bne.n	800383c <SD_MPU6050_SetAccelerometer+0x60>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8003852:	2e03      	cmp	r6, #3
 8003854:	d806      	bhi.n	8003864 <SD_MPU6050_SetAccelerometer+0x88>
 8003856:	e8df f006 	tbb	[pc, r6]
 800385a:	0902      	.short	0x0902
 800385c:	0f0c      	.short	0x0f0c
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800385e:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
			break;
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
			break;
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8003862:	60a3      	str	r3, [r4, #8]
			break;
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003864:	2000      	movs	r0, #0
 8003866:	b005      	add	sp, #20
 8003868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 800386c:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 8003870:	e7f7      	b.n	8003862 <SD_MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8003872:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8003876:	e7f4      	b.n	8003862 <SD_MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8003878:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 800387c:	e7f1      	b.n	8003862 <SD_MPU6050_SetAccelerometer+0x86>
	...

08003880 <SD_MPU6050_SetGyroscope>:
SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8003880:	231b      	movs	r3, #27
{
 8003882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003886:	4607      	mov	r7, r0
 8003888:	460c      	mov	r4, r1
 800388a:	4616      	mov	r6, r2

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800388c:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 8003890:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 8003892:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8003894:	f10d 0810 	add.w	r8, sp, #16
 8003898:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800389c:	b2ad      	uxth	r5, r5
 800389e:	f8cd 9000 	str.w	r9, [sp]
 80038a2:	2301      	movs	r3, #1
 80038a4:	4642      	mov	r2, r8
 80038a6:	4629      	mov	r1, r5
 80038a8:	4638      	mov	r0, r7
 80038aa:	f7fe fa87 	bl	8001dbc <HAL_I2C_Master_Transmit>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d1f5      	bne.n	800389e <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80038b2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80038b6:	f8cd 8000 	str.w	r8, [sp]
 80038ba:	2301      	movs	r3, #1
 80038bc:	f10d 020e 	add.w	r2, sp, #14
 80038c0:	4629      	mov	r1, r5
 80038c2:	4638      	mov	r0, r7
 80038c4:	f7fe fb48 	bl	8001f58 <HAL_I2C_Master_Receive>
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d1f4      	bne.n	80038b6 <SD_MPU6050_SetGyroscope+0x36>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80038cc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 80038d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80038d4:	f023 0318 	bic.w	r3, r3, #24
 80038d8:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 80038dc:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80038e0:	f8cd 8000 	str.w	r8, [sp]
 80038e4:	2301      	movs	r3, #1
 80038e6:	f10d 020e 	add.w	r2, sp, #14
 80038ea:	4629      	mov	r1, r5
 80038ec:	4638      	mov	r0, r7
 80038ee:	f7fe fa65 	bl	8001dbc <HAL_I2C_Master_Transmit>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d1f4      	bne.n	80038e0 <SD_MPU6050_SetGyroscope+0x60>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 80038f6:	2e03      	cmp	r6, #3
 80038f8:	d805      	bhi.n	8003906 <SD_MPU6050_SetGyroscope+0x86>
 80038fa:	e8df f006 	tbb	[pc, r6]
 80038fe:	0802      	.short	0x0802
 8003900:	0c0a      	.short	0x0c0a
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <SD_MPU6050_SetGyroscope+0x9c>)
				break;
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
				break;
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8003904:	6063      	str	r3, [r4, #4]
			default:
				break;
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003906:	2000      	movs	r0, #0
 8003908:	b005      	add	sp, #20
 800390a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <SD_MPU6050_SetGyroscope+0xa0>)
 8003910:	e7f8      	b.n	8003904 <SD_MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8003912:	4b04      	ldr	r3, [pc, #16]	; (8003924 <SD_MPU6050_SetGyroscope+0xa4>)
 8003914:	e7f6      	b.n	8003904 <SD_MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <SD_MPU6050_SetGyroscope+0xa8>)
 8003918:	e7f4      	b.n	8003904 <SD_MPU6050_SetGyroscope+0x84>
 800391a:	bf00      	nop
 800391c:	3bfa232d 	.word	0x3bfa232d
 8003920:	3c7a232d 	.word	0x3c7a232d
 8003924:	3cf9c190 	.word	0x3cf9c190
 8003928:	3d79c190 	.word	0x3d79c190

0800392c <SD_MPU6050_Init>:
{
 800392c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003930:	4698      	mov	r8, r3
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8003932:	2375      	movs	r3, #117	; 0x75
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8003934:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8003938:	b294      	uxth	r4, r2
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 800393a:	700a      	strb	r2, [r1, #0]
{
 800393c:	460e      	mov	r6, r1
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800393e:	f88d 300a 	strb.w	r3, [sp, #10]
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8003942:	2202      	movs	r2, #2
 8003944:	2305      	movs	r3, #5
 8003946:	4621      	mov	r1, r4
{
 8003948:	4605      	mov	r5, r0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800394a:	f7fe fc7d 	bl	8002248 <HAL_I2C_IsDeviceReady>
 800394e:	b118      	cbz	r0, 8003958 <SD_MPU6050_Init+0x2c>
				return SD_MPU6050_Result_Error;
 8003950:	2001      	movs	r0, #1
}
 8003952:	b004      	add	sp, #16
 8003954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8003958:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 800395c:	2301      	movs	r3, #1
 800395e:	9700      	str	r7, [sp, #0]
 8003960:	f10d 020a 	add.w	r2, sp, #10
 8003964:	4621      	mov	r1, r4
 8003966:	4628      	mov	r0, r5
 8003968:	f7fe fa28 	bl	8001dbc <HAL_I2C_Master_Transmit>
 800396c:	2800      	cmp	r0, #0
 800396e:	d1ef      	bne.n	8003950 <SD_MPU6050_Init+0x24>
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8003970:	9700      	str	r7, [sp, #0]
 8003972:	2301      	movs	r3, #1
 8003974:	f10d 020b 	add.w	r2, sp, #11
 8003978:	4621      	mov	r1, r4
 800397a:	4628      	mov	r0, r5
 800397c:	f7fe faec 	bl	8001f58 <HAL_I2C_Master_Receive>
 8003980:	2800      	cmp	r0, #0
 8003982:	d1e5      	bne.n	8003950 <SD_MPU6050_Init+0x24>
		while(temp != MPU6050_I_AM)
 8003984:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003988:	2b68      	cmp	r3, #104	; 0x68
 800398a:	d120      	bne.n	80039ce <SD_MPU6050_Init+0xa2>
		d[0] = MPU6050_PWR_MGMT_1;
 800398c:	236b      	movs	r3, #107	; 0x6b
		d[1] = 0x00;
 800398e:	f88d 000d 	strb.w	r0, [sp, #13]
		d[0] = MPU6050_PWR_MGMT_1;
 8003992:	f88d 300c 	strb.w	r3, [sp, #12]
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8003996:	4621      	mov	r1, r4
 8003998:	9700      	str	r7, [sp, #0]
 800399a:	2302      	movs	r3, #2
 800399c:	aa03      	add	r2, sp, #12
 800399e:	4628      	mov	r0, r5
 80039a0:	f7fe fa0c 	bl	8001dbc <HAL_I2C_Master_Transmit>
 80039a4:	4604      	mov	r4, r0
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d1d2      	bne.n	8003950 <SD_MPU6050_Init+0x24>
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 80039aa:	2207      	movs	r2, #7
 80039ac:	4631      	mov	r1, r6
 80039ae:	4628      	mov	r0, r5
 80039b0:	f7ff fefe 	bl	80037b0 <SD_MPU6050_SetDataRate>
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 80039b4:	4642      	mov	r2, r8
 80039b6:	4631      	mov	r1, r6
 80039b8:	4628      	mov	r0, r5
 80039ba:	f7ff ff0f 	bl	80037dc <SD_MPU6050_SetAccelerometer>
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80039be:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80039c2:	4631      	mov	r1, r6
 80039c4:	4628      	mov	r0, r5
 80039c6:	f7ff ff5b 	bl	8003880 <SD_MPU6050_SetGyroscope>
	return SD_MPU6050_Result_Ok;
 80039ca:	4620      	mov	r0, r4
 80039cc:	e7c1      	b.n	8003952 <SD_MPU6050_Init+0x26>
				return SD_MPU6050_Result_DeviceInvalid;
 80039ce:	2003      	movs	r0, #3
 80039d0:	e7bf      	b.n	8003952 <SD_MPU6050_Init+0x26>

080039d2 <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80039d2:	233b      	movs	r3, #59	; 0x3b
{
 80039d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d8:	4606      	mov	r6, r0
 80039da:	460c      	mov	r4, r1
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80039dc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 80039e0:	b086      	sub	sp, #24
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80039e2:	ad06      	add	r5, sp, #24
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80039e4:	780f      	ldrb	r7, [r1, #0]
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80039e6:	f805 3d09 	strb.w	r3, [r5, #-9]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80039ea:	f8cd 8000 	str.w	r8, [sp]
 80039ee:	2301      	movs	r3, #1
 80039f0:	462a      	mov	r2, r5
 80039f2:	4639      	mov	r1, r7
 80039f4:	4630      	mov	r0, r6
 80039f6:	f7fe f9e1 	bl	8001dbc <HAL_I2C_Master_Transmit>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d1f5      	bne.n	80039ea <SD_MPU6050_ReadAccelerometer+0x18>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80039fe:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003a02:	9500      	str	r5, [sp, #0]
 8003a04:	2306      	movs	r3, #6
 8003a06:	aa04      	add	r2, sp, #16
 8003a08:	4639      	mov	r1, r7
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f7fe faa4 	bl	8001f58 <HAL_I2C_Master_Receive>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d1f6      	bne.n	8003a02 <SD_MPU6050_ReadAccelerometer+0x30>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8003a14:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003a18:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003a1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a20:	81a3      	strh	r3, [r4, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8003a22:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8003a26:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003a2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a2e:	81e3      	strh	r3, [r4, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8003a30:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003a34:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003a38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a3c:	8223      	strh	r3, [r4, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003a3e:	b006      	add	sp, #24
 8003a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a44 <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8003a44:	2343      	movs	r3, #67	; 0x43
{
 8003a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4a:	4606      	mov	r6, r0
 8003a4c:	460c      	mov	r4, r1
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003a4e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 8003a52:	b086      	sub	sp, #24
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8003a54:	ad06      	add	r5, sp, #24
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003a56:	780f      	ldrb	r7, [r1, #0]
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8003a58:	f805 3d09 	strb.w	r3, [r5, #-9]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003a5c:	f8cd 8000 	str.w	r8, [sp]
 8003a60:	2301      	movs	r3, #1
 8003a62:	462a      	mov	r2, r5
 8003a64:	4639      	mov	r1, r7
 8003a66:	4630      	mov	r0, r6
 8003a68:	f7fe f9a8 	bl	8001dbc <HAL_I2C_Master_Transmit>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d1f5      	bne.n	8003a5c <SD_MPU6050_ReadGyroscope+0x18>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8003a70:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003a74:	9500      	str	r5, [sp, #0]
 8003a76:	2306      	movs	r3, #6
 8003a78:	aa04      	add	r2, sp, #16
 8003a7a:	4639      	mov	r1, r7
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f7fe fa6b 	bl	8001f58 <HAL_I2C_Master_Receive>
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d1f6      	bne.n	8003a74 <SD_MPU6050_ReadGyroscope+0x30>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8003a86:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003a8a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003a8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a92:	8263      	strh	r3, [r4, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8003a94:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8003a98:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003a9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003aa0:	82a3      	strh	r3, [r4, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8003aa2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003aa6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003aaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003aae:	82e3      	strh	r3, [r4, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003ab0:	b006      	add	sp, #24
 8003ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003ab8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003aba:	4811      	ldr	r0, [pc, #68]	; (8003b00 <MX_ADC1_Init+0x48>)
 8003abc:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003abe:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ac0:	2401      	movs	r4, #1
  hadc1.Instance = ADC1;
 8003ac2:	6002      	str	r2, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ac4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	9302      	str	r3, [sp, #8]
 8003acc:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ace:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ad0:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ad2:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ad4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ad6:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003ad8:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ada:	f7fd fca9 	bl	8001430 <HAL_ADC_Init>
 8003ade:	b108      	cbz	r0, 8003ae4 <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 8003ae0:	f000 fc60 	bl	80043a4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003ae4:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ae6:	a901      	add	r1, sp, #4
 8003ae8:	4805      	ldr	r0, [pc, #20]	; (8003b00 <MX_ADC1_Init+0x48>)
  sConfig.Channel = ADC_CHANNEL_1;
 8003aea:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003aec:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003aee:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003af0:	f7fd fb32 	bl	8001158 <HAL_ADC_ConfigChannel>
 8003af4:	b108      	cbz	r0, 8003afa <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8003af6:	f000 fc55 	bl	80043a4 <Error_Handler>
  }

}
 8003afa:	b004      	add	sp, #16
 8003afc:	bd10      	pop	{r4, pc}
 8003afe:	bf00      	nop
 8003b00:	20000190 	.word	0x20000190
 8003b04:	40012400 	.word	0x40012400

08003b08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003b08:	b530      	push	{r4, r5, lr}
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0e:	2210      	movs	r2, #16
 8003b10:	2100      	movs	r1, #0
 8003b12:	a802      	add	r0, sp, #8
 8003b14:	f000 fe70 	bl	80047f8 <memset>
  if(adcHandle->Instance==ADC1)
 8003b18:	682a      	ldr	r2, [r5, #0]
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <HAL_ADC_MspInit+0x84>)
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d133      	bne.n	8003b88 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b20:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003b24:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b26:	481a      	ldr	r0, [pc, #104]	; (8003b90 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2c:	619a      	str	r2, [r3, #24]
 8003b2e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b30:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b32:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003b36:	9200      	str	r2, [sp, #0]
 8003b38:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3a:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003b3c:	4c15      	ldr	r4, [pc, #84]	; (8003b94 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3e:	f042 0204 	orr.w	r2, r2, #4
 8003b42:	619a      	str	r2, [r3, #24]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b52:	2303      	movs	r3, #3
 8003b54:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b56:	f7fd fe9f 	bl	8001898 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Channel1;
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b64:	6122      	str	r2, [r4, #16]
    hdma_adc1.Instance = DMA1_Channel1;
 8003b66:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b6c:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b6e:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b70:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b72:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b74:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003b76:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b78:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b7a:	f7fd fd43 	bl	8001604 <HAL_DMA_Init>
 8003b7e:	b108      	cbz	r0, 8003b84 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8003b80:	f000 fc10 	bl	80043a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003b84:	622c      	str	r4, [r5, #32]
 8003b86:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003b88:	b007      	add	sp, #28
 8003b8a:	bd30      	pop	{r4, r5, pc}
 8003b8c:	40012400 	.word	0x40012400
 8003b90:	40010800 	.word	0x40010800
 8003b94:	200001c0 	.word	0x200001c0
 8003b98:	40020008 	.word	0x40020008

08003b9c <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <MX_DMA_Init+0x2c>)
{
 8003b9e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ba0:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003ba2:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003baa:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bac:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003bae:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003bb8:	f7fd fccc 	bl	8001554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003bbc:	200b      	movs	r0, #11
 8003bbe:	f7fd fcfd 	bl	80015bc <HAL_NVIC_EnableIRQ>

}
 8003bc2:	b003      	add	sp, #12
 8003bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bc8:	40021000 	.word	0x40021000

08003bcc <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <MX_GPIO_Init+0x40>)
{
 8003bce:	b084      	sub	sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	f042 0220 	orr.w	r2, r2, #32
 8003bd6:	619a      	str	r2, [r3, #24]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	f002 0220 	and.w	r2, r2, #32
 8003bde:	9201      	str	r2, [sp, #4]
 8003be0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	f042 0204 	orr.w	r2, r2, #4
 8003be8:	619a      	str	r2, [r3, #24]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	f002 0204 	and.w	r2, r2, #4
 8003bf0:	9202      	str	r2, [sp, #8]
 8003bf2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	f042 0208 	orr.w	r2, r2, #8
 8003bfa:	619a      	str	r2, [r3, #24]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	9303      	str	r3, [sp, #12]
 8003c04:	9b03      	ldr	r3, [sp, #12]

}
 8003c06:	b004      	add	sp, #16
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000

08003c10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c10:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003c12:	480c      	ldr	r0, [pc, #48]	; (8003c44 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <MX_I2C1_Init+0x38>)
 8003c16:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003c4c <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8003c1e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c22:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c24:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c26:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c28:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c2a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c2c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c2e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c30:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c32:	f7fe f81f 	bl	8001c74 <HAL_I2C_Init>
 8003c36:	b118      	cbz	r0, 8003c40 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8003c38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003c3c:	f000 bbb2 	b.w	80043a4 <Error_Handler>
 8003c40:	bd08      	pop	{r3, pc}
 8003c42:	bf00      	nop
 8003c44:	20000204 	.word	0x20000204
 8003c48:	40005400 	.word	0x40005400
 8003c4c:	000186a0 	.word	0x000186a0

08003c50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4604      	mov	r4, r0
 8003c54:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c56:	2210      	movs	r2, #16
 8003c58:	2100      	movs	r1, #0
 8003c5a:	a802      	add	r0, sp, #8
 8003c5c:	f000 fdcc 	bl	80047f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8003c60:	6822      	ldr	r2, [r4, #0]
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_I2C_MspInit+0x68>)
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d124      	bne.n	8003cb2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c68:	4c14      	ldr	r4, [pc, #80]	; (8003cbc <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6e:	4814      	ldr	r0, [pc, #80]	; (8003cc0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c70:	f043 0308 	orr.w	r3, r3, #8
 8003c74:	61a3      	str	r3, [r4, #24]
 8003c76:	69a3      	ldr	r3, [r4, #24]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c86:	2312      	movs	r3, #18
 8003c88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8e:	f7fd fe03 	bl	8001898 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <HAL_I2C_MspInit+0x74>)
 8003c94:	6853      	ldr	r3, [r2, #4]
 8003c96:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003c9a:	f043 0302 	orr.w	r3, r3, #2
 8003c9e:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ca0:	69e3      	ldr	r3, [r4, #28]
 8003ca2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca6:	61e3      	str	r3, [r4, #28]
 8003ca8:	69e3      	ldr	r3, [r4, #28]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003cb2:	b006      	add	sp, #24
 8003cb4:	bd10      	pop	{r4, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40005400 	.word	0x40005400
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40010c00 	.word	0x40010c00
 8003cc4:	40010000 	.word	0x40010000

08003cc8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cc8:	2228      	movs	r2, #40	; 0x28
{
 8003cca:	b530      	push	{r4, r5, lr}
 8003ccc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cce:	eb0d 0002 	add.w	r0, sp, r2
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f000 fd90 	bl	80047f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cd8:	2214      	movs	r2, #20
 8003cda:	2100      	movs	r1, #0
 8003cdc:	eb0d 0002 	add.w	r0, sp, r2
 8003ce0:	f000 fd8a 	bl	80047f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	a801      	add	r0, sp, #4
 8003cea:	f000 fd85 	bl	80047f8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cf2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cf4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cf6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cf8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003cfa:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cfe:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d00:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d02:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003d04:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d06:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d08:	f7fe fb48 	bl	800239c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d0c:	230f      	movs	r3, #15
 8003d0e:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d14:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d16:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003d18:	f44f 63a0 	mov.w	r3, #1280	; 0x500

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d22:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d24:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d26:	f7fe fd13 	bl	8002750 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d2a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003d2c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003d2e:	9503      	str	r5, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d30:	f7fe fdcc 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003d34:	b015      	add	sp, #84	; 0x54
 8003d36:	bd30      	pop	{r4, r5, pc}

08003d38 <servo_set_CCRx_value>:

/* USER CODE BEGIN 4 */

void servo_set_CCRx_value(uint16_t CCRx_value)
{
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,CCRx_value);
 8003d38:	4b02      	ldr	r3, [pc, #8]	; (8003d44 <servo_set_CCRx_value+0xc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6358      	str	r0, [r3, #52]	; 0x34
	HAL_Delay(25);
 8003d3e:	2019      	movs	r0, #25
 8003d40:	f7fd b9bc 	b.w	80010bc <HAL_Delay>
 8003d44:	20000474 	.word	0x20000474

08003d48 <servo_set_position>:
}

int servo_set_position(volatile float degree)
{
 8003d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d4a:	9001      	str	r0, [sp, #4]
	if((degree>= SERVO_MIN_ANGLE) && (degree <= SERVO_MAX_ANGLE))
 8003d4c:	9801      	ldr	r0, [sp, #4]
 8003d4e:	4914      	ldr	r1, [pc, #80]	; (8003da0 <servo_set_position+0x58>)
 8003d50:	f7fd f912 	bl	8000f78 <__aeabi_fcmpge>
 8003d54:	b300      	cbz	r0, 8003d98 <servo_set_position+0x50>
 8003d56:	9801      	ldr	r0, [sp, #4]
 8003d58:	4912      	ldr	r1, [pc, #72]	; (8003da4 <servo_set_position+0x5c>)
 8003d5a:	f7fd f903 	bl	8000f64 <__aeabi_fcmple>
 8003d5e:	b1d8      	cbz	r0, 8003d98 <servo_set_position+0x50>
	{
		volatile uint16_t y = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8ad 300e 	strh.w	r3, [sp, #14]
		y = (uint16_t)(CCRxTD_b*degree+CCRxTD_a);
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <servo_set_position+0x60>)
 8003d68:	9801      	ldr	r0, [sp, #4]
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	f7fc ff52 	bl	8000c14 <__aeabi_fmul>
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <servo_set_position+0x64>)
 8003d72:	6819      	ldr	r1, [r3, #0]
 8003d74:	f7fc fe46 	bl	8000a04 <__addsf3>
 8003d78:	f7fd f938 	bl	8000fec <__aeabi_f2uiz>
 8003d7c:	b280      	uxth	r0, r0
 8003d7e:	f8ad 000e 	strh.w	r0, [sp, #14]
		servo_set_CCRx_value(y);
 8003d82:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003d86:	b280      	uxth	r0, r0
 8003d88:	f7ff ffd6 	bl	8003d38 <servo_set_CCRx_value>
//        HAL_Delay(50);
		return y;
 8003d8c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003d90:	b280      	uxth	r0, r0
	else
	{
		return -1;
	}

}
 8003d92:	b005      	add	sp, #20
 8003d94:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	e7f9      	b.n	8003d92 <servo_set_position+0x4a>
 8003d9e:	bf00      	nop
 8003da0:	c2200000 	.word	0xc2200000
 8003da4:	42200000 	.word	0x42200000
 8003da8:	2000000c 	.word	0x2000000c
 8003dac:	20000008 	.word	0x20000008

08003db0 <potentiometer_calibration>:

void potentiometer_calibration()
{
 8003db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
//	volatile float a,b, x_averaged, y_averaged, xy_averaged, Sx = 0;

    for(int d = 0; d<len; d++)
    {
    	degs[d]=degree;
  	    degree = degree + 0.5;
 8003db4:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
{
 8003db8:	b082      	sub	sp, #8
 8003dba:	af02      	add	r7, sp, #8
	float ress[len];
 8003dbc:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003dc0:	ae02      	add	r6, sp, #8
	float degs[len];
 8003dc2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003dc6:	ad02      	add	r5, sp, #8
	float degree = SERVO_MIN_ANGLE;
 8003dc8:	481f      	ldr	r0, [pc, #124]	; (8003e48 <potentiometer_calibration+0x98>)
 8003dca:	1f2c      	subs	r4, r5, #4
 8003dcc:	f505 781f 	add.w	r8, r5, #636	; 0x27c
    	degs[d]=degree;
 8003dd0:	f844 0f04 	str.w	r0, [r4, #4]!
  	    degree = degree + 0.5;
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	f7fc fe15 	bl	8000a04 <__addsf3>
    for(int d = 0; d<len; d++)
 8003dda:	45a0      	cmp	r8, r4
 8003ddc:	d1f8      	bne.n	8003dd0 <potentiometer_calibration+0x20>
 8003dde:	2400      	movs	r4, #0
	{
		int err = servo_set_position(degs[d]);
		if(err != -1)
		{
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
			  ress[d]= (ADC1_DATA[0]*ADC1_K);
 8003de0:	f04f 0800 	mov.w	r8, #0
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8003de4:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003e4c <potentiometer_calibration+0x9c>
			  ress[d]= (ADC1_DATA[0]*ADC1_K);
 8003de8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003e5c <potentiometer_calibration+0xac>
		int err = servo_set_position(degs[d]);
 8003dec:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8003df0:	f7ff ffaa 	bl	8003d48 <servo_set_position>
		if(err != -1)
 8003df4:	3001      	adds	r0, #1
 8003df6:	d013      	beq.n	8003e20 <potentiometer_calibration+0x70>
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4914      	ldr	r1, [pc, #80]	; (8003e4c <potentiometer_calibration+0x9c>)
 8003dfc:	4814      	ldr	r0, [pc, #80]	; (8003e50 <potentiometer_calibration+0xa0>)
 8003dfe:	f7fd fa67 	bl	80012d0 <HAL_ADC_Start_DMA>
			  ress[d]= (ADC1_DATA[0]*ADC1_K);
 8003e02:	f8ba 0000 	ldrh.w	r0, [sl]
 8003e06:	f7fc fb07 	bl	8000418 <__aeabi_i2d>
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	f7fc fb69 	bl	80004e4 <__aeabi_dmul>
 8003e12:	f7fc fda1 	bl	8000958 <__aeabi_d2f>
 8003e16:	f846 0024 	str.w	r0, [r6, r4, lsl #2]

			  HAL_Delay(1);
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f7fd f94e 	bl	80010bc <HAL_Delay>
		 }
         HAL_Delay(1);
 8003e20:	2001      	movs	r0, #1
	for(int d = 0; d < len; d++)
 8003e22:	3401      	adds	r4, #1
         HAL_Delay(1);
 8003e24:	f7fd f94a 	bl	80010bc <HAL_Delay>
	for(int d = 0; d < len; d++)
 8003e28:	2ca0      	cmp	r4, #160	; 0xa0
 8003e2a:	d1df      	bne.n	8003dec <potentiometer_calibration+0x3c>
	}


	linear_regression(len, ress, degs, &RTD_a, &RTD_b);
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <potentiometer_calibration+0xa4>)
 8003e2e:	462a      	mov	r2, r5
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4631      	mov	r1, r6
 8003e34:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <potentiometer_calibration+0xa8>)
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7ff fc3d 	bl	80036b6 <linear_regression>
    HAL_Delay(10);
 8003e3c:	200a      	movs	r0, #10
 8003e3e:	f7fd f93d 	bl	80010bc <HAL_Delay>
}
 8003e42:	46bd      	mov	sp, r7
 8003e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e48:	c2200000 	.word	0xc2200000
 8003e4c:	200000ac 	.word	0x200000ac
 8003e50:	20000190 	.word	0x20000190
 8003e54:	2000001c 	.word	0x2000001c
 8003e58:	20000018 	.word	0x20000018
 8003e5c:	3f480000 	.word	0x3f480000

08003e60 <IMU_get_acc>:
	return current_angle;
}


float IMU_get_acc(int axis)
{
 8003e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	  volatile float result = 0.0;
 8003e62:	2300      	movs	r3, #0
{
 8003e64:	4605      	mov	r5, r0
	  SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 8003e66:	4c0f      	ldr	r4, [pc, #60]	; (8003ea4 <IMU_get_acc+0x44>)
 8003e68:	480f      	ldr	r0, [pc, #60]	; (8003ea8 <IMU_get_acc+0x48>)
 8003e6a:	4621      	mov	r1, r4
	  volatile float result = 0.0;
 8003e6c:	9301      	str	r3, [sp, #4]
	  SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 8003e6e:	f7ff fdb0 	bl	80039d2 <SD_MPU6050_ReadAccelerometer>
 //     HAL_Delay(10);

	  if(axis == X_AXIS)
 8003e72:	2d01      	cmp	r5, #1
 8003e74:	d10b      	bne.n	8003e8e <IMU_get_acc+0x2e>
	  {
		  result=(float)mpu1.Accelerometer_X/MPU_AK;
 8003e76:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
	  {
		  result=(float)mpu1.Accelerometer_Y/MPU_AK;
	  }
	  if(axis == Z_AXIS)
	  {
		  result=(float)mpu1.Accelerometer_Z/MPU_AK;
 8003e7a:	f7fc fe77 	bl	8000b6c <__aeabi_i2f>
 8003e7e:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8003e82:	f7fc fec7 	bl	8000c14 <__aeabi_fmul>
 8003e86:	9001      	str	r0, [sp, #4]
	  }
	  return result;
 8003e88:	9801      	ldr	r0, [sp, #4]

}
 8003e8a:	b003      	add	sp, #12
 8003e8c:	bd30      	pop	{r4, r5, pc}
	  if(axis == Y_AXIS)
 8003e8e:	2d02      	cmp	r5, #2
 8003e90:	d102      	bne.n	8003e98 <IMU_get_acc+0x38>
		  result=(float)mpu1.Accelerometer_Y/MPU_AK;
 8003e92:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8003e96:	e7f0      	b.n	8003e7a <IMU_get_acc+0x1a>
	  if(axis == Z_AXIS)
 8003e98:	2d03      	cmp	r5, #3
 8003e9a:	d1f5      	bne.n	8003e88 <IMU_get_acc+0x28>
		  result=(float)mpu1.Accelerometer_Z/MPU_AK;
 8003e9c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8003ea0:	e7eb      	b.n	8003e7a <IMU_get_acc+0x1a>
 8003ea2:	bf00      	nop
 8003ea4:	20000390 	.word	0x20000390
 8003ea8:	20000204 	.word	0x20000204

08003eac <IMU_get_gyro>:

float IMU_get_gyro(int axis)
{
 8003eac:	b537      	push	{r0, r1, r2, r4, r5, lr}

	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 8003eae:	4c0f      	ldr	r4, [pc, #60]	; (8003eec <IMU_get_gyro+0x40>)
{
 8003eb0:	4605      	mov	r5, r0
	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	480e      	ldr	r0, [pc, #56]	; (8003ef0 <IMU_get_gyro+0x44>)
 8003eb6:	f7ff fdc5 	bl	8003a44 <SD_MPU6050_ReadGyroscope>
	  volatile float result = 0.0;
 8003eba:	2300      	movs	r3, #0
	  if(axis == X_AXIS)
 8003ebc:	2d01      	cmp	r5, #1
	  volatile float result = 0.0;
 8003ebe:	9301      	str	r3, [sp, #4]
	  if(axis == X_AXIS)
 8003ec0:	d10a      	bne.n	8003ed8 <IMU_get_gyro+0x2c>
	  {
		  result = (float)mpu1.Gyroscope_X/MPU_GK;
 8003ec2:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
	  {
		  result =(float)mpu1.Gyroscope_Y/MPU_GK;
	  }
	  if(axis == Z_AXIS)
	  {
		  result = (float)mpu1.Gyroscope_Z/MPU_GK;
 8003ec6:	f7fc fe51 	bl	8000b6c <__aeabi_i2f>
 8003eca:	490a      	ldr	r1, [pc, #40]	; (8003ef4 <IMU_get_gyro+0x48>)
 8003ecc:	f7fc ff56 	bl	8000d7c <__aeabi_fdiv>
 8003ed0:	9001      	str	r0, [sp, #4]
	  }
	  return result;
 8003ed2:	9801      	ldr	r0, [sp, #4]

}
 8003ed4:	b003      	add	sp, #12
 8003ed6:	bd30      	pop	{r4, r5, pc}
	  if(axis == Y_AXIS)
 8003ed8:	2d02      	cmp	r5, #2
 8003eda:	d102      	bne.n	8003ee2 <IMU_get_gyro+0x36>
		  result =(float)mpu1.Gyroscope_Y/MPU_GK;
 8003edc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8003ee0:	e7f1      	b.n	8003ec6 <IMU_get_gyro+0x1a>
	  if(axis == Z_AXIS)
 8003ee2:	2d03      	cmp	r5, #3
 8003ee4:	d1f5      	bne.n	8003ed2 <IMU_get_gyro+0x26>
		  result = (float)mpu1.Gyroscope_Z/MPU_GK;
 8003ee6:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8003eea:	e7ec      	b.n	8003ec6 <IMU_get_gyro+0x1a>
 8003eec:	20000390 	.word	0x20000390
 8003ef0:	20000204 	.word	0x20000204
 8003ef4:	43030000 	.word	0x43030000

08003ef8 <angle_from_acc>:
	  return mpu1.Temperature;
}


float angle_from_acc(int axis)
{
 8003ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003efa:	4604      	mov	r4, r0
	volatile float accx,accy,accz;
	volatile float angle;


	accx = IMU_get_acc(X_AXIS);
 8003efc:	2001      	movs	r0, #1
 8003efe:	f7ff ffaf 	bl	8003e60 <IMU_get_acc>
 8003f02:	9000      	str	r0, [sp, #0]
	accy = IMU_get_acc(Y_AXIS);
 8003f04:	2002      	movs	r0, #2
 8003f06:	f7ff ffab 	bl	8003e60 <IMU_get_acc>
 8003f0a:	9001      	str	r0, [sp, #4]
	accz = IMU_get_acc(Z_AXIS);
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	f7ff ffa7 	bl	8003e60 <IMU_get_acc>


		if (axis==X_AXIS)
 8003f12:	2c01      	cmp	r4, #1
	accz = IMU_get_acc(Z_AXIS);
 8003f14:	9002      	str	r0, [sp, #8]
		if (axis==X_AXIS)
 8003f16:	d11a      	bne.n	8003f4e <angle_from_acc+0x56>
		{
//			angle = sqrtf(accy*accy + accz*accz);
//			angle = accx/angle;
//			angle = RAD_TO_DEG*atanf(angle);
			angle = RAD_TO_DEG*atanf(accx/hypotf(accy, accz));
 8003f18:	9c00      	ldr	r4, [sp, #0]
 8003f1a:	9801      	ldr	r0, [sp, #4]
		if (axis==Y_AXIS)
		{
//			angle = sqrtf(accx*accx + accz*accz);
//			angle = accy/angle;
//			angle = RAD_TO_DEG*atanf(angle);
			angle = RAD_TO_DEG*atanf(accy/hypotf(accx, accz));
 8003f1c:	9902      	ldr	r1, [sp, #8]
		if (axis==Z_AXIS)
		{
//			angle = sqrtf(accy*accy + accx*accx);
//			angle = angle/accz;
//			angle = RAD_TO_DEG*atanf(angle);
			angle = RAD_TO_DEG*atanf(accz/hypotf(accx, accy));
 8003f1e:	f000 fdcf 	bl	8004ac0 <hypotf>
 8003f22:	4601      	mov	r1, r0
 8003f24:	4620      	mov	r0, r4
 8003f26:	f7fc ff29 	bl	8000d7c <__aeabi_fdiv>
 8003f2a:	f000 fcb5 	bl	8004898 <atanf>
 8003f2e:	f7fc fa85 	bl	800043c <__aeabi_f2d>
 8003f32:	a30d      	add	r3, pc, #52	; (adr r3, 8003f68 <angle_from_acc+0x70>)
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f7fc fad4 	bl	80004e4 <__aeabi_dmul>
 8003f3c:	f7fc fd0c 	bl	8000958 <__aeabi_d2f>
 8003f40:	9003      	str	r0, [sp, #12]
		}




	HAL_Delay(10);
 8003f42:	200a      	movs	r0, #10
 8003f44:	f7fd f8ba 	bl	80010bc <HAL_Delay>
	return angle;
 8003f48:	9803      	ldr	r0, [sp, #12]
}
 8003f4a:	b004      	add	sp, #16
 8003f4c:	bd10      	pop	{r4, pc}
		if (axis==Y_AXIS)
 8003f4e:	2c02      	cmp	r4, #2
 8003f50:	d102      	bne.n	8003f58 <angle_from_acc+0x60>
			angle = RAD_TO_DEG*atanf(accy/hypotf(accx, accz));
 8003f52:	9c01      	ldr	r4, [sp, #4]
 8003f54:	9800      	ldr	r0, [sp, #0]
 8003f56:	e7e1      	b.n	8003f1c <angle_from_acc+0x24>
		if (axis==Z_AXIS)
 8003f58:	2c03      	cmp	r4, #3
 8003f5a:	d1f2      	bne.n	8003f42 <angle_from_acc+0x4a>
			angle = RAD_TO_DEG*atanf(accz/hypotf(accx, accy));
 8003f5c:	9c02      	ldr	r4, [sp, #8]
 8003f5e:	9800      	ldr	r0, [sp, #0]
 8003f60:	9901      	ldr	r1, [sp, #4]
 8003f62:	e7dc      	b.n	8003f1e <angle_from_acc+0x26>
 8003f64:	f3af 8000 	nop.w
 8003f68:	e564768a 	.word	0xe564768a
 8003f6c:	404ca5db 	.word	0x404ca5db

08003f70 <get_microseconds_since_begin>:
}

int get_microseconds_since_begin(uint32_t startTick)
{
	  //new_tick = DWT->CYCCNT;
	  int tick= (int)DWT->CYCCNT - startTick;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <get_microseconds_since_begin+0x30>)
{
 8003f72:	b510      	push	{r4, lr}
	  int tick= (int)DWT->CYCCNT - startTick;
 8003f74:	685c      	ldr	r4, [r3, #4]
	  int divider=(int)(SystemCoreClock/1e6);
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <get_microseconds_since_begin+0x34>)
	  int tick= (int)DWT->CYCCNT - startTick;
 8003f78:	1a24      	subs	r4, r4, r0
	  int divider=(int)(SystemCoreClock/1e6);
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	f7fc fa3c 	bl	80003f8 <__aeabi_ui2d>
 8003f80:	a305      	add	r3, pc, #20	; (adr r3, 8003f98 <get_microseconds_since_begin+0x28>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f7fc fbd7 	bl	8000738 <__aeabi_ddiv>
 8003f8a:	f7fc fcbd 	bl	8000908 <__aeabi_d2iz>
	  tick=tick/divider;
	  return tick;
}
 8003f8e:	fb94 f0f0 	sdiv	r0, r4, r0
 8003f92:	bd10      	pop	{r4, pc}
 8003f94:	f3af 8000 	nop.w
 8003f98:	00000000 	.word	0x00000000
 8003f9c:	412e8480 	.word	0x412e8480
 8003fa0:	e0001000 	.word	0xe0001000
 8003fa4:	20000024 	.word	0x20000024

08003fa8 <angle_from_gyro>:
{
 8003fa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003faa:	460c      	mov	r4, r1
 8003fac:	4605      	mov	r5, r0
	g_struct->time=get_microseconds_since_begin(g_struct->start_tick);
 8003fae:	6808      	ldr	r0, [r1, #0]
 8003fb0:	f7ff ffde 	bl	8003f70 <get_microseconds_since_begin>
	volatile float dt = (float)((g_struct->time - g_struct->last_time)*1e-6);
 8003fb4:	6863      	ldr	r3, [r4, #4]
	g_struct->time=get_microseconds_since_begin(g_struct->start_tick);
 8003fb6:	60a0      	str	r0, [r4, #8]
	volatile float dt = (float)((g_struct->time - g_struct->last_time)*1e-6);
 8003fb8:	1ac0      	subs	r0, r0, r3
 8003fba:	f7fc fa2d 	bl	8000418 <__aeabi_i2d>
 8003fbe:	a31e      	add	r3, pc, #120	; (adr r3, 8004038 <angle_from_gyro+0x90>)
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f7fc fa8e 	bl	80004e4 <__aeabi_dmul>
 8003fc8:	f7fc fcc6 	bl	8000958 <__aeabi_d2f>
 8003fcc:	9001      	str	r0, [sp, #4]
	UART_send_float(dt);
 8003fce:	9801      	ldr	r0, [sp, #4]
 8003fd0:	f7ff fa8e 	bl	80034f0 <UART_send_float>
	g_struct->last_time=get_microseconds_since_begin(g_struct->start_tick);
 8003fd4:	6820      	ldr	r0, [r4, #0]
 8003fd6:	f7ff ffcb 	bl	8003f70 <get_microseconds_since_begin>
	if(axis == X_AXIS)
 8003fda:	2d01      	cmp	r5, #1
	g_struct->last_time=get_microseconds_since_begin(g_struct->start_tick);
 8003fdc:	6060      	str	r0, [r4, #4]
	if(axis == X_AXIS)
 8003fde:	d10c      	bne.n	8003ffa <angle_from_gyro+0x52>
		g_struct->ax=g_struct->ax+IMU_get_gyro(axis)*dt;
 8003fe0:	68e6      	ldr	r6, [r4, #12]
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f7ff ff62 	bl	8003eac <IMU_get_gyro>
 8003fe8:	9901      	ldr	r1, [sp, #4]
 8003fea:	f7fc fe13 	bl	8000c14 <__aeabi_fmul>
 8003fee:	4631      	mov	r1, r6
 8003ff0:	f7fc fd08 	bl	8000a04 <__addsf3>
 8003ff4:	60e0      	str	r0, [r4, #12]
}
 8003ff6:	b002      	add	sp, #8
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
	else if(axis == Y_AXIS)
 8003ffa:	2d02      	cmp	r5, #2
 8003ffc:	d10b      	bne.n	8004016 <angle_from_gyro+0x6e>
		g_struct->ay=g_struct->ay+IMU_get_gyro(axis)*dt;
 8003ffe:	6926      	ldr	r6, [r4, #16]
 8004000:	4628      	mov	r0, r5
 8004002:	f7ff ff53 	bl	8003eac <IMU_get_gyro>
 8004006:	9901      	ldr	r1, [sp, #4]
 8004008:	f7fc fe04 	bl	8000c14 <__aeabi_fmul>
 800400c:	4631      	mov	r1, r6
 800400e:	f7fc fcf9 	bl	8000a04 <__addsf3>
 8004012:	6120      	str	r0, [r4, #16]
		return g_struct->ay;
 8004014:	e7ef      	b.n	8003ff6 <angle_from_gyro+0x4e>
	else if(axis == Z_AXIS)
 8004016:	2d03      	cmp	r5, #3
 8004018:	d1ed      	bne.n	8003ff6 <angle_from_gyro+0x4e>
		g_struct->az=g_struct->az+IMU_get_gyro(axis)*dt;
 800401a:	6966      	ldr	r6, [r4, #20]
 800401c:	4628      	mov	r0, r5
 800401e:	f7ff ff45 	bl	8003eac <IMU_get_gyro>
 8004022:	9901      	ldr	r1, [sp, #4]
 8004024:	f7fc fdf6 	bl	8000c14 <__aeabi_fmul>
 8004028:	4631      	mov	r1, r6
 800402a:	f7fc fceb 	bl	8000a04 <__addsf3>
 800402e:	6160      	str	r0, [r4, #20]
		return g_struct->az;
 8004030:	e7e1      	b.n	8003ff6 <angle_from_gyro+0x4e>
 8004032:	bf00      	nop
 8004034:	f3af 8000 	nop.w
 8004038:	a0b5ed8d 	.word	0xa0b5ed8d
 800403c:	3eb0c6f7 	.word	0x3eb0c6f7

08004040 <complementary_filter>:
{
 8004040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	volatile float k = *CFK;
 8004042:	680b      	ldr	r3, [r1, #0]
{
 8004044:	4615      	mov	r5, r2
	volatile float k = *CFK;
 8004046:	9300      	str	r3, [sp, #0]
	volatile float angle_acc, angle_gyro = 0;
 8004048:	2300      	movs	r3, #0
{
 800404a:	4604      	mov	r4, r0
	volatile float angle_acc, angle_gyro = 0;
 800404c:	9302      	str	r3, [sp, #8]
    volatile float angle = 0;
 800404e:	9303      	str	r3, [sp, #12]
	angle_acc = angle_from_acc(axis);
 8004050:	f7ff ff52 	bl	8003ef8 <angle_from_acc>
	angle_gyro = angle_from_gyro(axis, g_struct);
 8004054:	4629      	mov	r1, r5
	angle_acc = angle_from_acc(axis);
 8004056:	9001      	str	r0, [sp, #4]
	angle_gyro = angle_from_gyro(axis, g_struct);
 8004058:	4620      	mov	r0, r4
 800405a:	f7ff ffa5 	bl	8003fa8 <angle_from_gyro>
 800405e:	9002      	str	r0, [sp, #8]
    angle= angle_gyro*(1-k)+angle_acc*k;
 8004060:	9900      	ldr	r1, [sp, #0]
 8004062:	9c02      	ldr	r4, [sp, #8]
 8004064:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004068:	f7fc fcca 	bl	8000a00 <__aeabi_fsub>
 800406c:	4621      	mov	r1, r4
 800406e:	f7fc fdd1 	bl	8000c14 <__aeabi_fmul>
 8004072:	9d01      	ldr	r5, [sp, #4]
 8004074:	9e00      	ldr	r6, [sp, #0]
 8004076:	4604      	mov	r4, r0
 8004078:	4631      	mov	r1, r6
 800407a:	4628      	mov	r0, r5
 800407c:	f7fc fdca 	bl	8000c14 <__aeabi_fmul>
 8004080:	4601      	mov	r1, r0
 8004082:	4620      	mov	r0, r4
 8004084:	f7fc fcbe 	bl	8000a04 <__addsf3>
 8004088:	9003      	str	r0, [sp, #12]
	return angle;
 800408a:	9803      	ldr	r0, [sp, #12]
}
 800408c:	b004      	add	sp, #16
 800408e:	bd70      	pop	{r4, r5, r6, pc}

08004090 <stabilize_by_pid>:
	  if((timer%time_step)!=0)
 8004090:	fbb2 f3f1 	udiv	r3, r2, r1
{
 8004094:	b530      	push	{r4, r5, lr}
	  if((timer%time_step)!=0)
 8004096:	fb03 2211 	mls	r2, r3, r1, r2
{
 800409a:	b085      	sub	sp, #20
 800409c:	4604      	mov	r4, r0
	  if((timer%time_step)!=0)
 800409e:	b112      	cbz	r2, 80040a6 <stabilize_by_pid+0x16>
		  return PID_struct->out;
 80040a0:	6900      	ldr	r0, [r0, #16]
}
 80040a2:	b005      	add	sp, #20
 80040a4:	bd30      	pop	{r4, r5, pc}
	  imu_angle = complementary_filter(Z_AXIS, &CFK, &gyro_angles);
 80040a6:	4914      	ldr	r1, [pc, #80]	; (80040f8 <stabilize_by_pid+0x68>)
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <stabilize_by_pid+0x6c>)
 80040aa:	2003      	movs	r0, #3
 80040ac:	f7ff ffc8 	bl	8004040 <complementary_filter>
	  if(imu_angle > IMU_MAX_ANGLE)
 80040b0:	4d13      	ldr	r5, [pc, #76]	; (8004100 <stabilize_by_pid+0x70>)
	  imu_angle = complementary_filter(Z_AXIS, &CFK, &gyro_angles);
 80040b2:	9002      	str	r0, [sp, #8]
	  if(imu_angle > IMU_MAX_ANGLE)
 80040b4:	9802      	ldr	r0, [sp, #8]
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc ff68 	bl	8000f8c <__aeabi_fcmpgt>
 80040bc:	b100      	cbz	r0, 80040c0 <stabilize_by_pid+0x30>
		  imu_angle = IMU_MAX_ANGLE;
 80040be:	9502      	str	r5, [sp, #8]
	  if(imu_angle < IMU_MIN_ANGLE)
 80040c0:	4d10      	ldr	r5, [pc, #64]	; (8004104 <stabilize_by_pid+0x74>)
 80040c2:	9802      	ldr	r0, [sp, #8]
 80040c4:	4629      	mov	r1, r5
 80040c6:	f7fc ff43 	bl	8000f50 <__aeabi_fcmplt>
 80040ca:	b100      	cbz	r0, 80040ce <stabilize_by_pid+0x3e>
		  imu_angle = IMU_MIN_ANGLE;
 80040cc:	9502      	str	r5, [sp, #8]
	  imu_angle = imu_angle*ITS_B + ITS_A;
 80040ce:	9802      	ldr	r0, [sp, #8]
 80040d0:	2100      	movs	r1, #0
 80040d2:	f7fc fc97 	bl	8000a04 <__addsf3>
 80040d6:	9002      	str	r0, [sp, #8]
	  pid_error = PID_struct->hold - imu_angle;
 80040d8:	9902      	ldr	r1, [sp, #8]
 80040da:	68e0      	ldr	r0, [r4, #12]
 80040dc:	f7fc fc90 	bl	8000a00 <__aeabi_fsub>
 80040e0:	9001      	str	r0, [sp, #4]
	  PID(PID_struct, pid_error);
 80040e2:	9901      	ldr	r1, [sp, #4]
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7ff fb4a 	bl	800377e <PID>
	  set = PID_struct->out;
 80040ea:	6923      	ldr	r3, [r4, #16]
 80040ec:	9303      	str	r3, [sp, #12]
	  servo_set_position(set);
 80040ee:	9803      	ldr	r0, [sp, #12]
 80040f0:	f7ff fe2a 	bl	8003d48 <servo_set_position>
	  return set;
 80040f4:	9803      	ldr	r0, [sp, #12]
 80040f6:	e7d4      	b.n	80040a2 <stabilize_by_pid+0x12>
 80040f8:	20000010 	.word	0x20000010
 80040fc:	20000370 	.word	0x20000370
 8004100:	42200000 	.word	0x42200000
 8004104:	c2200000 	.word	0xc2200000

08004108 <GYRO_struct_init>:

ANG_GYROtypedef* GYRO_struct_init(ANG_GYROtypedef* gyro_data)
{

	gyro_data->time = 0;
 8004108:	2300      	movs	r3, #0
{
 800410a:	b510      	push	{r4, lr}
	gyro_data->time = 0;
 800410c:	6083      	str	r3, [r0, #8]
	gyro_data->last_time = 0;
 800410e:	6043      	str	r3, [r0, #4]
	gyro_data->start_tick=DWT->CYCCNT;
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <GYRO_struct_init+0x2c>)
{
 8004112:	4604      	mov	r4, r0
	gyro_data->start_tick=DWT->CYCCNT;
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	6003      	str	r3, [r0, #0]
//	gyro_data->us_dt=delay_us;
	gyro_data->ax = angle_from_acc(X_AXIS);
 8004118:	2001      	movs	r0, #1
 800411a:	f7ff feed 	bl	8003ef8 <angle_from_acc>
 800411e:	60e0      	str	r0, [r4, #12]
	gyro_data->ay = angle_from_acc(Y_AXIS);
 8004120:	2002      	movs	r0, #2
 8004122:	f7ff fee9 	bl	8003ef8 <angle_from_acc>
 8004126:	6120      	str	r0, [r4, #16]
	gyro_data->az = angle_from_acc(Z_AXIS);
 8004128:	2003      	movs	r0, #3
 800412a:	f7ff fee5 	bl	8003ef8 <angle_from_acc>
 800412e:	6160      	str	r0, [r4, #20]
	return gyro_data;
}
 8004130:	4620      	mov	r0, r4
 8004132:	bd10      	pop	{r4, pc}
 8004134:	e0001000 	.word	0xe0001000

08004138 <main>:
{
 8004138:	b583      	push	{r0, r1, r7, lr}
  HAL_Init();
 800413a:	f7fc ff9b 	bl	8001074 <HAL_Init>
  SystemClock_Config();
 800413e:	f7ff fdc3 	bl	8003cc8 <SystemClock_Config>
  MX_GPIO_Init();
 8004142:	f7ff fd43 	bl	8003bcc <MX_GPIO_Init>
  MX_DMA_Init();
 8004146:	f7ff fd29 	bl	8003b9c <MX_DMA_Init>
  MX_I2C1_Init();
 800414a:	f7ff fd61 	bl	8003c10 <MX_I2C1_Init>
  MX_TIM4_Init();
 800414e:	f000 fa37 	bl	80045c0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004152:	f000 fa87 	bl	8004664 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004156:	f7ff fcaf 	bl	8003ab8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800415a:	f000 f9a1 	bl	80044a0 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800415e:	2100      	movs	r1, #0
 8004160:	486d      	ldr	r0, [pc, #436]	; (8004318 <main+0x1e0>)
 8004162:	f7fe ff0f 	bl	8002f84 <HAL_TIM_PWM_Start>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004166:	4c6d      	ldr	r4, [pc, #436]	; (800431c <main+0x1e4>)
  DWT_Init();
 8004168:	f7ff fa1a 	bl	80035a0 <DWT_Init>
  HAL_TIM_Base_Start(&htim1);
 800416c:	486c      	ldr	r0, [pc, #432]	; (8004320 <main+0x1e8>)
 800416e:	f7fe fc99 	bl	8002aa4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8004172:	486b      	ldr	r0, [pc, #428]	; (8004320 <main+0x1e8>)
 8004174:	f7fe fca8 	bl	8002ac8 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004178:	6822      	ldr	r2, [r4, #0]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 800417a:	496a      	ldr	r1, [pc, #424]	; (8004324 <main+0x1ec>)
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800417c:	68d3      	ldr	r3, [r2, #12]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 800417e:	486a      	ldr	r0, [pc, #424]	; (8004328 <main+0x1f0>)
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004180:	f043 0320 	orr.w	r3, r3, #32
 8004184:	60d3      	str	r3, [r2, #12]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1_DATA, 1);
 8004186:	2201      	movs	r2, #1
 8004188:	f7fd f8a2 	bl	80012d0 <HAL_ADC_Start_DMA>
  HAL_UART_Transmit(&huart1, hello_string, strlen(hello_string), 10);
 800418c:	4b67      	ldr	r3, [pc, #412]	; (800432c <main+0x1f4>)
  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,
 800418e:	2600      	movs	r6, #0
  HAL_UART_Transmit(&huart1, hello_string, strlen(hello_string), 10);
 8004190:	681d      	ldr	r5, [r3, #0]
  a =pid_hold;
 8004192:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8004394 <main+0x25c>
  HAL_UART_Transmit(&huart1, hello_string, strlen(hello_string), 10);
 8004196:	4628      	mov	r0, r5
 8004198:	f7fb ffe4 	bl	8000164 <strlen>
 800419c:	4629      	mov	r1, r5
 800419e:	b282      	uxth	r2, r0
 80041a0:	230a      	movs	r3, #10
 80041a2:	4620      	mov	r0, r4
 80041a4:	f7fe ffc8 	bl	8003138 <HAL_UART_Transmit>
  servo_set_position(SERVO_MIN_ANGLE);
 80041a8:	4861      	ldr	r0, [pc, #388]	; (8004330 <main+0x1f8>)
 80041aa:	f7ff fdcd 	bl	8003d48 <servo_set_position>
  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,
 80041ae:	4633      	mov	r3, r6
 80041b0:	4632      	mov	r2, r6
 80041b2:	9600      	str	r6, [sp, #0]
 80041b4:	495f      	ldr	r1, [pc, #380]	; (8004334 <main+0x1fc>)
 80041b6:	4860      	ldr	r0, [pc, #384]	; (8004338 <main+0x200>)
 80041b8:	f7ff fbb8 	bl	800392c <SD_MPU6050_Init>
 80041bc:	4c5f      	ldr	r4, [pc, #380]	; (800433c <main+0x204>)
  result = SD_MPU6050_SetDataRate(&hi2c1,&mpu1,
 80041be:	4632      	mov	r2, r6
 80041c0:	495c      	ldr	r1, [pc, #368]	; (8004334 <main+0x1fc>)
  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,
 80041c2:	7020      	strb	r0, [r4, #0]
  result = SD_MPU6050_SetDataRate(&hi2c1,&mpu1,
 80041c4:	485c      	ldr	r0, [pc, #368]	; (8004338 <main+0x200>)
 80041c6:	f7ff faf3 	bl	80037b0 <SD_MPU6050_SetDataRate>
 80041ca:	7020      	strb	r0, [r4, #0]
  HAL_Delay(500);
 80041cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041d0:	f7fc ff74 	bl	80010bc <HAL_Delay>
  gyro_angles=*GYRO_struct_init(&gyro_angles);
 80041d4:	485a      	ldr	r0, [pc, #360]	; (8004340 <main+0x208>)
 80041d6:	f7ff ff97 	bl	8004108 <GYRO_struct_init>
 80041da:	4605      	mov	r5, r0
 80041dc:	4c58      	ldr	r4, [pc, #352]	; (8004340 <main+0x208>)
 80041de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80041e6:	e884 0003 	stmia.w	r4, {r0, r1}
  servo_set_position(pid_hold);
 80041ea:	4c56      	ldr	r4, [pc, #344]	; (8004344 <main+0x20c>)
  startTick = DWT->CYCCNT;
 80041ec:	4f56      	ldr	r7, [pc, #344]	; (8004348 <main+0x210>)
  servo_set_position(pid_hold);
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	f7ff fdaa 	bl	8003d48 <servo_set_position>
  a =pid_hold;
 80041f4:	6823      	ldr	r3, [r4, #0]
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 80041f6:	4a55      	ldr	r2, [pc, #340]	; (800434c <main+0x214>)
  a =pid_hold;
 80041f8:	f8c8 3000 	str.w	r3, [r8]
  last_tick=0;
 80041fc:	4b54      	ldr	r3, [pc, #336]	; (8004350 <main+0x218>)
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 80041fe:	4955      	ldr	r1, [pc, #340]	; (8004354 <main+0x21c>)
  last_tick=0;
 8004200:	601e      	str	r6, [r3, #0]
  startTick = DWT->CYCCNT;
 8004202:	4b55      	ldr	r3, [pc, #340]	; (8004358 <main+0x220>)
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 8004204:	4855      	ldr	r0, [pc, #340]	; (800435c <main+0x224>)
  startTick = DWT->CYCCNT;
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4646      	mov	r6, r8
 800420a:	603b      	str	r3, [r7, #0]
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 800420c:	9400      	str	r4, [sp, #0]
 800420e:	4b54      	ldr	r3, [pc, #336]	; (8004360 <main+0x228>)
 8004210:	f7ff fa8e 	bl	8003730 <PID_init>
 8004214:	4605      	mov	r5, r0
 8004216:	4c51      	ldr	r4, [pc, #324]	; (800435c <main+0x224>)
 8004218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800421a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800421c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800421e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004220:	682b      	ldr	r3, [r5, #0]
	  if(strcmp(uart_string, "gyro:z\r") == 0)
 8004222:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8004398 <main+0x260>
  gst_pid = *PID_init(&gst_pid, &Kp, &Ki, &Kd, &pid_hold);
 8004226:	6023      	str	r3, [r4, #0]
	  if(uart_buffer[uart_rx_counter-1] == '\r')
 8004228:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800439c <main+0x264>
	  if(strcmp(uart_string, "gyro:z\r") == 0)
 800422c:	4c4d      	ldr	r4, [pc, #308]	; (8004364 <main+0x22c>)
		  strcpy(uart_string, "");
 800422e:	4d4e      	ldr	r5, [pc, #312]	; (8004368 <main+0x230>)
	  if(strcmp(uart_string, "gyro:z\r") == 0)
 8004230:	4649      	mov	r1, r9
 8004232:	4620      	mov	r0, r4
 8004234:	f7fb ff8c 	bl	8000150 <strcmp>
 8004238:	b970      	cbnz	r0, 8004258 <main+0x120>
		  strcpy(uart_string, "");
 800423a:	4629      	mov	r1, r5
 800423c:	4620      	mov	r0, r4
 800423e:	f000 fae3 	bl	8004808 <strcpy>
		  UART_Transmit_string_CR_LF(&huart1,"gx:",10);
 8004242:	220a      	movs	r2, #10
 8004244:	4949      	ldr	r1, [pc, #292]	; (800436c <main+0x234>)
 8004246:	4835      	ldr	r0, [pc, #212]	; (800431c <main+0x1e4>)
 8004248:	f7ff f925 	bl	8003496 <UART_Transmit_string_CR_LF>
		  UART_send_float(angle_from_gyro(Z_AXIS, &gyro_angles));
 800424c:	493c      	ldr	r1, [pc, #240]	; (8004340 <main+0x208>)
 800424e:	2003      	movs	r0, #3
 8004250:	f7ff feaa 	bl	8003fa8 <angle_from_gyro>
 8004254:	f7ff f94c 	bl	80034f0 <UART_send_float>
	  if(strcmp(uart_string, "calibr:start\r") == 0)
 8004258:	4945      	ldr	r1, [pc, #276]	; (8004370 <main+0x238>)
 800425a:	4620      	mov	r0, r4
 800425c:	f7fb ff78 	bl	8000150 <strcmp>
 8004260:	b928      	cbnz	r0, 800426e <main+0x136>
		  potentiometer_calibration();
 8004262:	f7ff fda5 	bl	8003db0 <potentiometer_calibration>
		  strcpy(uart_string, "");
 8004266:	4629      	mov	r1, r5
 8004268:	4620      	mov	r0, r4
 800426a:	f000 facd 	bl	8004808 <strcpy>
	  if(strcmp(uart_string, "calibr:send_ab\r") == 0)
 800426e:	4941      	ldr	r1, [pc, #260]	; (8004374 <main+0x23c>)
 8004270:	4620      	mov	r0, r4
 8004272:	f7fb ff6d 	bl	8000150 <strcmp>
 8004276:	b980      	cbnz	r0, 800429a <main+0x162>
		  UART_Transmit_string_CR_LF(&huart1, "resistance to degree a and b:", 10);
 8004278:	493f      	ldr	r1, [pc, #252]	; (8004378 <main+0x240>)
 800427a:	220a      	movs	r2, #10
 800427c:	4827      	ldr	r0, [pc, #156]	; (800431c <main+0x1e4>)
 800427e:	f7ff f90a 	bl	8003496 <UART_Transmit_string_CR_LF>
		  UART_send_float(RTD_a);
 8004282:	4b3e      	ldr	r3, [pc, #248]	; (800437c <main+0x244>)
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	f7ff f933 	bl	80034f0 <UART_send_float>
		  UART_send_float(RTD_b);
 800428a:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <main+0x248>)
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	f7ff f92f 	bl	80034f0 <UART_send_float>
		  strcpy(uart_string, "");
 8004292:	4629      	mov	r1, r5
 8004294:	4620      	mov	r0, r4
 8004296:	f000 fab7 	bl	8004808 <strcpy>
	  if(strcmp(uart_string, "start:calibration\r") == 0)
 800429a:	493a      	ldr	r1, [pc, #232]	; (8004384 <main+0x24c>)
 800429c:	4620      	mov	r0, r4
 800429e:	f7fb ff57 	bl	8000150 <strcmp>
 80042a2:	b928      	cbnz	r0, 80042b0 <main+0x178>
		  potentiometer_calibration();
 80042a4:	f7ff fd84 	bl	8003db0 <potentiometer_calibration>
		  strcpy(uart_string, "");
 80042a8:	4629      	mov	r1, r5
 80042aa:	4620      	mov	r0, r4
 80042ac:	f000 faac 	bl	8004808 <strcpy>
	  if(strcmp(uart_string, "tracking:start\r") == 0)
 80042b0:	4935      	ldr	r1, [pc, #212]	; (8004388 <main+0x250>)
 80042b2:	4620      	mov	r0, r4
 80042b4:	f7fb ff4c 	bl	8000150 <strcmp>
 80042b8:	b968      	cbnz	r0, 80042d6 <main+0x19e>
		  tick=get_microseconds_since_begin(startTick);
 80042ba:	6838      	ldr	r0, [r7, #0]
 80042bc:	f7ff fe58 	bl	8003f70 <get_microseconds_since_begin>
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <main+0x254>)
 80042c2:	4602      	mov	r2, r0
 80042c4:	6018      	str	r0, [r3, #0]
		  a = stabilize_by_pid(&gst_pid, ONE_US*1000, tick);
 80042c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042ca:	4824      	ldr	r0, [pc, #144]	; (800435c <main+0x224>)
 80042cc:	f7ff fee0 	bl	8004090 <stabilize_by_pid>
 80042d0:	6030      	str	r0, [r6, #0]
		  UART_send_float(a);
 80042d2:	f7ff f90d 	bl	80034f0 <UART_send_float>
	  if(strcmp(uart_string, "tracking:stop\r") == 0)
 80042d6:	492e      	ldr	r1, [pc, #184]	; (8004390 <main+0x258>)
 80042d8:	4620      	mov	r0, r4
 80042da:	f7fb ff39 	bl	8000150 <strcmp>
 80042de:	b918      	cbnz	r0, 80042e8 <main+0x1b0>
		  strcpy(uart_string, "");
 80042e0:	4629      	mov	r1, r5
 80042e2:	4620      	mov	r0, r4
 80042e4:	f000 fa90 	bl	8004808 <strcpy>
	  if(uart_buffer[uart_rx_counter-1] == '\r')
 80042e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80043a0 <main+0x268>
 80042ec:	f89a 3000 	ldrb.w	r3, [sl]
 80042f0:	4443      	add	r3, r8
 80042f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80042f6:	2b0d      	cmp	r3, #13
 80042f8:	d19a      	bne.n	8004230 <main+0xf8>
		  strcpy(uart_string, uart_buffer);
 80042fa:	4641      	mov	r1, r8
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 fa83 	bl	8004808 <strcpy>
		  uart_rx_counter=0;
 8004302:	2000      	movs	r0, #0
		  clear_uart_buffer(uart_rx_counter, 100, uart_buffer);
 8004304:	4642      	mov	r2, r8
 8004306:	2164      	movs	r1, #100	; 0x64
		  uart_rx_counter=0;
 8004308:	f88a 0000 	strb.w	r0, [sl]
		  clear_uart_buffer(uart_rx_counter, 100, uart_buffer);
 800430c:	f7ff f8b8 	bl	8003480 <clear_uart_buffer>
		  HAL_Delay(1);
 8004310:	2001      	movs	r0, #1
 8004312:	f7fc fed3 	bl	80010bc <HAL_Delay>
 8004316:	e78a      	b.n	800422e <main+0xf6>
 8004318:	20000474 	.word	0x20000474
 800431c:	200004f4 	.word	0x200004f4
 8004320:	200004b4 	.word	0x200004b4
 8004324:	200000ac 	.word	0x200000ac
 8004328:	20000190 	.word	0x20000190
 800432c:	20000020 	.word	0x20000020
 8004330:	c2200000 	.word	0xc2200000
 8004334:	20000390 	.word	0x20000390
 8004338:	20000204 	.word	0x20000204
 800433c:	2000036c 	.word	0x2000036c
 8004340:	20000370 	.word	0x20000370
 8004344:	200000bc 	.word	0x200000bc
 8004348:	2000033c 	.word	0x2000033c
 800434c:	200000b4 	.word	0x200000b4
 8004350:	20000330 	.word	0x20000330
 8004354:	20000014 	.word	0x20000014
 8004358:	e0001000 	.word	0xe0001000
 800435c:	20000348 	.word	0x20000348
 8004360:	200000b0 	.word	0x200000b0
 8004364:	20000125 	.word	0x20000125
 8004368:	08004e65 	.word	0x08004e65
 800436c:	08004dda 	.word	0x08004dda
 8004370:	08004dde 	.word	0x08004dde
 8004374:	08004dec 	.word	0x08004dec
 8004378:	08004dfc 	.word	0x08004dfc
 800437c:	20000018 	.word	0x20000018
 8004380:	2000001c 	.word	0x2000001c
 8004384:	08004e1a 	.word	0x08004e1a
 8004388:	08004e2d 	.word	0x08004e2d
 800438c:	20000340 	.word	0x20000340
 8004390:	08004e3d 	.word	0x08004e3d
 8004394:	200000b8 	.word	0x200000b8
 8004398:	08004dd2 	.word	0x08004dd2
 800439c:	200000c0 	.word	0x200000c0
 80043a0:	20000124 	.word	0x20000124

080043a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <HAL_MspInit+0x3c>)
{
 80043aa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	619a      	str	r2, [r3, #24]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	f002 0201 	and.w	r2, r2, #1
 80043ba:	9200      	str	r2, [sp, #0]
 80043bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043c4:	61da      	str	r2, [r3, #28]
 80043c6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80043c8:	4a07      	ldr	r2, [pc, #28]	; (80043e8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80043d2:	6853      	ldr	r3, [r2, #4]
 80043d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80043d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043de:	b002      	add	sp, #8
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40010000 	.word	0x40010000

080043ec <NMI_Handler>:
 80043ec:	4770      	bx	lr

080043ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ee:	e7fe      	b.n	80043ee <HardFault_Handler>

080043f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043f0:	e7fe      	b.n	80043f0 <MemManage_Handler>

080043f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043f2:	e7fe      	b.n	80043f2 <BusFault_Handler>

080043f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043f4:	e7fe      	b.n	80043f4 <UsageFault_Handler>

080043f6 <SVC_Handler>:
 80043f6:	4770      	bx	lr

080043f8 <DebugMon_Handler>:
 80043f8:	4770      	bx	lr

080043fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043fa:	4770      	bx	lr

080043fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043fc:	f7fc be4c 	b.w	8001098 <HAL_IncTick>

08004400 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004400:	4801      	ldr	r0, [pc, #4]	; (8004408 <DMA1_Channel1_IRQHandler+0x8>)
 8004402:	f7fd b9b5 	b.w	8001770 <HAL_DMA_IRQHandler>
 8004406:	bf00      	nop
 8004408:	200001c0 	.word	0x200001c0

0800440c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800440c:	4801      	ldr	r0, [pc, #4]	; (8004414 <TIM1_UP_IRQHandler+0x8>)
 800440e:	f7fe bb71 	b.w	8002af4 <HAL_TIM_IRQHandler>
 8004412:	bf00      	nop
 8004414:	200004b4 	.word	0x200004b4

08004418 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004418:	4801      	ldr	r0, [pc, #4]	; (8004420 <TIM4_IRQHandler+0x8>)
 800441a:	f7fe bb6b 	b.w	8002af4 <HAL_TIM_IRQHandler>
 800441e:	bf00      	nop
 8004420:	20000474 	.word	0x20000474

08004424 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004424:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004426:	4d08      	ldr	r5, [pc, #32]	; (8004448 <USART1_IRQHandler+0x24>)
  /* USER CODE BEGIN USART1_IRQn 1 */

  HAL_UART_Receive(&huart1, &uart_buffer[uart_rx_counter], 1, 10);
 8004428:	4c08      	ldr	r4, [pc, #32]	; (800444c <USART1_IRQHandler+0x28>)
  HAL_UART_IRQHandler(&huart1);
 800442a:	4628      	mov	r0, r5
 800442c:	f7fe ff80 	bl	8003330 <HAL_UART_IRQHandler>
  HAL_UART_Receive(&huart1, &uart_buffer[uart_rx_counter], 1, 10);
 8004430:	7821      	ldrb	r1, [r4, #0]
 8004432:	4807      	ldr	r0, [pc, #28]	; (8004450 <USART1_IRQHandler+0x2c>)
 8004434:	230a      	movs	r3, #10
 8004436:	4401      	add	r1, r0
 8004438:	2201      	movs	r2, #1
 800443a:	4628      	mov	r0, r5
 800443c:	f7fe fed8 	bl	80031f0 <HAL_UART_Receive>
//  HAL_UART_Transmit(&huart1, &uart_buffer[uart_rx_counter], 1, 10);

  ++uart_rx_counter;
 8004440:	7823      	ldrb	r3, [r4, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	7023      	strb	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	200004f4 	.word	0x200004f4
 800444c:	20000124 	.word	0x20000124
 8004450:	200000c0 	.word	0x200000c0

08004454 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <SystemInit+0x40>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <SystemInit+0x44>)
 8004462:	400a      	ands	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800446c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004470:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004478:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004480:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004482:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004486:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004488:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <SystemInit+0x48>)
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	f8ff0000 	.word	0xf8ff0000
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80044a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044a2:	2210      	movs	r2, #16
 80044a4:	2100      	movs	r1, #0
 80044a6:	a802      	add	r0, sp, #8
 80044a8:	f000 f9a6 	bl	80047f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 320;
 80044ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
  htim1.Instance = TIM1;
 80044b0:	4814      	ldr	r0, [pc, #80]	; (8004504 <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 320;
 80044b2:	4915      	ldr	r1, [pc, #84]	; (8004508 <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b4:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 320;
 80044b6:	e880 0006 	stmia.w	r0, {r1, r2}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 32000;
 80044ba:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	9301      	str	r3, [sp, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c2:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 32000;
 80044c4:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044c6:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80044c8:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044cc:	f7fe fbec 	bl	8002ca8 <HAL_TIM_Base_Init>
 80044d0:	b108      	cbz	r0, 80044d6 <MX_TIM1_Init+0x36>
  {
    Error_Handler();
 80044d2:	f7ff ff67 	bl	80043a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044da:	a902      	add	r1, sp, #8
 80044dc:	4809      	ldr	r0, [pc, #36]	; (8004504 <MX_TIM1_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044de:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044e0:	f7fe fcae 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 80044e4:	b108      	cbz	r0, 80044ea <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 80044e6:	f7ff ff5d 	bl	80043a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ea:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044ec:	4669      	mov	r1, sp
 80044ee:	4805      	ldr	r0, [pc, #20]	; (8004504 <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044f0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044f4:	f7fe fd62 	bl	8002fbc <HAL_TIMEx_MasterConfigSynchronization>
 80044f8:	b108      	cbz	r0, 80044fe <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80044fa:	f7ff ff53 	bl	80043a4 <Error_Handler>
  }

}
 80044fe:	b007      	add	sp, #28
 8004500:	f85d fb04 	ldr.w	pc, [sp], #4
 8004504:	200004b4 	.word	0x200004b4
 8004508:	40012c00 	.word	0x40012c00

0800450c <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800450c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 800450e:	6803      	ldr	r3, [r0, #0]
 8004510:	4a15      	ldr	r2, [pc, #84]	; (8004568 <HAL_TIM_Base_MspInit+0x5c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d114      	bne.n	8004540 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <HAL_TIM_Base_MspInit+0x60>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004518:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004520:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004522:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004524:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004526:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004530:	f7fd f810 	bl	8001554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004534:	2019      	movs	r0, #25
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004536:	f7fd f841 	bl	80015bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800453a:	b003      	add	sp, #12
 800453c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 8004540:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <HAL_TIM_Base_MspInit+0x64>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d1f9      	bne.n	800453a <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004548:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	f042 0204 	orr.w	r2, r2, #4
 8004550:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004552:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004554:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004556:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004560:	f7fc fff8 	bl	8001554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004564:	201e      	movs	r0, #30
 8004566:	e7e6      	b.n	8004536 <HAL_TIM_Base_MspInit+0x2a>
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40021000 	.word	0x40021000
 8004570:	40000800 	.word	0x40000800

08004574 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004574:	b510      	push	{r4, lr}
 8004576:	4604      	mov	r4, r0
 8004578:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457a:	2210      	movs	r2, #16
 800457c:	2100      	movs	r1, #0
 800457e:	a802      	add	r0, sp, #8
 8004580:	f000 f93a 	bl	80047f8 <memset>
  if(timHandle->Instance==TIM4)
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <HAL_TIM_MspPostInit+0x44>)
 8004588:	429a      	cmp	r2, r3
 800458a:	d113      	bne.n	80045b4 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800458c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004590:	699a      	ldr	r2, [r3, #24]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004592:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004594:	f042 0208 	orr.w	r2, r2, #8
 8004598:	619a      	str	r2, [r3, #24]
 800459a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459c:	4807      	ldr	r0, [pc, #28]	; (80045bc <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045a6:	2340      	movs	r3, #64	; 0x40
 80045a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
 80045ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b0:	f7fd f972 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80045b4:	b006      	add	sp, #24
 80045b6:	bd10      	pop	{r4, pc}
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40010c00 	.word	0x40010c00

080045c0 <MX_TIM4_Init>:
{
 80045c0:	b510      	push	{r4, lr}
 80045c2:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045c4:	2210      	movs	r2, #16
 80045c6:	2100      	movs	r1, #0
 80045c8:	a803      	add	r0, sp, #12
 80045ca:	f000 f915 	bl	80047f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045ce:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045d0:	221c      	movs	r2, #28
 80045d2:	4621      	mov	r1, r4
 80045d4:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045d8:	9401      	str	r4, [sp, #4]
 80045da:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045dc:	f000 f90c 	bl	80047f8 <memset>
  htim4.Init.Prescaler = 64;
 80045e0:	2340      	movs	r3, #64	; 0x40
  htim4.Instance = TIM4;
 80045e2:	481e      	ldr	r0, [pc, #120]	; (800465c <MX_TIM4_Init+0x9c>)
  htim4.Init.Prescaler = 64;
 80045e4:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <MX_TIM4_Init+0xa0>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e6:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 64;
 80045e8:	e880 000c 	stmia.w	r0, {r2, r3}
  htim4.Init.Period = 20000;
 80045ec:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045f0:	6104      	str	r4, [r0, #16]
  htim4.Init.Period = 20000;
 80045f2:	60c3      	str	r3, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045f4:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045f6:	f7fe fb57 	bl	8002ca8 <HAL_TIM_Base_Init>
 80045fa:	b108      	cbz	r0, 8004600 <MX_TIM4_Init+0x40>
    Error_Handler();
 80045fc:	f7ff fed2 	bl	80043a4 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004604:	a903      	add	r1, sp, #12
 8004606:	4815      	ldr	r0, [pc, #84]	; (800465c <MX_TIM4_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004608:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800460a:	f7fe fc19 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 800460e:	b108      	cbz	r0, 8004614 <MX_TIM4_Init+0x54>
    Error_Handler();
 8004610:	f7ff fec8 	bl	80043a4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004614:	4811      	ldr	r0, [pc, #68]	; (800465c <MX_TIM4_Init+0x9c>)
 8004616:	f7fe fb61 	bl	8002cdc <HAL_TIM_PWM_Init>
 800461a:	b108      	cbz	r0, 8004620 <MX_TIM4_Init+0x60>
    Error_Handler();
 800461c:	f7ff fec2 	bl	80043a4 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004620:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004622:	a901      	add	r1, sp, #4
 8004624:	480d      	ldr	r0, [pc, #52]	; (800465c <MX_TIM4_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004626:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004628:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800462a:	f7fe fcc7 	bl	8002fbc <HAL_TIMEx_MasterConfigSynchronization>
 800462e:	b108      	cbz	r0, 8004634 <MX_TIM4_Init+0x74>
    Error_Handler();
 8004630:	f7ff feb8 	bl	80043a4 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004634:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004636:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004638:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 1000;
 800463a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800463e:	a907      	add	r1, sp, #28
 8004640:	4806      	ldr	r0, [pc, #24]	; (800465c <MX_TIM4_Init+0x9c>)
  sConfigOC.Pulse = 1000;
 8004642:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004644:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004646:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004648:	f7fe fb8e 	bl	8002d68 <HAL_TIM_PWM_ConfigChannel>
 800464c:	b108      	cbz	r0, 8004652 <MX_TIM4_Init+0x92>
    Error_Handler();
 800464e:	f7ff fea9 	bl	80043a4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8004652:	4802      	ldr	r0, [pc, #8]	; (800465c <MX_TIM4_Init+0x9c>)
 8004654:	f7ff ff8e 	bl	8004574 <HAL_TIM_MspPostInit>
}
 8004658:	b00e      	add	sp, #56	; 0x38
 800465a:	bd10      	pop	{r4, pc}
 800465c:	20000474 	.word	0x20000474
 8004660:	40000800 	.word	0x40000800

08004664 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004664:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8004666:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 800466a:	480a      	ldr	r0, [pc, #40]	; (8004694 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800466e:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8004670:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004674:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004676:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004678:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800467a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800467c:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800467e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004680:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004682:	f7fe fd2b 	bl	80030dc <HAL_UART_Init>
 8004686:	b118      	cbz	r0, 8004690 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800468c:	f7ff be8a 	b.w	80043a4 <Error_Handler>
 8004690:	bd08      	pop	{r3, pc}
 8004692:	bf00      	nop
 8004694:	200004f4 	.word	0x200004f4
 8004698:	40013800 	.word	0x40013800

0800469c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800469c:	b510      	push	{r4, lr}
 800469e:	4604      	mov	r4, r0
 80046a0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a2:	2210      	movs	r2, #16
 80046a4:	2100      	movs	r1, #0
 80046a6:	a802      	add	r0, sp, #8
 80046a8:	f000 f8a6 	bl	80047f8 <memset>
  if(uartHandle->Instance==USART1)
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_UART_MspInit+0x80>)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d130      	bne.n	8004716 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046b4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80046b8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ba:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80046bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046c0:	619a      	str	r2, [r3, #24]
 80046c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c4:	4816      	ldr	r0, [pc, #88]	; (8004720 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80046c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80046ca:	9200      	str	r2, [sp, #0]
 80046cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ce:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046d0:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d2:	f042 0204 	orr.w	r2, r2, #4
 80046d6:	619a      	str	r2, [r3, #24]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046ec:	2303      	movs	r3, #3
 80046ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f0:	f7fd f8d2 	bl	8001898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f8:	a902      	add	r1, sp, #8
 80046fa:	4809      	ldr	r0, [pc, #36]	; (8004720 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046fe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004700:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004702:	f7fd f8c9 	bl	8001898 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004706:	2025      	movs	r0, #37	; 0x25
 8004708:	4622      	mov	r2, r4
 800470a:	4621      	mov	r1, r4
 800470c:	f7fc ff22 	bl	8001554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004710:	2025      	movs	r0, #37	; 0x25
 8004712:	f7fc ff53 	bl	80015bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004716:	b006      	add	sp, #24
 8004718:	bd10      	pop	{r4, pc}
 800471a:	bf00      	nop
 800471c:	40013800 	.word	0x40013800
 8004720:	40010800 	.word	0x40010800

08004724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004724:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004726:	e003      	b.n	8004730 <LoopCopyDataInit>

08004728 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800472a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800472c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800472e:	3104      	adds	r1, #4

08004730 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004730:	480a      	ldr	r0, [pc, #40]	; (800475c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004734:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004736:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004738:	d3f6      	bcc.n	8004728 <CopyDataInit>
  ldr r2, =_sbss
 800473a:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800473c:	e002      	b.n	8004744 <LoopFillZerobss>

0800473e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800473e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004740:	f842 3b04 	str.w	r3, [r2], #4

08004744 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004744:	4b08      	ldr	r3, [pc, #32]	; (8004768 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004746:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004748:	d3f9      	bcc.n	800473e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800474a:	f7ff fe83 	bl	8004454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800474e:	f000 f815 	bl	800477c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004752:	f7ff fcf1 	bl	8004138 <main>
  bx lr
 8004756:	4770      	bx	lr
  ldr r3, =_sidata
 8004758:	08004ed4 	.word	0x08004ed4
  ldr r0, =_sdata
 800475c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004760:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8004764:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8004768:	20000534 	.word	0x20000534

0800476c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800476c:	e7fe      	b.n	800476c <ADC1_2_IRQHandler>
	...

08004770 <__errno>:
 8004770:	4b01      	ldr	r3, [pc, #4]	; (8004778 <__errno+0x8>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000028 	.word	0x20000028

0800477c <__libc_init_array>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	2500      	movs	r5, #0
 8004780:	4e0c      	ldr	r6, [pc, #48]	; (80047b4 <__libc_init_array+0x38>)
 8004782:	4c0d      	ldr	r4, [pc, #52]	; (80047b8 <__libc_init_array+0x3c>)
 8004784:	1ba4      	subs	r4, r4, r6
 8004786:	10a4      	asrs	r4, r4, #2
 8004788:	42a5      	cmp	r5, r4
 800478a:	d109      	bne.n	80047a0 <__libc_init_array+0x24>
 800478c:	f000 fb0c 	bl	8004da8 <_init>
 8004790:	2500      	movs	r5, #0
 8004792:	4e0a      	ldr	r6, [pc, #40]	; (80047bc <__libc_init_array+0x40>)
 8004794:	4c0a      	ldr	r4, [pc, #40]	; (80047c0 <__libc_init_array+0x44>)
 8004796:	1ba4      	subs	r4, r4, r6
 8004798:	10a4      	asrs	r4, r4, #2
 800479a:	42a5      	cmp	r5, r4
 800479c:	d105      	bne.n	80047aa <__libc_init_array+0x2e>
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047a4:	4798      	blx	r3
 80047a6:	3501      	adds	r5, #1
 80047a8:	e7ee      	b.n	8004788 <__libc_init_array+0xc>
 80047aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047ae:	4798      	blx	r3
 80047b0:	3501      	adds	r5, #1
 80047b2:	e7f2      	b.n	800479a <__libc_init_array+0x1e>
 80047b4:	08004ecc 	.word	0x08004ecc
 80047b8:	08004ecc 	.word	0x08004ecc
 80047bc:	08004ecc 	.word	0x08004ecc
 80047c0:	08004ed0 	.word	0x08004ed0

080047c4 <__itoa>:
 80047c4:	1e93      	subs	r3, r2, #2
 80047c6:	2b22      	cmp	r3, #34	; 0x22
 80047c8:	b510      	push	{r4, lr}
 80047ca:	460c      	mov	r4, r1
 80047cc:	d904      	bls.n	80047d8 <__itoa+0x14>
 80047ce:	2300      	movs	r3, #0
 80047d0:	461c      	mov	r4, r3
 80047d2:	700b      	strb	r3, [r1, #0]
 80047d4:	4620      	mov	r0, r4
 80047d6:	bd10      	pop	{r4, pc}
 80047d8:	2a0a      	cmp	r2, #10
 80047da:	d109      	bne.n	80047f0 <__itoa+0x2c>
 80047dc:	2800      	cmp	r0, #0
 80047de:	da07      	bge.n	80047f0 <__itoa+0x2c>
 80047e0:	232d      	movs	r3, #45	; 0x2d
 80047e2:	700b      	strb	r3, [r1, #0]
 80047e4:	2101      	movs	r1, #1
 80047e6:	4240      	negs	r0, r0
 80047e8:	4421      	add	r1, r4
 80047ea:	f000 f815 	bl	8004818 <__utoa>
 80047ee:	e7f1      	b.n	80047d4 <__itoa+0x10>
 80047f0:	2100      	movs	r1, #0
 80047f2:	e7f9      	b.n	80047e8 <__itoa+0x24>

080047f4 <itoa>:
 80047f4:	f7ff bfe6 	b.w	80047c4 <__itoa>

080047f8 <memset>:
 80047f8:	4603      	mov	r3, r0
 80047fa:	4402      	add	r2, r0
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d100      	bne.n	8004802 <memset+0xa>
 8004800:	4770      	bx	lr
 8004802:	f803 1b01 	strb.w	r1, [r3], #1
 8004806:	e7f9      	b.n	80047fc <memset+0x4>

08004808 <strcpy>:
 8004808:	4603      	mov	r3, r0
 800480a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800480e:	f803 2b01 	strb.w	r2, [r3], #1
 8004812:	2a00      	cmp	r2, #0
 8004814:	d1f9      	bne.n	800480a <strcpy+0x2>
 8004816:	4770      	bx	lr

08004818 <__utoa>:
 8004818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481a:	b08b      	sub	sp, #44	; 0x2c
 800481c:	4603      	mov	r3, r0
 800481e:	460f      	mov	r7, r1
 8004820:	466d      	mov	r5, sp
 8004822:	4c1c      	ldr	r4, [pc, #112]	; (8004894 <__utoa+0x7c>)
 8004824:	f104 0e20 	add.w	lr, r4, #32
 8004828:	462e      	mov	r6, r5
 800482a:	6820      	ldr	r0, [r4, #0]
 800482c:	6861      	ldr	r1, [r4, #4]
 800482e:	3408      	adds	r4, #8
 8004830:	c603      	stmia	r6!, {r0, r1}
 8004832:	4574      	cmp	r4, lr
 8004834:	4635      	mov	r5, r6
 8004836:	d1f7      	bne.n	8004828 <__utoa+0x10>
 8004838:	7921      	ldrb	r1, [r4, #4]
 800483a:	6820      	ldr	r0, [r4, #0]
 800483c:	7131      	strb	r1, [r6, #4]
 800483e:	1e91      	subs	r1, r2, #2
 8004840:	2922      	cmp	r1, #34	; 0x22
 8004842:	6030      	str	r0, [r6, #0]
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	d904      	bls.n	8004854 <__utoa+0x3c>
 800484a:	7039      	strb	r1, [r7, #0]
 800484c:	460f      	mov	r7, r1
 800484e:	4638      	mov	r0, r7
 8004850:	b00b      	add	sp, #44	; 0x2c
 8004852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004854:	1e78      	subs	r0, r7, #1
 8004856:	4606      	mov	r6, r0
 8004858:	fbb3 f5f2 	udiv	r5, r3, r2
 800485c:	fb02 3315 	mls	r3, r2, r5, r3
 8004860:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004864:	4473      	add	r3, lr
 8004866:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800486a:	1c4c      	adds	r4, r1, #1
 800486c:	f806 3f01 	strb.w	r3, [r6, #1]!
 8004870:	462b      	mov	r3, r5
 8004872:	b965      	cbnz	r5, 800488e <__utoa+0x76>
 8004874:	553d      	strb	r5, [r7, r4]
 8004876:	187a      	adds	r2, r7, r1
 8004878:	1acc      	subs	r4, r1, r3
 800487a:	42a3      	cmp	r3, r4
 800487c:	dae7      	bge.n	800484e <__utoa+0x36>
 800487e:	7844      	ldrb	r4, [r0, #1]
 8004880:	7815      	ldrb	r5, [r2, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	f800 5f01 	strb.w	r5, [r0, #1]!
 8004888:	f802 4901 	strb.w	r4, [r2], #-1
 800488c:	e7f4      	b.n	8004878 <__utoa+0x60>
 800488e:	4621      	mov	r1, r4
 8004890:	e7e2      	b.n	8004858 <__utoa+0x40>
 8004892:	bf00      	nop
 8004894:	08004e7e 	.word	0x08004e7e

08004898 <atanf>:
 8004898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800489c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80048a0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80048a4:	4604      	mov	r4, r0
 80048a6:	4607      	mov	r7, r0
 80048a8:	db0e      	blt.n	80048c8 <atanf+0x30>
 80048aa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80048ae:	dd04      	ble.n	80048ba <atanf+0x22>
 80048b0:	4601      	mov	r1, r0
 80048b2:	f7fc f8a7 	bl	8000a04 <__addsf3>
 80048b6:	4604      	mov	r4, r0
 80048b8:	e003      	b.n	80048c2 <atanf+0x2a>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	f300 80d2 	bgt.w	8004a64 <atanf+0x1cc>
 80048c0:	4c69      	ldr	r4, [pc, #420]	; (8004a68 <atanf+0x1d0>)
 80048c2:	4620      	mov	r0, r4
 80048c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c8:	4b68      	ldr	r3, [pc, #416]	; (8004a6c <atanf+0x1d4>)
 80048ca:	429d      	cmp	r5, r3
 80048cc:	dc0e      	bgt.n	80048ec <atanf+0x54>
 80048ce:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80048d2:	da08      	bge.n	80048e6 <atanf+0x4e>
 80048d4:	4966      	ldr	r1, [pc, #408]	; (8004a70 <atanf+0x1d8>)
 80048d6:	f7fc f895 	bl	8000a04 <__addsf3>
 80048da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80048de:	f7fc fb55 	bl	8000f8c <__aeabi_fcmpgt>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d1ed      	bne.n	80048c2 <atanf+0x2a>
 80048e6:	f04f 36ff 	mov.w	r6, #4294967295
 80048ea:	e01c      	b.n	8004926 <atanf+0x8e>
 80048ec:	f000 f8e4 	bl	8004ab8 <fabsf>
 80048f0:	4b60      	ldr	r3, [pc, #384]	; (8004a74 <atanf+0x1dc>)
 80048f2:	4604      	mov	r4, r0
 80048f4:	429d      	cmp	r5, r3
 80048f6:	dc7c      	bgt.n	80049f2 <atanf+0x15a>
 80048f8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80048fc:	429d      	cmp	r5, r3
 80048fe:	dc67      	bgt.n	80049d0 <atanf+0x138>
 8004900:	4601      	mov	r1, r0
 8004902:	f7fc f87f 	bl	8000a04 <__addsf3>
 8004906:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800490a:	f7fc f879 	bl	8000a00 <__aeabi_fsub>
 800490e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004912:	4605      	mov	r5, r0
 8004914:	4620      	mov	r0, r4
 8004916:	f7fc f875 	bl	8000a04 <__addsf3>
 800491a:	4601      	mov	r1, r0
 800491c:	4628      	mov	r0, r5
 800491e:	f7fc fa2d 	bl	8000d7c <__aeabi_fdiv>
 8004922:	2600      	movs	r6, #0
 8004924:	4604      	mov	r4, r0
 8004926:	4621      	mov	r1, r4
 8004928:	4620      	mov	r0, r4
 800492a:	f7fc f973 	bl	8000c14 <__aeabi_fmul>
 800492e:	4601      	mov	r1, r0
 8004930:	4680      	mov	r8, r0
 8004932:	f7fc f96f 	bl	8000c14 <__aeabi_fmul>
 8004936:	4605      	mov	r5, r0
 8004938:	494f      	ldr	r1, [pc, #316]	; (8004a78 <atanf+0x1e0>)
 800493a:	f7fc f96b 	bl	8000c14 <__aeabi_fmul>
 800493e:	494f      	ldr	r1, [pc, #316]	; (8004a7c <atanf+0x1e4>)
 8004940:	f7fc f860 	bl	8000a04 <__addsf3>
 8004944:	4629      	mov	r1, r5
 8004946:	f7fc f965 	bl	8000c14 <__aeabi_fmul>
 800494a:	494d      	ldr	r1, [pc, #308]	; (8004a80 <atanf+0x1e8>)
 800494c:	f7fc f85a 	bl	8000a04 <__addsf3>
 8004950:	4629      	mov	r1, r5
 8004952:	f7fc f95f 	bl	8000c14 <__aeabi_fmul>
 8004956:	494b      	ldr	r1, [pc, #300]	; (8004a84 <atanf+0x1ec>)
 8004958:	f7fc f854 	bl	8000a04 <__addsf3>
 800495c:	4629      	mov	r1, r5
 800495e:	f7fc f959 	bl	8000c14 <__aeabi_fmul>
 8004962:	4949      	ldr	r1, [pc, #292]	; (8004a88 <atanf+0x1f0>)
 8004964:	f7fc f84e 	bl	8000a04 <__addsf3>
 8004968:	4629      	mov	r1, r5
 800496a:	f7fc f953 	bl	8000c14 <__aeabi_fmul>
 800496e:	4947      	ldr	r1, [pc, #284]	; (8004a8c <atanf+0x1f4>)
 8004970:	f7fc f848 	bl	8000a04 <__addsf3>
 8004974:	4641      	mov	r1, r8
 8004976:	f7fc f94d 	bl	8000c14 <__aeabi_fmul>
 800497a:	4945      	ldr	r1, [pc, #276]	; (8004a90 <atanf+0x1f8>)
 800497c:	4680      	mov	r8, r0
 800497e:	4628      	mov	r0, r5
 8004980:	f7fc f948 	bl	8000c14 <__aeabi_fmul>
 8004984:	4943      	ldr	r1, [pc, #268]	; (8004a94 <atanf+0x1fc>)
 8004986:	f7fc f83b 	bl	8000a00 <__aeabi_fsub>
 800498a:	4629      	mov	r1, r5
 800498c:	f7fc f942 	bl	8000c14 <__aeabi_fmul>
 8004990:	4941      	ldr	r1, [pc, #260]	; (8004a98 <atanf+0x200>)
 8004992:	f7fc f835 	bl	8000a00 <__aeabi_fsub>
 8004996:	4629      	mov	r1, r5
 8004998:	f7fc f93c 	bl	8000c14 <__aeabi_fmul>
 800499c:	493f      	ldr	r1, [pc, #252]	; (8004a9c <atanf+0x204>)
 800499e:	f7fc f82f 	bl	8000a00 <__aeabi_fsub>
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7fc f936 	bl	8000c14 <__aeabi_fmul>
 80049a8:	493d      	ldr	r1, [pc, #244]	; (8004aa0 <atanf+0x208>)
 80049aa:	f7fc f829 	bl	8000a00 <__aeabi_fsub>
 80049ae:	4629      	mov	r1, r5
 80049b0:	f7fc f930 	bl	8000c14 <__aeabi_fmul>
 80049b4:	1c73      	adds	r3, r6, #1
 80049b6:	4601      	mov	r1, r0
 80049b8:	4640      	mov	r0, r8
 80049ba:	d139      	bne.n	8004a30 <atanf+0x198>
 80049bc:	f7fc f822 	bl	8000a04 <__addsf3>
 80049c0:	4621      	mov	r1, r4
 80049c2:	f7fc f927 	bl	8000c14 <__aeabi_fmul>
 80049c6:	4601      	mov	r1, r0
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7fc f819 	bl	8000a00 <__aeabi_fsub>
 80049ce:	e772      	b.n	80048b6 <atanf+0x1e>
 80049d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80049d4:	f7fc f814 	bl	8000a00 <__aeabi_fsub>
 80049d8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80049dc:	4605      	mov	r5, r0
 80049de:	4620      	mov	r0, r4
 80049e0:	f7fc f810 	bl	8000a04 <__addsf3>
 80049e4:	4601      	mov	r1, r0
 80049e6:	4628      	mov	r0, r5
 80049e8:	f7fc f9c8 	bl	8000d7c <__aeabi_fdiv>
 80049ec:	2601      	movs	r6, #1
 80049ee:	4604      	mov	r4, r0
 80049f0:	e799      	b.n	8004926 <atanf+0x8e>
 80049f2:	4b2c      	ldr	r3, [pc, #176]	; (8004aa4 <atanf+0x20c>)
 80049f4:	429d      	cmp	r5, r3
 80049f6:	dc14      	bgt.n	8004a22 <atanf+0x18a>
 80049f8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80049fc:	f7fc f800 	bl	8000a00 <__aeabi_fsub>
 8004a00:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8004a04:	4605      	mov	r5, r0
 8004a06:	4620      	mov	r0, r4
 8004a08:	f7fc f904 	bl	8000c14 <__aeabi_fmul>
 8004a0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004a10:	f7fb fff8 	bl	8000a04 <__addsf3>
 8004a14:	4601      	mov	r1, r0
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7fc f9b0 	bl	8000d7c <__aeabi_fdiv>
 8004a1c:	2602      	movs	r6, #2
 8004a1e:	4604      	mov	r4, r0
 8004a20:	e781      	b.n	8004926 <atanf+0x8e>
 8004a22:	4601      	mov	r1, r0
 8004a24:	4820      	ldr	r0, [pc, #128]	; (8004aa8 <atanf+0x210>)
 8004a26:	f7fc f9a9 	bl	8000d7c <__aeabi_fdiv>
 8004a2a:	2603      	movs	r6, #3
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	e77a      	b.n	8004926 <atanf+0x8e>
 8004a30:	f7fb ffe8 	bl	8000a04 <__addsf3>
 8004a34:	4621      	mov	r1, r4
 8004a36:	f7fc f8ed 	bl	8000c14 <__aeabi_fmul>
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <atanf+0x214>)
 8004a3c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8004a40:	f7fb ffde 	bl	8000a00 <__aeabi_fsub>
 8004a44:	4621      	mov	r1, r4
 8004a46:	f7fb ffdb 	bl	8000a00 <__aeabi_fsub>
 8004a4a:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <atanf+0x218>)
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004a52:	f7fb ffd5 	bl	8000a00 <__aeabi_fsub>
 8004a56:	2f00      	cmp	r7, #0
 8004a58:	4604      	mov	r4, r0
 8004a5a:	f6bf af32 	bge.w	80048c2 <atanf+0x2a>
 8004a5e:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8004a62:	e72e      	b.n	80048c2 <atanf+0x2a>
 8004a64:	4c13      	ldr	r4, [pc, #76]	; (8004ab4 <atanf+0x21c>)
 8004a66:	e72c      	b.n	80048c2 <atanf+0x2a>
 8004a68:	bfc90fdb 	.word	0xbfc90fdb
 8004a6c:	3edfffff 	.word	0x3edfffff
 8004a70:	7149f2ca 	.word	0x7149f2ca
 8004a74:	3f97ffff 	.word	0x3f97ffff
 8004a78:	3c8569d7 	.word	0x3c8569d7
 8004a7c:	3d4bda59 	.word	0x3d4bda59
 8004a80:	3d886b35 	.word	0x3d886b35
 8004a84:	3dba2e6e 	.word	0x3dba2e6e
 8004a88:	3e124925 	.word	0x3e124925
 8004a8c:	3eaaaaab 	.word	0x3eaaaaab
 8004a90:	bd15a221 	.word	0xbd15a221
 8004a94:	3d6ef16b 	.word	0x3d6ef16b
 8004a98:	3d9d8795 	.word	0x3d9d8795
 8004a9c:	3de38e38 	.word	0x3de38e38
 8004aa0:	3e4ccccd 	.word	0x3e4ccccd
 8004aa4:	401bffff 	.word	0x401bffff
 8004aa8:	bf800000 	.word	0xbf800000
 8004aac:	08004eb4 	.word	0x08004eb4
 8004ab0:	08004ea4 	.word	0x08004ea4
 8004ab4:	3fc90fdb 	.word	0x3fc90fdb

08004ab8 <fabsf>:
 8004ab8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004abc:	4770      	bx	lr
	...

08004ac0 <hypotf>:
 8004ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac4:	b08a      	sub	sp, #40	; 0x28
 8004ac6:	4607      	mov	r7, r0
 8004ac8:	460e      	mov	r6, r1
 8004aca:	f000 f851 	bl	8004b70 <__ieee754_hypotf>
 8004ace:	4d24      	ldr	r5, [pc, #144]	; (8004b60 <hypotf+0xa0>)
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	f995 3000 	ldrsb.w	r3, [r5]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	d033      	beq.n	8004b42 <hypotf+0x82>
 8004ada:	f000 f95d 	bl	8004d98 <finitef>
 8004ade:	4680      	mov	r8, r0
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d12e      	bne.n	8004b42 <hypotf+0x82>
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f000 f957 	bl	8004d98 <finitef>
 8004aea:	b350      	cbz	r0, 8004b42 <hypotf+0x82>
 8004aec:	4630      	mov	r0, r6
 8004aee:	f000 f953 	bl	8004d98 <finitef>
 8004af2:	b330      	cbz	r0, 8004b42 <hypotf+0x82>
 8004af4:	2303      	movs	r3, #3
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <hypotf+0xa4>)
 8004afa:	4638      	mov	r0, r7
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	f8cd 8020 	str.w	r8, [sp, #32]
 8004b02:	f7fb fc9b 	bl	800043c <__aeabi_f2d>
 8004b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f7fb fc96 	bl	800043c <__aeabi_f2d>
 8004b10:	f995 3000 	ldrsb.w	r3, [r5]
 8004b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b18:	b9bb      	cbnz	r3, 8004b4a <hypotf+0x8a>
 8004b1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <hypotf+0xa8>)
 8004b20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b24:	4668      	mov	r0, sp
 8004b26:	f000 f935 	bl	8004d94 <matherr>
 8004b2a:	b1a0      	cbz	r0, 8004b56 <hypotf+0x96>
 8004b2c:	9b08      	ldr	r3, [sp, #32]
 8004b2e:	b11b      	cbz	r3, 8004b38 <hypotf+0x78>
 8004b30:	f7ff fe1e 	bl	8004770 <__errno>
 8004b34:	9b08      	ldr	r3, [sp, #32]
 8004b36:	6003      	str	r3, [r0, #0]
 8004b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b3c:	f7fb ff0c 	bl	8000958 <__aeabi_d2f>
 8004b40:	4604      	mov	r4, r0
 8004b42:	4620      	mov	r0, r4
 8004b44:	b00a      	add	sp, #40	; 0x28
 8004b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	4907      	ldr	r1, [pc, #28]	; (8004b6c <hypotf+0xac>)
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b54:	d1e6      	bne.n	8004b24 <hypotf+0x64>
 8004b56:	f7ff fe0b 	bl	8004770 <__errno>
 8004b5a:	2322      	movs	r3, #34	; 0x22
 8004b5c:	6003      	str	r3, [r0, #0]
 8004b5e:	e7e5      	b.n	8004b2c <hypotf+0x6c>
 8004b60:	2000008c 	.word	0x2000008c
 8004b64:	08004ec4 	.word	0x08004ec4
 8004b68:	47efffff 	.word	0x47efffff
 8004b6c:	7ff00000 	.word	0x7ff00000

08004b70 <__ieee754_hypotf>:
 8004b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004b78:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004b7c:	42b4      	cmp	r4, r6
 8004b7e:	bfbe      	ittt	lt
 8004b80:	4623      	movlt	r3, r4
 8004b82:	4634      	movlt	r4, r6
 8004b84:	461e      	movlt	r6, r3
 8004b86:	1ba3      	subs	r3, r4, r6
 8004b88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b8c:	4625      	mov	r5, r4
 8004b8e:	4637      	mov	r7, r6
 8004b90:	dd05      	ble.n	8004b9e <__ieee754_hypotf+0x2e>
 8004b92:	4631      	mov	r1, r6
 8004b94:	4620      	mov	r0, r4
 8004b96:	f7fb ff35 	bl	8000a04 <__addsf3>
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	e010      	b.n	8004bc0 <__ieee754_hypotf+0x50>
 8004b9e:	f1b4 4fb1 	cmp.w	r4, #1484783616	; 0x58800000
 8004ba2:	dd6b      	ble.n	8004c7c <__ieee754_hypotf+0x10c>
 8004ba4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004ba8:	db10      	blt.n	8004bcc <__ieee754_hypotf+0x5c>
 8004baa:	d00c      	beq.n	8004bc6 <__ieee754_hypotf+0x56>
 8004bac:	4631      	mov	r1, r6
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f7fb ff28 	bl	8000a04 <__addsf3>
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004bba:	d101      	bne.n	8004bc0 <__ieee754_hypotf+0x50>
 8004bbc:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc6:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 8004bca:	e7f4      	b.n	8004bb6 <__ieee754_hypotf+0x46>
 8004bcc:	f104 445e 	add.w	r4, r4, #3724541952	; 0xde000000
 8004bd0:	f106 465e 	add.w	r6, r6, #3724541952	; 0xde000000
 8004bd4:	4625      	mov	r5, r4
 8004bd6:	4637      	mov	r7, r6
 8004bd8:	f04f 0844 	mov.w	r8, #68	; 0x44
 8004bdc:	f1b6 5f1a 	cmp.w	r6, #645922816	; 0x26800000
 8004be0:	da12      	bge.n	8004c08 <__ieee754_hypotf+0x98>
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	d0ec      	beq.n	8004bc0 <__ieee754_hypotf+0x50>
 8004be6:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8004bea:	da4a      	bge.n	8004c82 <__ieee754_hypotf+0x112>
 8004bec:	f04f 41fd 	mov.w	r1, #2122317824	; 0x7e800000
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	f7fc f80f 	bl	8000c14 <__aeabi_fmul>
 8004bf6:	f04f 41fd 	mov.w	r1, #2122317824	; 0x7e800000
 8004bfa:	4607      	mov	r7, r0
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f7fc f809 	bl	8000c14 <__aeabi_fmul>
 8004c02:	4605      	mov	r5, r0
 8004c04:	f1a8 087e 	sub.w	r8, r8, #126	; 0x7e
 8004c08:	4639      	mov	r1, r7
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7fb fef8 	bl	8000a00 <__aeabi_fsub>
 8004c10:	4601      	mov	r1, r0
 8004c12:	4681      	mov	r9, r0
 8004c14:	4638      	mov	r0, r7
 8004c16:	f7fc f99b 	bl	8000f50 <__aeabi_fcmplt>
 8004c1a:	4b34      	ldr	r3, [pc, #208]	; (8004cec <__ieee754_hypotf+0x17c>)
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d039      	beq.n	8004c94 <__ieee754_hypotf+0x124>
 8004c20:	401c      	ands	r4, r3
 8004c22:	4621      	mov	r1, r4
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7fb fff5 	bl	8000c14 <__aeabi_fmul>
 8004c2a:	4639      	mov	r1, r7
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 8004c32:	f7fb ffef 	bl	8000c14 <__aeabi_fmul>
 8004c36:	4621      	mov	r1, r4
 8004c38:	4607      	mov	r7, r0
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f7fb fee0 	bl	8000a00 <__aeabi_fsub>
 8004c40:	4621      	mov	r1, r4
 8004c42:	4681      	mov	r9, r0
 8004c44:	4628      	mov	r0, r5
 8004c46:	f7fb fedd 	bl	8000a04 <__addsf3>
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	4648      	mov	r0, r9
 8004c4e:	f7fb ffe1 	bl	8000c14 <__aeabi_fmul>
 8004c52:	4601      	mov	r1, r0
 8004c54:	4638      	mov	r0, r7
 8004c56:	f7fb fed3 	bl	8000a00 <__aeabi_fsub>
 8004c5a:	4601      	mov	r1, r0
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f7fb fecf 	bl	8000a00 <__aeabi_fsub>
 8004c62:	f000 f845 	bl	8004cf0 <__ieee754_sqrtf>
 8004c66:	4605      	mov	r5, r0
 8004c68:	f1b8 0f00 	cmp.w	r8, #0
 8004c6c:	d0a8      	beq.n	8004bc0 <__ieee754_hypotf+0x50>
 8004c6e:	ea4f 51c8 	mov.w	r1, r8, lsl #23
 8004c72:	f101 517e 	add.w	r1, r1, #1065353216	; 0x3f800000
 8004c76:	f7fb ffcd 	bl	8000c14 <__aeabi_fmul>
 8004c7a:	e78e      	b.n	8004b9a <__ieee754_hypotf+0x2a>
 8004c7c:	f04f 0800 	mov.w	r8, #0
 8004c80:	e7ac      	b.n	8004bdc <__ieee754_hypotf+0x6c>
 8004c82:	f104 5408 	add.w	r4, r4, #570425344	; 0x22000000
 8004c86:	f106 5608 	add.w	r6, r6, #570425344	; 0x22000000
 8004c8a:	f1a8 0844 	sub.w	r8, r8, #68	; 0x44
 8004c8e:	4625      	mov	r5, r4
 8004c90:	4637      	mov	r7, r6
 8004c92:	e7b9      	b.n	8004c08 <__ieee754_hypotf+0x98>
 8004c94:	401e      	ands	r6, r3
 8004c96:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f7fb ffb9 	bl	8000c14 <__aeabi_fmul>
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	4682      	mov	sl, r0
 8004ca6:	f109 4000 	add.w	r0, r9, #2147483648	; 0x80000000
 8004caa:	f7fb ffb3 	bl	8000c14 <__aeabi_fmul>
 8004cae:	4629      	mov	r1, r5
 8004cb0:	4681      	mov	r9, r0
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f7fb fea6 	bl	8000a04 <__addsf3>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	f7fb fea1 	bl	8000a00 <__aeabi_fsub>
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	f7fb ffa8 	bl	8000c14 <__aeabi_fmul>
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7fb fe99 	bl	8000a00 <__aeabi_fsub>
 8004cce:	4621      	mov	r1, r4
 8004cd0:	f7fb ffa0 	bl	8000c14 <__aeabi_fmul>
 8004cd4:	4601      	mov	r1, r0
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f7fb fe94 	bl	8000a04 <__addsf3>
 8004cdc:	4601      	mov	r1, r0
 8004cde:	4648      	mov	r0, r9
 8004ce0:	f7fb fe8e 	bl	8000a00 <__aeabi_fsub>
 8004ce4:	4601      	mov	r1, r0
 8004ce6:	4650      	mov	r0, sl
 8004ce8:	e7b9      	b.n	8004c5e <__ieee754_hypotf+0xee>
 8004cea:	bf00      	nop
 8004cec:	fffff000 	.word	0xfffff000

08004cf0 <__ieee754_sqrtf>:
 8004cf0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8004cf4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	d309      	bcc.n	8004d14 <__ieee754_sqrtf+0x24>
 8004d00:	4601      	mov	r1, r0
 8004d02:	f7fb ff87 	bl	8000c14 <__aeabi_fmul>
 8004d06:	4601      	mov	r1, r0
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f7fb fe7b 	bl	8000a04 <__addsf3>
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4620      	mov	r0, r4
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	d0fb      	beq.n	8004d10 <__ieee754_sqrtf+0x20>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	da06      	bge.n	8004d2a <__ieee754_sqrtf+0x3a>
 8004d1c:	4601      	mov	r1, r0
 8004d1e:	f7fb fe6f 	bl	8000a00 <__aeabi_fsub>
 8004d22:	4601      	mov	r1, r0
 8004d24:	f7fc f82a 	bl	8000d7c <__aeabi_fdiv>
 8004d28:	e7f1      	b.n	8004d0e <__ieee754_sqrtf+0x1e>
 8004d2a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004d2e:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8004d32:	d204      	bcs.n	8004d3e <__ieee754_sqrtf+0x4e>
 8004d34:	2200      	movs	r2, #0
 8004d36:	0219      	lsls	r1, r3, #8
 8004d38:	d529      	bpl.n	8004d8e <__ieee754_sqrtf+0x9e>
 8004d3a:	3a01      	subs	r2, #1
 8004d3c:	1aa4      	subs	r4, r4, r2
 8004d3e:	3c7f      	subs	r4, #127	; 0x7f
 8004d40:	07e2      	lsls	r2, r4, #31
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	ea4f 0164 	mov.w	r1, r4, asr #1
 8004d4a:	4616      	mov	r6, r2
 8004d4c:	f04f 0419 	mov.w	r4, #25
 8004d50:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004d54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d5c:	bf48      	it	mi
 8004d5e:	005b      	lslmi	r3, r3, #1
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	1835      	adds	r5, r6, r0
 8004d64:	429d      	cmp	r5, r3
 8004d66:	bfde      	ittt	le
 8004d68:	182e      	addle	r6, r5, r0
 8004d6a:	1b5b      	suble	r3, r3, r5
 8004d6c:	1812      	addle	r2, r2, r0
 8004d6e:	3c01      	subs	r4, #1
 8004d70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d74:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004d78:	d1f3      	bne.n	8004d62 <__ieee754_sqrtf+0x72>
 8004d7a:	b113      	cbz	r3, 8004d82 <__ieee754_sqrtf+0x92>
 8004d7c:	3201      	adds	r2, #1
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	1054      	asrs	r4, r2, #1
 8004d84:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8004d88:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8004d8c:	e7c0      	b.n	8004d10 <__ieee754_sqrtf+0x20>
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	3201      	adds	r2, #1
 8004d92:	e7d0      	b.n	8004d36 <__ieee754_sqrtf+0x46>

08004d94 <matherr>:
 8004d94:	2000      	movs	r0, #0
 8004d96:	4770      	bx	lr

08004d98 <finitef>:
 8004d98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004d9c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004da0:	bfac      	ite	ge
 8004da2:	2000      	movge	r0, #0
 8004da4:	2001      	movlt	r0, #1
 8004da6:	4770      	bx	lr

08004da8 <_init>:
 8004da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004daa:	bf00      	nop
 8004dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dae:	bc08      	pop	{r3}
 8004db0:	469e      	mov	lr, r3
 8004db2:	4770      	bx	lr

08004db4 <_fini>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	bf00      	nop
 8004db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dba:	bc08      	pop	{r3}
 8004dbc:	469e      	mov	lr, r3
 8004dbe:	4770      	bx	lr
